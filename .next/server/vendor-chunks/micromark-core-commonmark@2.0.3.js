"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/micromark-core-commonmark@2.0.3";
exports.ids = ["vendor-chunks/micromark-core-commonmark@2.0.3"];
exports.modules = {

/***/ "(rsc)/../../node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/attention.js":
/*!****************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/attention.js ***!
  \****************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   attention: () => (/* binding */ attention)\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! devlop */ \"(rsc)/../../node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js\");\n/* harmony import */ var micromark_util_chunked__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! micromark-util-chunked */ \"(rsc)/../../node_modules/.pnpm/micromark-util-chunked@2.0.1/node_modules/micromark-util-chunked/dev/index.js\");\n/* harmony import */ var micromark_util_classify_character__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! micromark-util-classify-character */ \"(rsc)/../../node_modules/.pnpm/micromark-util-classify-character@2.0.1/node_modules/micromark-util-classify-character/dev/index.js\");\n/* harmony import */ var micromark_util_resolve_all__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! micromark-util-resolve-all */ \"(rsc)/../../node_modules/.pnpm/micromark-util-resolve-all@2.0.1/node_modules/micromark-util-resolve-all/index.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! micromark-util-symbol */ \"(rsc)/../../node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/types.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! micromark-util-symbol */ \"(rsc)/../../node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/codes.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! micromark-util-symbol */ \"(rsc)/../../node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/constants.js\");\n/**\n * @import {\n *   Code,\n *   Construct,\n *   Event,\n *   Point,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */ \n\n\n\n\n/** @type {Construct} */ const attention = {\n    name: \"attention\",\n    resolveAll: resolveAllAttention,\n    tokenize: tokenizeAttention\n};\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */ // eslint-disable-next-line complexity\nfunction resolveAllAttention(events, context) {\n    let index = -1;\n    /** @type {number} */ let open;\n    /** @type {Token} */ let group;\n    /** @type {Token} */ let text;\n    /** @type {Token} */ let openingSequence;\n    /** @type {Token} */ let closingSequence;\n    /** @type {number} */ let use;\n    /** @type {Array<Event>} */ let nextEvents;\n    /** @type {number} */ let offset;\n    // Walk through all events.\n    //\n    // Note: performance of this is fine on an mb of normal markdown, but it’s\n    // a bottleneck for malicious stuff.\n    while(++index < events.length){\n        // Find a token that can close.\n        if (events[index][0] === \"enter\" && events[index][1].type === \"attentionSequence\" && events[index][1]._close) {\n            open = index;\n            // Now walk back to find an opener.\n            while(open--){\n                // Find a token that can open the closer.\n                if (events[open][0] === \"exit\" && events[open][1].type === \"attentionSequence\" && events[open][1]._open && // If the markers are the same:\n                context.sliceSerialize(events[open][1]).charCodeAt(0) === context.sliceSerialize(events[index][1]).charCodeAt(0)) {\n                    // If the opening can close or the closing can open,\n                    // and the close size *is not* a multiple of three,\n                    // but the sum of the opening and closing size *is* multiple of three,\n                    // then don’t match.\n                    if ((events[open][1]._close || events[index][1]._open) && (events[index][1].end.offset - events[index][1].start.offset) % 3 && !((events[open][1].end.offset - events[open][1].start.offset + events[index][1].end.offset - events[index][1].start.offset) % 3)) {\n                        continue;\n                    }\n                    // Number of markers to use from the sequence.\n                    use = events[open][1].end.offset - events[open][1].start.offset > 1 && events[index][1].end.offset - events[index][1].start.offset > 1 ? 2 : 1;\n                    const start = {\n                        ...events[open][1].end\n                    };\n                    const end = {\n                        ...events[index][1].start\n                    };\n                    movePoint(start, -use);\n                    movePoint(end, use);\n                    openingSequence = {\n                        type: use > 1 ? micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.strongSequence : micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.emphasisSequence,\n                        start,\n                        end: {\n                            ...events[open][1].end\n                        }\n                    };\n                    closingSequence = {\n                        type: use > 1 ? micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.strongSequence : micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.emphasisSequence,\n                        start: {\n                            ...events[index][1].start\n                        },\n                        end\n                    };\n                    text = {\n                        type: use > 1 ? micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.strongText : micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.emphasisText,\n                        start: {\n                            ...events[open][1].end\n                        },\n                        end: {\n                            ...events[index][1].start\n                        }\n                    };\n                    group = {\n                        type: use > 1 ? micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.strong : micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.emphasis,\n                        start: {\n                            ...openingSequence.start\n                        },\n                        end: {\n                            ...closingSequence.end\n                        }\n                    };\n                    events[open][1].end = {\n                        ...openingSequence.start\n                    };\n                    events[index][1].start = {\n                        ...closingSequence.end\n                    };\n                    nextEvents = [];\n                    // If there are more markers in the opening, add them before.\n                    if (events[open][1].end.offset - events[open][1].start.offset) {\n                        nextEvents = (0,micromark_util_chunked__WEBPACK_IMPORTED_MODULE_1__.push)(nextEvents, [\n                            [\n                                \"enter\",\n                                events[open][1],\n                                context\n                            ],\n                            [\n                                \"exit\",\n                                events[open][1],\n                                context\n                            ]\n                        ]);\n                    }\n                    // Opening.\n                    nextEvents = (0,micromark_util_chunked__WEBPACK_IMPORTED_MODULE_1__.push)(nextEvents, [\n                        [\n                            \"enter\",\n                            group,\n                            context\n                        ],\n                        [\n                            \"enter\",\n                            openingSequence,\n                            context\n                        ],\n                        [\n                            \"exit\",\n                            openingSequence,\n                            context\n                        ],\n                        [\n                            \"enter\",\n                            text,\n                            context\n                        ]\n                    ]);\n                    // Always populated by defaults.\n                    (0,devlop__WEBPACK_IMPORTED_MODULE_2__.ok)(context.parser.constructs.insideSpan.null, \"expected `insideSpan` to be populated\");\n                    // Between.\n                    nextEvents = (0,micromark_util_chunked__WEBPACK_IMPORTED_MODULE_1__.push)(nextEvents, (0,micromark_util_resolve_all__WEBPACK_IMPORTED_MODULE_3__.resolveAll)(context.parser.constructs.insideSpan.null, events.slice(open + 1, index), context));\n                    // Closing.\n                    nextEvents = (0,micromark_util_chunked__WEBPACK_IMPORTED_MODULE_1__.push)(nextEvents, [\n                        [\n                            \"exit\",\n                            text,\n                            context\n                        ],\n                        [\n                            \"enter\",\n                            closingSequence,\n                            context\n                        ],\n                        [\n                            \"exit\",\n                            closingSequence,\n                            context\n                        ],\n                        [\n                            \"exit\",\n                            group,\n                            context\n                        ]\n                    ]);\n                    // If there are more markers in the closing, add them after.\n                    if (events[index][1].end.offset - events[index][1].start.offset) {\n                        offset = 2;\n                        nextEvents = (0,micromark_util_chunked__WEBPACK_IMPORTED_MODULE_1__.push)(nextEvents, [\n                            [\n                                \"enter\",\n                                events[index][1],\n                                context\n                            ],\n                            [\n                                \"exit\",\n                                events[index][1],\n                                context\n                            ]\n                        ]);\n                    } else {\n                        offset = 0;\n                    }\n                    (0,micromark_util_chunked__WEBPACK_IMPORTED_MODULE_1__.splice)(events, open - 1, index - open + 3, nextEvents);\n                    index = open + nextEvents.length - offset - 2;\n                    break;\n                }\n            }\n        }\n    }\n    // Remove remaining sequences.\n    index = -1;\n    while(++index < events.length){\n        if (events[index][1].type === \"attentionSequence\") {\n            events[index][1].type = \"data\";\n        }\n    }\n    return events;\n}\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */ function tokenizeAttention(effects, ok) {\n    const attentionMarkers = this.parser.constructs.attentionMarkers.null;\n    const previous = this.previous;\n    const before = (0,micromark_util_classify_character__WEBPACK_IMPORTED_MODULE_4__.classifyCharacter)(previous);\n    /** @type {NonNullable<Code>} */ let marker;\n    return start;\n    /**\n   * Before a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */ function start(code) {\n        (0,devlop__WEBPACK_IMPORTED_MODULE_2__.ok)(code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_5__.codes.asterisk || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_5__.codes.underscore, \"expected asterisk or underscore\");\n        marker = code;\n        effects.enter(\"attentionSequence\");\n        return inside(code);\n    }\n    /**\n   * In a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^^\n   * ```\n   *\n   * @type {State}\n   */ function inside(code) {\n        if (code === marker) {\n            effects.consume(code);\n            return inside;\n        }\n        const token = effects.exit(\"attentionSequence\");\n        // To do: next major: move this to resolver, just like `markdown-rs`.\n        const after = (0,micromark_util_classify_character__WEBPACK_IMPORTED_MODULE_4__.classifyCharacter)(code);\n        // Always populated by defaults.\n        (0,devlop__WEBPACK_IMPORTED_MODULE_2__.ok)(attentionMarkers, \"expected `attentionMarkers` to be populated\");\n        const open = !after || after === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_6__.constants.characterGroupPunctuation && before || attentionMarkers.includes(code);\n        const close = !before || before === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_6__.constants.characterGroupPunctuation && after || attentionMarkers.includes(previous);\n        token._open = Boolean(marker === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_5__.codes.asterisk ? open : open && (before || !close));\n        token._close = Boolean(marker === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_5__.codes.asterisk ? close : close && (after || !open));\n        return ok(code);\n    }\n}\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n *   Point.\n * @param {number} offset\n *   Amount to move.\n * @returns {undefined}\n *   Nothing.\n */ function movePoint(point, offset) {\n    point.column += offset;\n    point.offset += offset;\n    point._bufferIndex += offset;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21pY3JvbWFyay1jb3JlLWNvbW1vbm1hcmtAMi4wLjMvbm9kZV9tb2R1bGVzL21pY3JvbWFyay1jb3JlLWNvbW1vbm1hcmsvZGV2L2xpYi9hdHRlbnRpb24uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7Ozs7Ozs7Ozs7O0NBWUMsR0FFa0M7QUFDZ0I7QUFDZ0I7QUFDZDtBQUNRO0FBRTdELHNCQUFzQixHQUNmLE1BQU1TLFlBQVk7SUFDdkJDLE1BQU07SUFDTkwsWUFBWU07SUFDWkMsVUFBVUM7QUFDWixFQUFDO0FBRUQ7Ozs7Q0FJQyxHQUNELHNDQUFzQztBQUN0QyxTQUFTRixvQkFBb0JHLE1BQU0sRUFBRUMsT0FBTztJQUMxQyxJQUFJQyxRQUFRLENBQUM7SUFDYixtQkFBbUIsR0FDbkIsSUFBSUM7SUFDSixrQkFBa0IsR0FDbEIsSUFBSUM7SUFDSixrQkFBa0IsR0FDbEIsSUFBSUM7SUFDSixrQkFBa0IsR0FDbEIsSUFBSUM7SUFDSixrQkFBa0IsR0FDbEIsSUFBSUM7SUFDSixtQkFBbUIsR0FDbkIsSUFBSUM7SUFDSix5QkFBeUIsR0FDekIsSUFBSUM7SUFDSixtQkFBbUIsR0FDbkIsSUFBSUM7SUFFSiwyQkFBMkI7SUFDM0IsRUFBRTtJQUNGLDBFQUEwRTtJQUMxRSxvQ0FBb0M7SUFDcEMsTUFBTyxFQUFFUixRQUFRRixPQUFPVyxNQUFNLENBQUU7UUFDOUIsK0JBQStCO1FBQy9CLElBQ0VYLE1BQU0sQ0FBQ0UsTUFBTSxDQUFDLEVBQUUsS0FBSyxXQUNyQkYsTUFBTSxDQUFDRSxNQUFNLENBQUMsRUFBRSxDQUFDVSxJQUFJLEtBQUssdUJBQzFCWixNQUFNLENBQUNFLE1BQU0sQ0FBQyxFQUFFLENBQUNXLE1BQU0sRUFDdkI7WUFDQVYsT0FBT0Q7WUFFUCxtQ0FBbUM7WUFDbkMsTUFBT0MsT0FBUTtnQkFDYix5Q0FBeUM7Z0JBQ3pDLElBQ0VILE1BQU0sQ0FBQ0csS0FBSyxDQUFDLEVBQUUsS0FBSyxVQUNwQkgsTUFBTSxDQUFDRyxLQUFLLENBQUMsRUFBRSxDQUFDUyxJQUFJLEtBQUssdUJBQ3pCWixNQUFNLENBQUNHLEtBQUssQ0FBQyxFQUFFLENBQUNXLEtBQUssSUFDckIsK0JBQStCO2dCQUMvQmIsUUFBUWMsY0FBYyxDQUFDZixNQUFNLENBQUNHLEtBQUssQ0FBQyxFQUFFLEVBQUVhLFVBQVUsQ0FBQyxPQUNqRGYsUUFBUWMsY0FBYyxDQUFDZixNQUFNLENBQUNFLE1BQU0sQ0FBQyxFQUFFLEVBQUVjLFVBQVUsQ0FBQyxJQUN0RDtvQkFDQSxvREFBb0Q7b0JBQ3BELG1EQUFtRDtvQkFDbkQsc0VBQXNFO29CQUN0RSxvQkFBb0I7b0JBQ3BCLElBQ0UsQ0FBQ2hCLE1BQU0sQ0FBQ0csS0FBSyxDQUFDLEVBQUUsQ0FBQ1UsTUFBTSxJQUFJYixNQUFNLENBQUNFLE1BQU0sQ0FBQyxFQUFFLENBQUNZLEtBQUssS0FDakQsQ0FBQ2QsTUFBTSxDQUFDRSxNQUFNLENBQUMsRUFBRSxDQUFDZSxHQUFHLENBQUNQLE1BQU0sR0FBR1YsTUFBTSxDQUFDRSxNQUFNLENBQUMsRUFBRSxDQUFDZ0IsS0FBSyxDQUFDUixNQUFNLElBQUksS0FDaEUsQ0FDRSxFQUFDVixNQUFNLENBQUNHLEtBQUssQ0FBQyxFQUFFLENBQUNjLEdBQUcsQ0FBQ1AsTUFBTSxHQUN6QlYsTUFBTSxDQUFDRyxLQUFLLENBQUMsRUFBRSxDQUFDZSxLQUFLLENBQUNSLE1BQU0sR0FDNUJWLE1BQU0sQ0FBQ0UsTUFBTSxDQUFDLEVBQUUsQ0FBQ2UsR0FBRyxDQUFDUCxNQUFNLEdBQzNCVixNQUFNLENBQUNFLE1BQU0sQ0FBQyxFQUFFLENBQUNnQixLQUFLLENBQUNSLE1BQU0sSUFDL0IsSUFFRjt3QkFDQTtvQkFDRjtvQkFFQSw4Q0FBOEM7b0JBQzlDRixNQUNFUixNQUFNLENBQUNHLEtBQUssQ0FBQyxFQUFFLENBQUNjLEdBQUcsQ0FBQ1AsTUFBTSxHQUFHVixNQUFNLENBQUNHLEtBQUssQ0FBQyxFQUFFLENBQUNlLEtBQUssQ0FBQ1IsTUFBTSxHQUFHLEtBQzVEVixNQUFNLENBQUNFLE1BQU0sQ0FBQyxFQUFFLENBQUNlLEdBQUcsQ0FBQ1AsTUFBTSxHQUFHVixNQUFNLENBQUNFLE1BQU0sQ0FBQyxFQUFFLENBQUNnQixLQUFLLENBQUNSLE1BQU0sR0FBRyxJQUMxRCxJQUNBO29CQUVOLE1BQU1RLFFBQVE7d0JBQUMsR0FBR2xCLE1BQU0sQ0FBQ0csS0FBSyxDQUFDLEVBQUUsQ0FBQ2MsR0FBRztvQkFBQTtvQkFDckMsTUFBTUEsTUFBTTt3QkFBQyxHQUFHakIsTUFBTSxDQUFDRSxNQUFNLENBQUMsRUFBRSxDQUFDZ0IsS0FBSztvQkFBQTtvQkFDdENDLFVBQVVELE9BQU8sQ0FBQ1Y7b0JBQ2xCVyxVQUFVRixLQUFLVDtvQkFFZkYsa0JBQWtCO3dCQUNoQk0sTUFBTUosTUFBTSxJQUFJZCx3REFBS0EsQ0FBQzBCLGNBQWMsR0FBRzFCLHdEQUFLQSxDQUFDMkIsZ0JBQWdCO3dCQUM3REg7d0JBQ0FELEtBQUs7NEJBQUMsR0FBR2pCLE1BQU0sQ0FBQ0csS0FBSyxDQUFDLEVBQUUsQ0FBQ2MsR0FBRzt3QkFBQTtvQkFDOUI7b0JBQ0FWLGtCQUFrQjt3QkFDaEJLLE1BQU1KLE1BQU0sSUFBSWQsd0RBQUtBLENBQUMwQixjQUFjLEdBQUcxQix3REFBS0EsQ0FBQzJCLGdCQUFnQjt3QkFDN0RILE9BQU87NEJBQUMsR0FBR2xCLE1BQU0sQ0FBQ0UsTUFBTSxDQUFDLEVBQUUsQ0FBQ2dCLEtBQUs7d0JBQUE7d0JBQ2pDRDtvQkFDRjtvQkFDQVosT0FBTzt3QkFDTE8sTUFBTUosTUFBTSxJQUFJZCx3REFBS0EsQ0FBQzRCLFVBQVUsR0FBRzVCLHdEQUFLQSxDQUFDNkIsWUFBWTt3QkFDckRMLE9BQU87NEJBQUMsR0FBR2xCLE1BQU0sQ0FBQ0csS0FBSyxDQUFDLEVBQUUsQ0FBQ2MsR0FBRzt3QkFBQTt3QkFDOUJBLEtBQUs7NEJBQUMsR0FBR2pCLE1BQU0sQ0FBQ0UsTUFBTSxDQUFDLEVBQUUsQ0FBQ2dCLEtBQUs7d0JBQUE7b0JBQ2pDO29CQUNBZCxRQUFRO3dCQUNOUSxNQUFNSixNQUFNLElBQUlkLHdEQUFLQSxDQUFDOEIsTUFBTSxHQUFHOUIsd0RBQUtBLENBQUMrQixRQUFRO3dCQUM3Q1AsT0FBTzs0QkFBQyxHQUFHWixnQkFBZ0JZLEtBQUs7d0JBQUE7d0JBQ2hDRCxLQUFLOzRCQUFDLEdBQUdWLGdCQUFnQlUsR0FBRzt3QkFBQTtvQkFDOUI7b0JBRUFqQixNQUFNLENBQUNHLEtBQUssQ0FBQyxFQUFFLENBQUNjLEdBQUcsR0FBRzt3QkFBQyxHQUFHWCxnQkFBZ0JZLEtBQUs7b0JBQUE7b0JBQy9DbEIsTUFBTSxDQUFDRSxNQUFNLENBQUMsRUFBRSxDQUFDZ0IsS0FBSyxHQUFHO3dCQUFDLEdBQUdYLGdCQUFnQlUsR0FBRztvQkFBQTtvQkFFaERSLGFBQWEsRUFBRTtvQkFFZiw2REFBNkQ7b0JBQzdELElBQUlULE1BQU0sQ0FBQ0csS0FBSyxDQUFDLEVBQUUsQ0FBQ2MsR0FBRyxDQUFDUCxNQUFNLEdBQUdWLE1BQU0sQ0FBQ0csS0FBSyxDQUFDLEVBQUUsQ0FBQ2UsS0FBSyxDQUFDUixNQUFNLEVBQUU7d0JBQzdERCxhQUFhckIsNERBQUlBLENBQUNxQixZQUFZOzRCQUM1QjtnQ0FBQztnQ0FBU1QsTUFBTSxDQUFDRyxLQUFLLENBQUMsRUFBRTtnQ0FBRUY7NkJBQVE7NEJBQ25DO2dDQUFDO2dDQUFRRCxNQUFNLENBQUNHLEtBQUssQ0FBQyxFQUFFO2dDQUFFRjs2QkFBUTt5QkFDbkM7b0JBQ0g7b0JBRUEsV0FBVztvQkFDWFEsYUFBYXJCLDREQUFJQSxDQUFDcUIsWUFBWTt3QkFDNUI7NEJBQUM7NEJBQVNMOzRCQUFPSDt5QkFBUTt3QkFDekI7NEJBQUM7NEJBQVNLOzRCQUFpQkw7eUJBQVE7d0JBQ25DOzRCQUFDOzRCQUFRSzs0QkFBaUJMO3lCQUFRO3dCQUNsQzs0QkFBQzs0QkFBU0k7NEJBQU1KO3lCQUFRO3FCQUN6QjtvQkFFRCxnQ0FBZ0M7b0JBQ2hDZCwwQ0FBTUEsQ0FDSmMsUUFBUXlCLE1BQU0sQ0FBQ0MsVUFBVSxDQUFDQyxVQUFVLENBQUNDLElBQUksRUFDekM7b0JBR0YsV0FBVztvQkFDWHBCLGFBQWFyQiw0REFBSUEsQ0FDZnFCLFlBQ0FsQixzRUFBVUEsQ0FDUlUsUUFBUXlCLE1BQU0sQ0FBQ0MsVUFBVSxDQUFDQyxVQUFVLENBQUNDLElBQUksRUFDekM3QixPQUFPOEIsS0FBSyxDQUFDM0IsT0FBTyxHQUFHRCxRQUN2QkQ7b0JBSUosV0FBVztvQkFDWFEsYUFBYXJCLDREQUFJQSxDQUFDcUIsWUFBWTt3QkFDNUI7NEJBQUM7NEJBQVFKOzRCQUFNSjt5QkFBUTt3QkFDdkI7NEJBQUM7NEJBQVNNOzRCQUFpQk47eUJBQVE7d0JBQ25DOzRCQUFDOzRCQUFRTTs0QkFBaUJOO3lCQUFRO3dCQUNsQzs0QkFBQzs0QkFBUUc7NEJBQU9IO3lCQUFRO3FCQUN6QjtvQkFFRCw0REFBNEQ7b0JBQzVELElBQUlELE1BQU0sQ0FBQ0UsTUFBTSxDQUFDLEVBQUUsQ0FBQ2UsR0FBRyxDQUFDUCxNQUFNLEdBQUdWLE1BQU0sQ0FBQ0UsTUFBTSxDQUFDLEVBQUUsQ0FBQ2dCLEtBQUssQ0FBQ1IsTUFBTSxFQUFFO3dCQUMvREEsU0FBUzt3QkFDVEQsYUFBYXJCLDREQUFJQSxDQUFDcUIsWUFBWTs0QkFDNUI7Z0NBQUM7Z0NBQVNULE1BQU0sQ0FBQ0UsTUFBTSxDQUFDLEVBQUU7Z0NBQUVEOzZCQUFROzRCQUNwQztnQ0FBQztnQ0FBUUQsTUFBTSxDQUFDRSxNQUFNLENBQUMsRUFBRTtnQ0FBRUQ7NkJBQVE7eUJBQ3BDO29CQUNILE9BQU87d0JBQ0xTLFNBQVM7b0JBQ1g7b0JBRUFyQiw4REFBTUEsQ0FBQ1csUUFBUUcsT0FBTyxHQUFHRCxRQUFRQyxPQUFPLEdBQUdNO29CQUUzQ1AsUUFBUUMsT0FBT00sV0FBV0UsTUFBTSxHQUFHRCxTQUFTO29CQUM1QztnQkFDRjtZQUNGO1FBQ0Y7SUFDRjtJQUVBLDhCQUE4QjtJQUM5QlIsUUFBUSxDQUFDO0lBRVQsTUFBTyxFQUFFQSxRQUFRRixPQUFPVyxNQUFNLENBQUU7UUFDOUIsSUFBSVgsTUFBTSxDQUFDRSxNQUFNLENBQUMsRUFBRSxDQUFDVSxJQUFJLEtBQUsscUJBQXFCO1lBQ2pEWixNQUFNLENBQUNFLE1BQU0sQ0FBQyxFQUFFLENBQUNVLElBQUksR0FBRztRQUMxQjtJQUNGO0lBRUEsT0FBT1o7QUFDVDtBQUVBOzs7O0NBSUMsR0FDRCxTQUFTRCxrQkFBa0JnQyxPQUFPLEVBQUU3QyxFQUFFO0lBQ3BDLE1BQU04QyxtQkFBbUIsSUFBSSxDQUFDTixNQUFNLENBQUNDLFVBQVUsQ0FBQ0ssZ0JBQWdCLENBQUNILElBQUk7SUFDckUsTUFBTUksV0FBVyxJQUFJLENBQUNBLFFBQVE7SUFDOUIsTUFBTUMsU0FBUzVDLG9GQUFpQkEsQ0FBQzJDO0lBRWpDLDhCQUE4QixHQUM5QixJQUFJRTtJQUVKLE9BQU9qQjtJQUVQOzs7Ozs7Ozs7R0FTQyxHQUNELFNBQVNBLE1BQU1rQixJQUFJO1FBQ2pCakQsMENBQU1BLENBQ0ppRCxTQUFTNUMsd0RBQUtBLENBQUM2QyxRQUFRLElBQUlELFNBQVM1Qyx3REFBS0EsQ0FBQzhDLFVBQVUsRUFDcEQ7UUFFRkgsU0FBU0M7UUFDVEwsUUFBUVEsS0FBSyxDQUFDO1FBQ2QsT0FBT0MsT0FBT0o7SUFDaEI7SUFFQTs7Ozs7Ozs7O0dBU0MsR0FDRCxTQUFTSSxPQUFPSixJQUFJO1FBQ2xCLElBQUlBLFNBQVNELFFBQVE7WUFDbkJKLFFBQVFVLE9BQU8sQ0FBQ0w7WUFDaEIsT0FBT0k7UUFDVDtRQUVBLE1BQU1FLFFBQVFYLFFBQVFZLElBQUksQ0FBQztRQUUzQixxRUFBcUU7UUFDckUsTUFBTUMsUUFBUXRELG9GQUFpQkEsQ0FBQzhDO1FBRWhDLGdDQUFnQztRQUNoQ2pELDBDQUFNQSxDQUFDNkMsa0JBQWtCO1FBRXpCLE1BQU03QixPQUNKLENBQUN5QyxTQUNBQSxVQUFVbkQsNERBQVNBLENBQUNvRCx5QkFBeUIsSUFBSVgsVUFDbERGLGlCQUFpQmMsUUFBUSxDQUFDVjtRQUM1QixNQUFNVyxRQUNKLENBQUNiLFVBQ0FBLFdBQVd6Qyw0REFBU0EsQ0FBQ29ELHlCQUF5QixJQUFJRCxTQUNuRFosaUJBQWlCYyxRQUFRLENBQUNiO1FBRTVCUyxNQUFNNUIsS0FBSyxHQUFHa0MsUUFDWmIsV0FBVzNDLHdEQUFLQSxDQUFDNkMsUUFBUSxHQUFHbEMsT0FBT0EsUUFBUytCLENBQUFBLFVBQVUsQ0FBQ2EsS0FBSTtRQUU3REwsTUFBTTdCLE1BQU0sR0FBR21DLFFBQ2JiLFdBQVczQyx3REFBS0EsQ0FBQzZDLFFBQVEsR0FBR1UsUUFBUUEsU0FBVUgsQ0FBQUEsU0FBUyxDQUFDekMsSUFBRztRQUU3RCxPQUFPakIsR0FBR2tEO0lBQ1o7QUFDRjtBQUVBOzs7Ozs7Ozs7Ozs7Q0FZQyxHQUNELFNBQVNqQixVQUFVOEIsS0FBSyxFQUFFdkMsTUFBTTtJQUM5QnVDLE1BQU1DLE1BQU0sSUFBSXhDO0lBQ2hCdUMsTUFBTXZDLE1BQU0sSUFBSUE7SUFDaEJ1QyxNQUFNRSxZQUFZLElBQUl6QztBQUN4QiIsInNvdXJjZXMiOlsid2VicGFjazovL3dlYi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbWljcm9tYXJrLWNvcmUtY29tbW9ubWFya0AyLjAuMy9ub2RlX21vZHVsZXMvbWljcm9tYXJrLWNvcmUtY29tbW9ubWFyay9kZXYvbGliL2F0dGVudGlvbi5qcz9mNmU2Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGltcG9ydCB7XG4gKiAgIENvZGUsXG4gKiAgIENvbnN0cnVjdCxcbiAqICAgRXZlbnQsXG4gKiAgIFBvaW50LFxuICogICBSZXNvbHZlcixcbiAqICAgU3RhdGUsXG4gKiAgIFRva2VuaXplQ29udGV4dCxcbiAqICAgVG9rZW5pemVyLFxuICogICBUb2tlblxuICogfSBmcm9tICdtaWNyb21hcmstdXRpbC10eXBlcydcbiAqL1xuXG5pbXBvcnQge29rIGFzIGFzc2VydH0gZnJvbSAnZGV2bG9wJ1xuaW1wb3J0IHtwdXNoLCBzcGxpY2V9IGZyb20gJ21pY3JvbWFyay11dGlsLWNodW5rZWQnXG5pbXBvcnQge2NsYXNzaWZ5Q2hhcmFjdGVyfSBmcm9tICdtaWNyb21hcmstdXRpbC1jbGFzc2lmeS1jaGFyYWN0ZXInXG5pbXBvcnQge3Jlc29sdmVBbGx9IGZyb20gJ21pY3JvbWFyay11dGlsLXJlc29sdmUtYWxsJ1xuaW1wb3J0IHtjb2RlcywgY29uc3RhbnRzLCB0eXBlc30gZnJvbSAnbWljcm9tYXJrLXV0aWwtc3ltYm9sJ1xuXG4vKiogQHR5cGUge0NvbnN0cnVjdH0gKi9cbmV4cG9ydCBjb25zdCBhdHRlbnRpb24gPSB7XG4gIG5hbWU6ICdhdHRlbnRpb24nLFxuICByZXNvbHZlQWxsOiByZXNvbHZlQWxsQXR0ZW50aW9uLFxuICB0b2tlbml6ZTogdG9rZW5pemVBdHRlbnRpb25cbn1cblxuLyoqXG4gKiBUYWtlIGFsbCBldmVudHMgYW5kIHJlc29sdmUgYXR0ZW50aW9uIHRvIGVtcGhhc2lzIG9yIHN0cm9uZy5cbiAqXG4gKiBAdHlwZSB7UmVzb2x2ZXJ9XG4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb21wbGV4aXR5XG5mdW5jdGlvbiByZXNvbHZlQWxsQXR0ZW50aW9uKGV2ZW50cywgY29udGV4dCkge1xuICBsZXQgaW5kZXggPSAtMVxuICAvKiogQHR5cGUge251bWJlcn0gKi9cbiAgbGV0IG9wZW5cbiAgLyoqIEB0eXBlIHtUb2tlbn0gKi9cbiAgbGV0IGdyb3VwXG4gIC8qKiBAdHlwZSB7VG9rZW59ICovXG4gIGxldCB0ZXh0XG4gIC8qKiBAdHlwZSB7VG9rZW59ICovXG4gIGxldCBvcGVuaW5nU2VxdWVuY2VcbiAgLyoqIEB0eXBlIHtUb2tlbn0gKi9cbiAgbGV0IGNsb3NpbmdTZXF1ZW5jZVxuICAvKiogQHR5cGUge251bWJlcn0gKi9cbiAgbGV0IHVzZVxuICAvKiogQHR5cGUge0FycmF5PEV2ZW50Pn0gKi9cbiAgbGV0IG5leHRFdmVudHNcbiAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXG4gIGxldCBvZmZzZXRcblxuICAvLyBXYWxrIHRocm91Z2ggYWxsIGV2ZW50cy5cbiAgLy9cbiAgLy8gTm90ZTogcGVyZm9ybWFuY2Ugb2YgdGhpcyBpcyBmaW5lIG9uIGFuIG1iIG9mIG5vcm1hbCBtYXJrZG93biwgYnV0IGl04oCZc1xuICAvLyBhIGJvdHRsZW5lY2sgZm9yIG1hbGljaW91cyBzdHVmZi5cbiAgd2hpbGUgKCsraW5kZXggPCBldmVudHMubGVuZ3RoKSB7XG4gICAgLy8gRmluZCBhIHRva2VuIHRoYXQgY2FuIGNsb3NlLlxuICAgIGlmIChcbiAgICAgIGV2ZW50c1tpbmRleF1bMF0gPT09ICdlbnRlcicgJiZcbiAgICAgIGV2ZW50c1tpbmRleF1bMV0udHlwZSA9PT0gJ2F0dGVudGlvblNlcXVlbmNlJyAmJlxuICAgICAgZXZlbnRzW2luZGV4XVsxXS5fY2xvc2VcbiAgICApIHtcbiAgICAgIG9wZW4gPSBpbmRleFxuXG4gICAgICAvLyBOb3cgd2FsayBiYWNrIHRvIGZpbmQgYW4gb3BlbmVyLlxuICAgICAgd2hpbGUgKG9wZW4tLSkge1xuICAgICAgICAvLyBGaW5kIGEgdG9rZW4gdGhhdCBjYW4gb3BlbiB0aGUgY2xvc2VyLlxuICAgICAgICBpZiAoXG4gICAgICAgICAgZXZlbnRzW29wZW5dWzBdID09PSAnZXhpdCcgJiZcbiAgICAgICAgICBldmVudHNbb3Blbl1bMV0udHlwZSA9PT0gJ2F0dGVudGlvblNlcXVlbmNlJyAmJlxuICAgICAgICAgIGV2ZW50c1tvcGVuXVsxXS5fb3BlbiAmJlxuICAgICAgICAgIC8vIElmIHRoZSBtYXJrZXJzIGFyZSB0aGUgc2FtZTpcbiAgICAgICAgICBjb250ZXh0LnNsaWNlU2VyaWFsaXplKGV2ZW50c1tvcGVuXVsxXSkuY2hhckNvZGVBdCgwKSA9PT1cbiAgICAgICAgICAgIGNvbnRleHQuc2xpY2VTZXJpYWxpemUoZXZlbnRzW2luZGV4XVsxXSkuY2hhckNvZGVBdCgwKVxuICAgICAgICApIHtcbiAgICAgICAgICAvLyBJZiB0aGUgb3BlbmluZyBjYW4gY2xvc2Ugb3IgdGhlIGNsb3NpbmcgY2FuIG9wZW4sXG4gICAgICAgICAgLy8gYW5kIHRoZSBjbG9zZSBzaXplICppcyBub3QqIGEgbXVsdGlwbGUgb2YgdGhyZWUsXG4gICAgICAgICAgLy8gYnV0IHRoZSBzdW0gb2YgdGhlIG9wZW5pbmcgYW5kIGNsb3Npbmcgc2l6ZSAqaXMqIG11bHRpcGxlIG9mIHRocmVlLFxuICAgICAgICAgIC8vIHRoZW4gZG9u4oCZdCBtYXRjaC5cbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAoZXZlbnRzW29wZW5dWzFdLl9jbG9zZSB8fCBldmVudHNbaW5kZXhdWzFdLl9vcGVuKSAmJlxuICAgICAgICAgICAgKGV2ZW50c1tpbmRleF1bMV0uZW5kLm9mZnNldCAtIGV2ZW50c1tpbmRleF1bMV0uc3RhcnQub2Zmc2V0KSAlIDMgJiZcbiAgICAgICAgICAgICEoXG4gICAgICAgICAgICAgIChldmVudHNbb3Blbl1bMV0uZW5kLm9mZnNldCAtXG4gICAgICAgICAgICAgICAgZXZlbnRzW29wZW5dWzFdLnN0YXJ0Lm9mZnNldCArXG4gICAgICAgICAgICAgICAgZXZlbnRzW2luZGV4XVsxXS5lbmQub2Zmc2V0IC1cbiAgICAgICAgICAgICAgICBldmVudHNbaW5kZXhdWzFdLnN0YXJ0Lm9mZnNldCkgJVxuICAgICAgICAgICAgICAzXG4gICAgICAgICAgICApXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIE51bWJlciBvZiBtYXJrZXJzIHRvIHVzZSBmcm9tIHRoZSBzZXF1ZW5jZS5cbiAgICAgICAgICB1c2UgPVxuICAgICAgICAgICAgZXZlbnRzW29wZW5dWzFdLmVuZC5vZmZzZXQgLSBldmVudHNbb3Blbl1bMV0uc3RhcnQub2Zmc2V0ID4gMSAmJlxuICAgICAgICAgICAgZXZlbnRzW2luZGV4XVsxXS5lbmQub2Zmc2V0IC0gZXZlbnRzW2luZGV4XVsxXS5zdGFydC5vZmZzZXQgPiAxXG4gICAgICAgICAgICAgID8gMlxuICAgICAgICAgICAgICA6IDFcblxuICAgICAgICAgIGNvbnN0IHN0YXJ0ID0gey4uLmV2ZW50c1tvcGVuXVsxXS5lbmR9XG4gICAgICAgICAgY29uc3QgZW5kID0gey4uLmV2ZW50c1tpbmRleF1bMV0uc3RhcnR9XG4gICAgICAgICAgbW92ZVBvaW50KHN0YXJ0LCAtdXNlKVxuICAgICAgICAgIG1vdmVQb2ludChlbmQsIHVzZSlcblxuICAgICAgICAgIG9wZW5pbmdTZXF1ZW5jZSA9IHtcbiAgICAgICAgICAgIHR5cGU6IHVzZSA+IDEgPyB0eXBlcy5zdHJvbmdTZXF1ZW5jZSA6IHR5cGVzLmVtcGhhc2lzU2VxdWVuY2UsXG4gICAgICAgICAgICBzdGFydCxcbiAgICAgICAgICAgIGVuZDogey4uLmV2ZW50c1tvcGVuXVsxXS5lbmR9XG4gICAgICAgICAgfVxuICAgICAgICAgIGNsb3NpbmdTZXF1ZW5jZSA9IHtcbiAgICAgICAgICAgIHR5cGU6IHVzZSA+IDEgPyB0eXBlcy5zdHJvbmdTZXF1ZW5jZSA6IHR5cGVzLmVtcGhhc2lzU2VxdWVuY2UsXG4gICAgICAgICAgICBzdGFydDogey4uLmV2ZW50c1tpbmRleF1bMV0uc3RhcnR9LFxuICAgICAgICAgICAgZW5kXG4gICAgICAgICAgfVxuICAgICAgICAgIHRleHQgPSB7XG4gICAgICAgICAgICB0eXBlOiB1c2UgPiAxID8gdHlwZXMuc3Ryb25nVGV4dCA6IHR5cGVzLmVtcGhhc2lzVGV4dCxcbiAgICAgICAgICAgIHN0YXJ0OiB7Li4uZXZlbnRzW29wZW5dWzFdLmVuZH0sXG4gICAgICAgICAgICBlbmQ6IHsuLi5ldmVudHNbaW5kZXhdWzFdLnN0YXJ0fVxuICAgICAgICAgIH1cbiAgICAgICAgICBncm91cCA9IHtcbiAgICAgICAgICAgIHR5cGU6IHVzZSA+IDEgPyB0eXBlcy5zdHJvbmcgOiB0eXBlcy5lbXBoYXNpcyxcbiAgICAgICAgICAgIHN0YXJ0OiB7Li4ub3BlbmluZ1NlcXVlbmNlLnN0YXJ0fSxcbiAgICAgICAgICAgIGVuZDogey4uLmNsb3NpbmdTZXF1ZW5jZS5lbmR9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZXZlbnRzW29wZW5dWzFdLmVuZCA9IHsuLi5vcGVuaW5nU2VxdWVuY2Uuc3RhcnR9XG4gICAgICAgICAgZXZlbnRzW2luZGV4XVsxXS5zdGFydCA9IHsuLi5jbG9zaW5nU2VxdWVuY2UuZW5kfVxuXG4gICAgICAgICAgbmV4dEV2ZW50cyA9IFtdXG5cbiAgICAgICAgICAvLyBJZiB0aGVyZSBhcmUgbW9yZSBtYXJrZXJzIGluIHRoZSBvcGVuaW5nLCBhZGQgdGhlbSBiZWZvcmUuXG4gICAgICAgICAgaWYgKGV2ZW50c1tvcGVuXVsxXS5lbmQub2Zmc2V0IC0gZXZlbnRzW29wZW5dWzFdLnN0YXJ0Lm9mZnNldCkge1xuICAgICAgICAgICAgbmV4dEV2ZW50cyA9IHB1c2gobmV4dEV2ZW50cywgW1xuICAgICAgICAgICAgICBbJ2VudGVyJywgZXZlbnRzW29wZW5dWzFdLCBjb250ZXh0XSxcbiAgICAgICAgICAgICAgWydleGl0JywgZXZlbnRzW29wZW5dWzFdLCBjb250ZXh0XVxuICAgICAgICAgICAgXSlcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBPcGVuaW5nLlxuICAgICAgICAgIG5leHRFdmVudHMgPSBwdXNoKG5leHRFdmVudHMsIFtcbiAgICAgICAgICAgIFsnZW50ZXInLCBncm91cCwgY29udGV4dF0sXG4gICAgICAgICAgICBbJ2VudGVyJywgb3BlbmluZ1NlcXVlbmNlLCBjb250ZXh0XSxcbiAgICAgICAgICAgIFsnZXhpdCcsIG9wZW5pbmdTZXF1ZW5jZSwgY29udGV4dF0sXG4gICAgICAgICAgICBbJ2VudGVyJywgdGV4dCwgY29udGV4dF1cbiAgICAgICAgICBdKVxuXG4gICAgICAgICAgLy8gQWx3YXlzIHBvcHVsYXRlZCBieSBkZWZhdWx0cy5cbiAgICAgICAgICBhc3NlcnQoXG4gICAgICAgICAgICBjb250ZXh0LnBhcnNlci5jb25zdHJ1Y3RzLmluc2lkZVNwYW4ubnVsbCxcbiAgICAgICAgICAgICdleHBlY3RlZCBgaW5zaWRlU3BhbmAgdG8gYmUgcG9wdWxhdGVkJ1xuICAgICAgICAgIClcblxuICAgICAgICAgIC8vIEJldHdlZW4uXG4gICAgICAgICAgbmV4dEV2ZW50cyA9IHB1c2goXG4gICAgICAgICAgICBuZXh0RXZlbnRzLFxuICAgICAgICAgICAgcmVzb2x2ZUFsbChcbiAgICAgICAgICAgICAgY29udGV4dC5wYXJzZXIuY29uc3RydWN0cy5pbnNpZGVTcGFuLm51bGwsXG4gICAgICAgICAgICAgIGV2ZW50cy5zbGljZShvcGVuICsgMSwgaW5kZXgpLFxuICAgICAgICAgICAgICBjb250ZXh0XG4gICAgICAgICAgICApXG4gICAgICAgICAgKVxuXG4gICAgICAgICAgLy8gQ2xvc2luZy5cbiAgICAgICAgICBuZXh0RXZlbnRzID0gcHVzaChuZXh0RXZlbnRzLCBbXG4gICAgICAgICAgICBbJ2V4aXQnLCB0ZXh0LCBjb250ZXh0XSxcbiAgICAgICAgICAgIFsnZW50ZXInLCBjbG9zaW5nU2VxdWVuY2UsIGNvbnRleHRdLFxuICAgICAgICAgICAgWydleGl0JywgY2xvc2luZ1NlcXVlbmNlLCBjb250ZXh0XSxcbiAgICAgICAgICAgIFsnZXhpdCcsIGdyb3VwLCBjb250ZXh0XVxuICAgICAgICAgIF0pXG5cbiAgICAgICAgICAvLyBJZiB0aGVyZSBhcmUgbW9yZSBtYXJrZXJzIGluIHRoZSBjbG9zaW5nLCBhZGQgdGhlbSBhZnRlci5cbiAgICAgICAgICBpZiAoZXZlbnRzW2luZGV4XVsxXS5lbmQub2Zmc2V0IC0gZXZlbnRzW2luZGV4XVsxXS5zdGFydC5vZmZzZXQpIHtcbiAgICAgICAgICAgIG9mZnNldCA9IDJcbiAgICAgICAgICAgIG5leHRFdmVudHMgPSBwdXNoKG5leHRFdmVudHMsIFtcbiAgICAgICAgICAgICAgWydlbnRlcicsIGV2ZW50c1tpbmRleF1bMV0sIGNvbnRleHRdLFxuICAgICAgICAgICAgICBbJ2V4aXQnLCBldmVudHNbaW5kZXhdWzFdLCBjb250ZXh0XVxuICAgICAgICAgICAgXSlcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb2Zmc2V0ID0gMFxuICAgICAgICAgIH1cblxuICAgICAgICAgIHNwbGljZShldmVudHMsIG9wZW4gLSAxLCBpbmRleCAtIG9wZW4gKyAzLCBuZXh0RXZlbnRzKVxuXG4gICAgICAgICAgaW5kZXggPSBvcGVuICsgbmV4dEV2ZW50cy5sZW5ndGggLSBvZmZzZXQgLSAyXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIFJlbW92ZSByZW1haW5pbmcgc2VxdWVuY2VzLlxuICBpbmRleCA9IC0xXG5cbiAgd2hpbGUgKCsraW5kZXggPCBldmVudHMubGVuZ3RoKSB7XG4gICAgaWYgKGV2ZW50c1tpbmRleF1bMV0udHlwZSA9PT0gJ2F0dGVudGlvblNlcXVlbmNlJykge1xuICAgICAgZXZlbnRzW2luZGV4XVsxXS50eXBlID0gJ2RhdGEnXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGV2ZW50c1xufVxuXG4vKipcbiAqIEB0aGlzIHtUb2tlbml6ZUNvbnRleHR9XG4gKiAgIENvbnRleHQuXG4gKiBAdHlwZSB7VG9rZW5pemVyfVxuICovXG5mdW5jdGlvbiB0b2tlbml6ZUF0dGVudGlvbihlZmZlY3RzLCBvaykge1xuICBjb25zdCBhdHRlbnRpb25NYXJrZXJzID0gdGhpcy5wYXJzZXIuY29uc3RydWN0cy5hdHRlbnRpb25NYXJrZXJzLm51bGxcbiAgY29uc3QgcHJldmlvdXMgPSB0aGlzLnByZXZpb3VzXG4gIGNvbnN0IGJlZm9yZSA9IGNsYXNzaWZ5Q2hhcmFjdGVyKHByZXZpb3VzKVxuXG4gIC8qKiBAdHlwZSB7Tm9uTnVsbGFibGU8Q29kZT59ICovXG4gIGxldCBtYXJrZXJcblxuICByZXR1cm4gc3RhcnRcblxuICAvKipcbiAgICogQmVmb3JlIGEgc2VxdWVuY2UuXG4gICAqXG4gICAqIGBgYG1hcmtkb3duXG4gICAqID4gfCAqKlxuICAgKiAgICAgXlxuICAgKiBgYGBcbiAgICpcbiAgICogQHR5cGUge1N0YXRlfVxuICAgKi9cbiAgZnVuY3Rpb24gc3RhcnQoY29kZSkge1xuICAgIGFzc2VydChcbiAgICAgIGNvZGUgPT09IGNvZGVzLmFzdGVyaXNrIHx8IGNvZGUgPT09IGNvZGVzLnVuZGVyc2NvcmUsXG4gICAgICAnZXhwZWN0ZWQgYXN0ZXJpc2sgb3IgdW5kZXJzY29yZSdcbiAgICApXG4gICAgbWFya2VyID0gY29kZVxuICAgIGVmZmVjdHMuZW50ZXIoJ2F0dGVudGlvblNlcXVlbmNlJylcbiAgICByZXR1cm4gaW5zaWRlKGNvZGUpXG4gIH1cblxuICAvKipcbiAgICogSW4gYSBzZXF1ZW5jZS5cbiAgICpcbiAgICogYGBgbWFya2Rvd25cbiAgICogPiB8ICoqXG4gICAqICAgICBeXlxuICAgKiBgYGBcbiAgICpcbiAgICogQHR5cGUge1N0YXRlfVxuICAgKi9cbiAgZnVuY3Rpb24gaW5zaWRlKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gbWFya2VyKSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIHJldHVybiBpbnNpZGVcbiAgICB9XG5cbiAgICBjb25zdCB0b2tlbiA9IGVmZmVjdHMuZXhpdCgnYXR0ZW50aW9uU2VxdWVuY2UnKVxuXG4gICAgLy8gVG8gZG86IG5leHQgbWFqb3I6IG1vdmUgdGhpcyB0byByZXNvbHZlciwganVzdCBsaWtlIGBtYXJrZG93bi1yc2AuXG4gICAgY29uc3QgYWZ0ZXIgPSBjbGFzc2lmeUNoYXJhY3Rlcihjb2RlKVxuXG4gICAgLy8gQWx3YXlzIHBvcHVsYXRlZCBieSBkZWZhdWx0cy5cbiAgICBhc3NlcnQoYXR0ZW50aW9uTWFya2VycywgJ2V4cGVjdGVkIGBhdHRlbnRpb25NYXJrZXJzYCB0byBiZSBwb3B1bGF0ZWQnKVxuXG4gICAgY29uc3Qgb3BlbiA9XG4gICAgICAhYWZ0ZXIgfHxcbiAgICAgIChhZnRlciA9PT0gY29uc3RhbnRzLmNoYXJhY3Rlckdyb3VwUHVuY3R1YXRpb24gJiYgYmVmb3JlKSB8fFxuICAgICAgYXR0ZW50aW9uTWFya2Vycy5pbmNsdWRlcyhjb2RlKVxuICAgIGNvbnN0IGNsb3NlID1cbiAgICAgICFiZWZvcmUgfHxcbiAgICAgIChiZWZvcmUgPT09IGNvbnN0YW50cy5jaGFyYWN0ZXJHcm91cFB1bmN0dWF0aW9uICYmIGFmdGVyKSB8fFxuICAgICAgYXR0ZW50aW9uTWFya2Vycy5pbmNsdWRlcyhwcmV2aW91cylcblxuICAgIHRva2VuLl9vcGVuID0gQm9vbGVhbihcbiAgICAgIG1hcmtlciA9PT0gY29kZXMuYXN0ZXJpc2sgPyBvcGVuIDogb3BlbiAmJiAoYmVmb3JlIHx8ICFjbG9zZSlcbiAgICApXG4gICAgdG9rZW4uX2Nsb3NlID0gQm9vbGVhbihcbiAgICAgIG1hcmtlciA9PT0gY29kZXMuYXN0ZXJpc2sgPyBjbG9zZSA6IGNsb3NlICYmIChhZnRlciB8fCAhb3BlbilcbiAgICApXG4gICAgcmV0dXJuIG9rKGNvZGUpXG4gIH1cbn1cblxuLyoqXG4gKiBNb3ZlIGEgcG9pbnQgYSBiaXQuXG4gKlxuICogTm90ZTogYG1vdmVgIG9ubHkgd29ya3MgaW5zaWRlIGxpbmVzISBJdOKAmXMgbm90IHBvc3NpYmxlIHRvIG1vdmUgcGFzdCBvdGhlclxuICogY2h1bmtzIChyZXBsYWNlbWVudCBjaGFyYWN0ZXJzLCB0YWJzLCBvciBsaW5lIGVuZGluZ3MpLlxuICpcbiAqIEBwYXJhbSB7UG9pbnR9IHBvaW50XG4gKiAgIFBvaW50LlxuICogQHBhcmFtIHtudW1iZXJ9IG9mZnNldFxuICogICBBbW91bnQgdG8gbW92ZS5cbiAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gKiAgIE5vdGhpbmcuXG4gKi9cbmZ1bmN0aW9uIG1vdmVQb2ludChwb2ludCwgb2Zmc2V0KSB7XG4gIHBvaW50LmNvbHVtbiArPSBvZmZzZXRcbiAgcG9pbnQub2Zmc2V0ICs9IG9mZnNldFxuICBwb2ludC5fYnVmZmVySW5kZXggKz0gb2Zmc2V0XG59XG4iXSwibmFtZXMiOlsib2siLCJhc3NlcnQiLCJwdXNoIiwic3BsaWNlIiwiY2xhc3NpZnlDaGFyYWN0ZXIiLCJyZXNvbHZlQWxsIiwiY29kZXMiLCJjb25zdGFudHMiLCJ0eXBlcyIsImF0dGVudGlvbiIsIm5hbWUiLCJyZXNvbHZlQWxsQXR0ZW50aW9uIiwidG9rZW5pemUiLCJ0b2tlbml6ZUF0dGVudGlvbiIsImV2ZW50cyIsImNvbnRleHQiLCJpbmRleCIsIm9wZW4iLCJncm91cCIsInRleHQiLCJvcGVuaW5nU2VxdWVuY2UiLCJjbG9zaW5nU2VxdWVuY2UiLCJ1c2UiLCJuZXh0RXZlbnRzIiwib2Zmc2V0IiwibGVuZ3RoIiwidHlwZSIsIl9jbG9zZSIsIl9vcGVuIiwic2xpY2VTZXJpYWxpemUiLCJjaGFyQ29kZUF0IiwiZW5kIiwic3RhcnQiLCJtb3ZlUG9pbnQiLCJzdHJvbmdTZXF1ZW5jZSIsImVtcGhhc2lzU2VxdWVuY2UiLCJzdHJvbmdUZXh0IiwiZW1waGFzaXNUZXh0Iiwic3Ryb25nIiwiZW1waGFzaXMiLCJwYXJzZXIiLCJjb25zdHJ1Y3RzIiwiaW5zaWRlU3BhbiIsIm51bGwiLCJzbGljZSIsImVmZmVjdHMiLCJhdHRlbnRpb25NYXJrZXJzIiwicHJldmlvdXMiLCJiZWZvcmUiLCJtYXJrZXIiLCJjb2RlIiwiYXN0ZXJpc2siLCJ1bmRlcnNjb3JlIiwiZW50ZXIiLCJpbnNpZGUiLCJjb25zdW1lIiwidG9rZW4iLCJleGl0IiwiYWZ0ZXIiLCJjaGFyYWN0ZXJHcm91cFB1bmN0dWF0aW9uIiwiaW5jbHVkZXMiLCJjbG9zZSIsIkJvb2xlYW4iLCJwb2ludCIsImNvbHVtbiIsIl9idWZmZXJJbmRleCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/attention.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/autolink.js":
/*!***************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/autolink.js ***!
  \***************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   autolink: () => (/* binding */ autolink)\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! devlop */ \"(rsc)/../../node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js\");\n/* harmony import */ var micromark_util_character__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! micromark-util-character */ \"(rsc)/../../node_modules/.pnpm/micromark-util-character@2.1.1/node_modules/micromark-util-character/dev/index.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! micromark-util-symbol */ \"(rsc)/../../node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/codes.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! micromark-util-symbol */ \"(rsc)/../../node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/types.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! micromark-util-symbol */ \"(rsc)/../../node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/constants.js\");\n/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */ \n\n\n/** @type {Construct} */ const autolink = {\n    name: \"autolink\",\n    tokenize: tokenizeAutolink\n};\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */ function tokenizeAutolink(effects, ok, nok) {\n    let size = 0;\n    return start;\n    /**\n   * Start of an autolink.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *      ^\n   * > | a<user@example.com>b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */ function start(code) {\n        (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.lessThan, \"expected `<`\");\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.autolink);\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.autolinkMarker);\n        effects.consume(code);\n        effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.autolinkMarker);\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.autolinkProtocol);\n        return open;\n    }\n    /**\n   * After `<`, at protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *       ^\n   * > | a<user@example.com>b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */ function open(code) {\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.asciiAlpha)(code)) {\n            effects.consume(code);\n            return schemeOrEmailAtext;\n        }\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.atSign) {\n            return nok(code);\n        }\n        return emailAtext(code);\n    }\n    /**\n   * At second byte of protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */ function schemeOrEmailAtext(code) {\n        // ASCII alphanumeric and `+`, `-`, and `.`.\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.plusSign || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.dash || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.dot || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.asciiAlphanumeric)(code)) {\n            // Count the previous alphabetical from `open` too.\n            size = 1;\n            return schemeInsideOrEmailAtext(code);\n        }\n        return emailAtext(code);\n    }\n    /**\n   * In ambiguous protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */ function schemeInsideOrEmailAtext(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.colon) {\n            effects.consume(code);\n            size = 0;\n            return urlInside;\n        }\n        // ASCII alphanumeric and `+`, `-`, and `.`.\n        if ((code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.plusSign || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.dash || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.dot || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.asciiAlphanumeric)(code)) && size++ < micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__.constants.autolinkSchemeSizeMax) {\n            effects.consume(code);\n            return schemeInsideOrEmailAtext;\n        }\n        size = 0;\n        return emailAtext(code);\n    }\n    /**\n   * After protocol, in URL.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */ function urlInside(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.greaterThan) {\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.autolinkProtocol);\n            effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.autolinkMarker);\n            effects.consume(code);\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.autolinkMarker);\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.autolink);\n            return ok;\n        }\n        // ASCII control, space, or `<`.\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.space || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.lessThan || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.asciiControl)(code)) {\n            return nok(code);\n        }\n        effects.consume(code);\n        return urlInside;\n    }\n    /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */ function emailAtext(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.atSign) {\n            effects.consume(code);\n            return emailAtSignOrDot;\n        }\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.asciiAtext)(code)) {\n            effects.consume(code);\n            return emailAtext;\n        }\n        return nok(code);\n    }\n    /**\n   * In label, after at-sign or dot.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                 ^       ^\n   * ```\n   *\n   * @type {State}\n   */ function emailAtSignOrDot(code) {\n        return (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.asciiAlphanumeric)(code) ? emailLabel(code) : nok(code);\n    }\n    /**\n   * In label, where `.` and `>` are allowed.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */ function emailLabel(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.dot) {\n            effects.consume(code);\n            size = 0;\n            return emailAtSignOrDot;\n        }\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.greaterThan) {\n            // Exit, then change the token type.\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.autolinkProtocol).type = micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.autolinkEmail;\n            effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.autolinkMarker);\n            effects.consume(code);\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.autolinkMarker);\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.autolink);\n            return ok;\n        }\n        return emailValue(code);\n    }\n    /**\n   * In label, where `.` and `>` are *not* allowed.\n   *\n   * Though, this is also used in `emailLabel` to parse other values.\n   *\n   * ```markdown\n   * > | a<user.name@ex-ample.com>b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */ function emailValue(code) {\n        // ASCII alphanumeric or `-`.\n        if ((code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.dash || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.asciiAlphanumeric)(code)) && size++ < micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__.constants.autolinkDomainSizeMax) {\n            const next = code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.dash ? emailValue : emailLabel;\n            effects.consume(code);\n            return next;\n        }\n        return nok(code);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/autolink.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/blank-line.js":
/*!*****************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/blank-line.js ***!
  \*****************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   blankLine: () => (/* binding */ blankLine)\n/* harmony export */ });\n/* harmony import */ var micromark_factory_space__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! micromark-factory-space */ \"(rsc)/../../node_modules/.pnpm/micromark-factory-space@2.0.1/node_modules/micromark-factory-space/dev/index.js\");\n/* harmony import */ var micromark_util_character__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! micromark-util-character */ \"(rsc)/../../node_modules/.pnpm/micromark-util-character@2.1.1/node_modules/micromark-util-character/dev/index.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! micromark-util-symbol */ \"(rsc)/../../node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/types.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! micromark-util-symbol */ \"(rsc)/../../node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/codes.js\");\n/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */ \n\n\n/** @type {Construct} */ const blankLine = {\n    partial: true,\n    tokenize: tokenizeBlankLine\n};\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */ function tokenizeBlankLine(effects, ok, nok) {\n    return start;\n    /**\n   * Start of blank line.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *     ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */ function start(code) {\n        return (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_0__.markdownSpace)(code) ? (0,micromark_factory_space__WEBPACK_IMPORTED_MODULE_1__.factorySpace)(effects, after, micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.linePrefix)(code) : after(code);\n    }\n    /**\n   * At eof/eol, after optional whitespace.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *       ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */ function after(code) {\n        return code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.codes.eof || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_0__.markdownLineEnding)(code) ? ok(code) : nok(code);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21pY3JvbWFyay1jb3JlLWNvbW1vbm1hcmtAMi4wLjMvbm9kZV9tb2R1bGVzL21pY3JvbWFyay1jb3JlLWNvbW1vbm1hcmsvZGV2L2xpYi9ibGFuay1saW5lLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7Ozs7Ozs7Q0FPQyxHQUVtRDtBQUNzQjtBQUN4QjtBQUVsRCxzQkFBc0IsR0FDZixNQUFNSyxZQUFZO0lBQUNDLFNBQVM7SUFBTUMsVUFBVUM7QUFBaUIsRUFBQztBQUVyRTs7OztDQUlDLEdBQ0QsU0FBU0Esa0JBQWtCQyxPQUFPLEVBQUVDLEVBQUUsRUFBRUMsR0FBRztJQUN6QyxPQUFPQztJQUVQOzs7Ozs7Ozs7Ozs7O0dBYUMsR0FDRCxTQUFTQSxNQUFNQyxJQUFJO1FBQ2pCLE9BQU9YLHVFQUFhQSxDQUFDVyxRQUNqQmIscUVBQVlBLENBQUNTLFNBQVNLLE9BQU9WLHdEQUFLQSxDQUFDVyxVQUFVLEVBQUVGLFFBQy9DQyxNQUFNRDtJQUNaO0lBRUE7Ozs7Ozs7Ozs7Ozs7R0FhQyxHQUNELFNBQVNDLE1BQU1ELElBQUk7UUFDakIsT0FBT0EsU0FBU1Ysd0RBQUtBLENBQUNhLEdBQUcsSUFBSWYsNEVBQWtCQSxDQUFDWSxRQUFRSCxHQUFHRyxRQUFRRixJQUFJRTtJQUN6RTtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2ViLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9taWNyb21hcmstY29yZS1jb21tb25tYXJrQDIuMC4zL25vZGVfbW9kdWxlcy9taWNyb21hcmstY29yZS1jb21tb25tYXJrL2Rldi9saWIvYmxhbmstbGluZS5qcz9kZDQzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGltcG9ydCB7XG4gKiAgIENvbnN0cnVjdCxcbiAqICAgU3RhdGUsXG4gKiAgIFRva2VuaXplQ29udGV4dCxcbiAqICAgVG9rZW5pemVyXG4gKiB9IGZyb20gJ21pY3JvbWFyay11dGlsLXR5cGVzJ1xuICovXG5cbmltcG9ydCB7ZmFjdG9yeVNwYWNlfSBmcm9tICdtaWNyb21hcmstZmFjdG9yeS1zcGFjZSdcbmltcG9ydCB7bWFya2Rvd25MaW5lRW5kaW5nLCBtYXJrZG93blNwYWNlfSBmcm9tICdtaWNyb21hcmstdXRpbC1jaGFyYWN0ZXInXG5pbXBvcnQge2NvZGVzLCB0eXBlc30gZnJvbSAnbWljcm9tYXJrLXV0aWwtc3ltYm9sJ1xuXG4vKiogQHR5cGUge0NvbnN0cnVjdH0gKi9cbmV4cG9ydCBjb25zdCBibGFua0xpbmUgPSB7cGFydGlhbDogdHJ1ZSwgdG9rZW5pemU6IHRva2VuaXplQmxhbmtMaW5lfVxuXG4vKipcbiAqIEB0aGlzIHtUb2tlbml6ZUNvbnRleHR9XG4gKiAgIENvbnRleHQuXG4gKiBAdHlwZSB7VG9rZW5pemVyfVxuICovXG5mdW5jdGlvbiB0b2tlbml6ZUJsYW5rTGluZShlZmZlY3RzLCBvaywgbm9rKSB7XG4gIHJldHVybiBzdGFydFxuXG4gIC8qKlxuICAgKiBTdGFydCBvZiBibGFuayBsaW5lLlxuICAgKlxuICAgKiA+IPCfkYkgKipOb3RlKio6IGDikKBgIHJlcHJlc2VudHMgYSBzcGFjZSBjaGFyYWN0ZXIuXG4gICAqXG4gICAqIGBgYG1hcmtkb3duXG4gICAqID4gfCDikKDikKDikIpcbiAgICogICAgIF5cbiAgICogPiB8IOKQilxuICAgKiAgICAgXlxuICAgKiBgYGBcbiAgICpcbiAgICogQHR5cGUge1N0YXRlfVxuICAgKi9cbiAgZnVuY3Rpb24gc3RhcnQoY29kZSkge1xuICAgIHJldHVybiBtYXJrZG93blNwYWNlKGNvZGUpXG4gICAgICA/IGZhY3RvcnlTcGFjZShlZmZlY3RzLCBhZnRlciwgdHlwZXMubGluZVByZWZpeCkoY29kZSlcbiAgICAgIDogYWZ0ZXIoY29kZSlcbiAgfVxuXG4gIC8qKlxuICAgKiBBdCBlb2YvZW9sLCBhZnRlciBvcHRpb25hbCB3aGl0ZXNwYWNlLlxuICAgKlxuICAgKiA+IPCfkYkgKipOb3RlKio6IGDikKBgIHJlcHJlc2VudHMgYSBzcGFjZSBjaGFyYWN0ZXIuXG4gICAqXG4gICAqIGBgYG1hcmtkb3duXG4gICAqID4gfCDikKDikKDikIpcbiAgICogICAgICAgXlxuICAgKiA+IHwg4pCKXG4gICAqICAgICBeXG4gICAqIGBgYFxuICAgKlxuICAgKiBAdHlwZSB7U3RhdGV9XG4gICAqL1xuICBmdW5jdGlvbiBhZnRlcihjb2RlKSB7XG4gICAgcmV0dXJuIGNvZGUgPT09IGNvZGVzLmVvZiB8fCBtYXJrZG93bkxpbmVFbmRpbmcoY29kZSkgPyBvayhjb2RlKSA6IG5vayhjb2RlKVxuICB9XG59XG4iXSwibmFtZXMiOlsiZmFjdG9yeVNwYWNlIiwibWFya2Rvd25MaW5lRW5kaW5nIiwibWFya2Rvd25TcGFjZSIsImNvZGVzIiwidHlwZXMiLCJibGFua0xpbmUiLCJwYXJ0aWFsIiwidG9rZW5pemUiLCJ0b2tlbml6ZUJsYW5rTGluZSIsImVmZmVjdHMiLCJvayIsIm5vayIsInN0YXJ0IiwiY29kZSIsImFmdGVyIiwibGluZVByZWZpeCIsImVvZiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/blank-line.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/block-quote.js":
/*!******************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/block-quote.js ***!
  \******************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   blockQuote: () => (/* binding */ blockQuote)\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! devlop */ \"(rsc)/../../node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js\");\n/* harmony import */ var micromark_factory_space__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! micromark-factory-space */ \"(rsc)/../../node_modules/.pnpm/micromark-factory-space@2.0.1/node_modules/micromark-factory-space/dev/index.js\");\n/* harmony import */ var micromark_util_character__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! micromark-util-character */ \"(rsc)/../../node_modules/.pnpm/micromark-util-character@2.1.1/node_modules/micromark-util-character/dev/index.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! micromark-util-symbol */ \"(rsc)/../../node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/codes.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! micromark-util-symbol */ \"(rsc)/../../node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/types.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! micromark-util-symbol */ \"(rsc)/../../node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/constants.js\");\n/**\n * @import {\n *   Construct,\n *   Exiter,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */ \n\n\n\n/** @type {Construct} */ const blockQuote = {\n    continuation: {\n        tokenize: tokenizeBlockQuoteContinuation\n    },\n    exit,\n    name: \"blockQuote\",\n    tokenize: tokenizeBlockQuoteStart\n};\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */ function tokenizeBlockQuoteStart(effects, ok, nok) {\n    const self = this;\n    return start;\n    /**\n   * Start of block quote.\n   *\n   * ```markdown\n   * > | > a\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */ function start(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.greaterThan) {\n            const state = self.containerState;\n            (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(state, \"expected `containerState` to be defined in container\");\n            if (!state.open) {\n                effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.blockQuote, {\n                    _container: true\n                });\n                state.open = true;\n            }\n            effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.blockQuotePrefix);\n            effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.blockQuoteMarker);\n            effects.consume(code);\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.blockQuoteMarker);\n            return after;\n        }\n        return nok(code);\n    }\n    /**\n   * After `>`, before optional whitespace.\n   *\n   * ```markdown\n   * > | > a\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */ function after(code) {\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownSpace)(code)) {\n            effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.blockQuotePrefixWhitespace);\n            effects.consume(code);\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.blockQuotePrefixWhitespace);\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.blockQuotePrefix);\n            return ok;\n        }\n        effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.blockQuotePrefix);\n        return ok(code);\n    }\n}\n/**\n * Start of block quote continuation.\n *\n * ```markdown\n *   | > a\n * > | > b\n *     ^\n * ```\n *\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */ function tokenizeBlockQuoteContinuation(effects, ok, nok) {\n    const self = this;\n    return contStart;\n    /**\n   * Start of block quote continuation.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */ function contStart(code) {\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownSpace)(code)) {\n            // Always populated by defaults.\n            (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(self.parser.constructs.disable.null, \"expected `disable.null` to be populated\");\n            return (0,micromark_factory_space__WEBPACK_IMPORTED_MODULE_4__.factorySpace)(effects, contBefore, micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.linePrefix, self.parser.constructs.disable.null.includes(\"codeIndented\") ? undefined : micromark_util_symbol__WEBPACK_IMPORTED_MODULE_5__.constants.tabSize)(code);\n        }\n        return contBefore(code);\n    }\n    /**\n   * At `>`, after optional whitespace.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */ function contBefore(code) {\n        return effects.attempt(blockQuote, ok, nok)(code);\n    }\n}\n/** @type {Exiter} */ function exit(effects) {\n    effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.blockQuote);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21pY3JvbWFyay1jb3JlLWNvbW1vbm1hcmtAMi4wLjMvbm9kZV9tb2R1bGVzL21pY3JvbWFyay1jb3JlLWNvbW1vbm1hcmsvZGV2L2xpYi9ibG9jay1xdW90ZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7Ozs7Ozs7O0NBUUMsR0FFa0M7QUFDaUI7QUFDRTtBQUNPO0FBRTdELHNCQUFzQixHQUNmLE1BQU1PLGFBQWE7SUFDeEJDLGNBQWM7UUFBQ0MsVUFBVUM7SUFBOEI7SUFDdkRDO0lBQ0FDLE1BQU07SUFDTkgsVUFBVUk7QUFDWixFQUFDO0FBRUQ7Ozs7Q0FJQyxHQUNELFNBQVNBLHdCQUF3QkMsT0FBTyxFQUFFZCxFQUFFLEVBQUVlLEdBQUc7SUFDL0MsTUFBTUMsT0FBTyxJQUFJO0lBRWpCLE9BQU9DO0lBRVA7Ozs7Ozs7OztHQVNDLEdBQ0QsU0FBU0EsTUFBTUMsSUFBSTtRQUNqQixJQUFJQSxTQUFTZCx3REFBS0EsQ0FBQ2UsV0FBVyxFQUFFO1lBQzlCLE1BQU1DLFFBQVFKLEtBQUtLLGNBQWM7WUFFakNwQiwwQ0FBTUEsQ0FBQ21CLE9BQU87WUFFZCxJQUFJLENBQUNBLE1BQU1FLElBQUksRUFBRTtnQkFDZlIsUUFBUVMsS0FBSyxDQUFDakIsd0RBQUtBLENBQUNDLFVBQVUsRUFBRTtvQkFBQ2lCLFlBQVk7Z0JBQUk7Z0JBQ2pESixNQUFNRSxJQUFJLEdBQUc7WUFDZjtZQUVBUixRQUFRUyxLQUFLLENBQUNqQix3REFBS0EsQ0FBQ21CLGdCQUFnQjtZQUNwQ1gsUUFBUVMsS0FBSyxDQUFDakIsd0RBQUtBLENBQUNvQixnQkFBZ0I7WUFDcENaLFFBQVFhLE9BQU8sQ0FBQ1Q7WUFDaEJKLFFBQVFILElBQUksQ0FBQ0wsd0RBQUtBLENBQUNvQixnQkFBZ0I7WUFDbkMsT0FBT0U7UUFDVDtRQUVBLE9BQU9iLElBQUlHO0lBQ2I7SUFFQTs7Ozs7Ozs7O0dBU0MsR0FDRCxTQUFTVSxNQUFNVixJQUFJO1FBQ2pCLElBQUlmLHVFQUFhQSxDQUFDZSxPQUFPO1lBQ3ZCSixRQUFRUyxLQUFLLENBQUNqQix3REFBS0EsQ0FBQ3VCLDBCQUEwQjtZQUM5Q2YsUUFBUWEsT0FBTyxDQUFDVDtZQUNoQkosUUFBUUgsSUFBSSxDQUFDTCx3REFBS0EsQ0FBQ3VCLDBCQUEwQjtZQUM3Q2YsUUFBUUgsSUFBSSxDQUFDTCx3REFBS0EsQ0FBQ21CLGdCQUFnQjtZQUNuQyxPQUFPekI7UUFDVDtRQUVBYyxRQUFRSCxJQUFJLENBQUNMLHdEQUFLQSxDQUFDbUIsZ0JBQWdCO1FBQ25DLE9BQU96QixHQUFHa0I7SUFDWjtBQUNGO0FBRUE7Ozs7Ozs7Ozs7OztDQVlDLEdBQ0QsU0FBU1IsK0JBQStCSSxPQUFPLEVBQUVkLEVBQUUsRUFBRWUsR0FBRztJQUN0RCxNQUFNQyxPQUFPLElBQUk7SUFFakIsT0FBT2M7SUFFUDs7Ozs7Ozs7Ozs7O0dBWUMsR0FDRCxTQUFTQSxVQUFVWixJQUFJO1FBQ3JCLElBQUlmLHVFQUFhQSxDQUFDZSxPQUFPO1lBQ3ZCLGdDQUFnQztZQUNoQ2pCLDBDQUFNQSxDQUNKZSxLQUFLZSxNQUFNLENBQUNDLFVBQVUsQ0FBQ0MsT0FBTyxDQUFDQyxJQUFJLEVBQ25DO1lBR0YsT0FBT2hDLHFFQUFZQSxDQUNqQlksU0FDQXFCLFlBQ0E3Qix3REFBS0EsQ0FBQzhCLFVBQVUsRUFDaEJwQixLQUFLZSxNQUFNLENBQUNDLFVBQVUsQ0FBQ0MsT0FBTyxDQUFDQyxJQUFJLENBQUNHLFFBQVEsQ0FBQyxrQkFDekNDLFlBQ0FqQyw0REFBU0EsQ0FBQ2tDLE9BQU8sRUFDckJyQjtRQUNKO1FBRUEsT0FBT2lCLFdBQVdqQjtJQUNwQjtJQUVBOzs7Ozs7Ozs7Ozs7R0FZQyxHQUNELFNBQVNpQixXQUFXakIsSUFBSTtRQUN0QixPQUFPSixRQUFRMEIsT0FBTyxDQUFDakMsWUFBWVAsSUFBSWUsS0FBS0c7SUFDOUM7QUFDRjtBQUVBLG1CQUFtQixHQUNuQixTQUFTUCxLQUFLRyxPQUFPO0lBQ25CQSxRQUFRSCxJQUFJLENBQUNMLHdEQUFLQSxDQUFDQyxVQUFVO0FBQy9CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2ViLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9taWNyb21hcmstY29yZS1jb21tb25tYXJrQDIuMC4zL25vZGVfbW9kdWxlcy9taWNyb21hcmstY29yZS1jb21tb25tYXJrL2Rldi9saWIvYmxvY2stcXVvdGUuanM/Y2ZjMiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBpbXBvcnQge1xuICogICBDb25zdHJ1Y3QsXG4gKiAgIEV4aXRlcixcbiAqICAgU3RhdGUsXG4gKiAgIFRva2VuaXplQ29udGV4dCxcbiAqICAgVG9rZW5pemVyXG4gKiB9IGZyb20gJ21pY3JvbWFyay11dGlsLXR5cGVzJ1xuICovXG5cbmltcG9ydCB7b2sgYXMgYXNzZXJ0fSBmcm9tICdkZXZsb3AnXG5pbXBvcnQge2ZhY3RvcnlTcGFjZX0gZnJvbSAnbWljcm9tYXJrLWZhY3Rvcnktc3BhY2UnXG5pbXBvcnQge21hcmtkb3duU3BhY2V9IGZyb20gJ21pY3JvbWFyay11dGlsLWNoYXJhY3RlcidcbmltcG9ydCB7Y29kZXMsIGNvbnN0YW50cywgdHlwZXN9IGZyb20gJ21pY3JvbWFyay11dGlsLXN5bWJvbCdcblxuLyoqIEB0eXBlIHtDb25zdHJ1Y3R9ICovXG5leHBvcnQgY29uc3QgYmxvY2tRdW90ZSA9IHtcbiAgY29udGludWF0aW9uOiB7dG9rZW5pemU6IHRva2VuaXplQmxvY2tRdW90ZUNvbnRpbnVhdGlvbn0sXG4gIGV4aXQsXG4gIG5hbWU6ICdibG9ja1F1b3RlJyxcbiAgdG9rZW5pemU6IHRva2VuaXplQmxvY2tRdW90ZVN0YXJ0XG59XG5cbi8qKlxuICogQHRoaXMge1Rva2VuaXplQ29udGV4dH1cbiAqICAgQ29udGV4dC5cbiAqIEB0eXBlIHtUb2tlbml6ZXJ9XG4gKi9cbmZ1bmN0aW9uIHRva2VuaXplQmxvY2tRdW90ZVN0YXJ0KGVmZmVjdHMsIG9rLCBub2spIHtcbiAgY29uc3Qgc2VsZiA9IHRoaXNcblxuICByZXR1cm4gc3RhcnRcblxuICAvKipcbiAgICogU3RhcnQgb2YgYmxvY2sgcXVvdGUuXG4gICAqXG4gICAqIGBgYG1hcmtkb3duXG4gICAqID4gfCA+IGFcbiAgICogICAgIF5cbiAgICogYGBgXG4gICAqXG4gICAqIEB0eXBlIHtTdGF0ZX1cbiAgICovXG4gIGZ1bmN0aW9uIHN0YXJ0KGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gY29kZXMuZ3JlYXRlclRoYW4pIHtcbiAgICAgIGNvbnN0IHN0YXRlID0gc2VsZi5jb250YWluZXJTdGF0ZVxuXG4gICAgICBhc3NlcnQoc3RhdGUsICdleHBlY3RlZCBgY29udGFpbmVyU3RhdGVgIHRvIGJlIGRlZmluZWQgaW4gY29udGFpbmVyJylcblxuICAgICAgaWYgKCFzdGF0ZS5vcGVuKSB7XG4gICAgICAgIGVmZmVjdHMuZW50ZXIodHlwZXMuYmxvY2tRdW90ZSwge19jb250YWluZXI6IHRydWV9KVxuICAgICAgICBzdGF0ZS5vcGVuID0gdHJ1ZVxuICAgICAgfVxuXG4gICAgICBlZmZlY3RzLmVudGVyKHR5cGVzLmJsb2NrUXVvdGVQcmVmaXgpXG4gICAgICBlZmZlY3RzLmVudGVyKHR5cGVzLmJsb2NrUXVvdGVNYXJrZXIpXG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIGVmZmVjdHMuZXhpdCh0eXBlcy5ibG9ja1F1b3RlTWFya2VyKVxuICAgICAgcmV0dXJuIGFmdGVyXG4gICAgfVxuXG4gICAgcmV0dXJuIG5vayhjb2RlKVxuICB9XG5cbiAgLyoqXG4gICAqIEFmdGVyIGA+YCwgYmVmb3JlIG9wdGlvbmFsIHdoaXRlc3BhY2UuXG4gICAqXG4gICAqIGBgYG1hcmtkb3duXG4gICAqID4gfCA+IGFcbiAgICogICAgICBeXG4gICAqIGBgYFxuICAgKlxuICAgKiBAdHlwZSB7U3RhdGV9XG4gICAqL1xuICBmdW5jdGlvbiBhZnRlcihjb2RlKSB7XG4gICAgaWYgKG1hcmtkb3duU3BhY2UoY29kZSkpIHtcbiAgICAgIGVmZmVjdHMuZW50ZXIodHlwZXMuYmxvY2tRdW90ZVByZWZpeFdoaXRlc3BhY2UpXG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIGVmZmVjdHMuZXhpdCh0eXBlcy5ibG9ja1F1b3RlUHJlZml4V2hpdGVzcGFjZSlcbiAgICAgIGVmZmVjdHMuZXhpdCh0eXBlcy5ibG9ja1F1b3RlUHJlZml4KVxuICAgICAgcmV0dXJuIG9rXG4gICAgfVxuXG4gICAgZWZmZWN0cy5leGl0KHR5cGVzLmJsb2NrUXVvdGVQcmVmaXgpXG4gICAgcmV0dXJuIG9rKGNvZGUpXG4gIH1cbn1cblxuLyoqXG4gKiBTdGFydCBvZiBibG9jayBxdW90ZSBjb250aW51YXRpb24uXG4gKlxuICogYGBgbWFya2Rvd25cbiAqICAgfCA+IGFcbiAqID4gfCA+IGJcbiAqICAgICBeXG4gKiBgYGBcbiAqXG4gKiBAdGhpcyB7VG9rZW5pemVDb250ZXh0fVxuICogICBDb250ZXh0LlxuICogQHR5cGUge1Rva2VuaXplcn1cbiAqL1xuZnVuY3Rpb24gdG9rZW5pemVCbG9ja1F1b3RlQ29udGludWF0aW9uKGVmZmVjdHMsIG9rLCBub2spIHtcbiAgY29uc3Qgc2VsZiA9IHRoaXNcblxuICByZXR1cm4gY29udFN0YXJ0XG5cbiAgLyoqXG4gICAqIFN0YXJ0IG9mIGJsb2NrIHF1b3RlIGNvbnRpbnVhdGlvbi5cbiAgICpcbiAgICogQWxzbyB1c2VkIHRvIHBhcnNlIHRoZSBmaXJzdCBibG9jayBxdW90ZSBvcGVuaW5nLlxuICAgKlxuICAgKiBgYGBtYXJrZG93blxuICAgKiAgIHwgPiBhXG4gICAqID4gfCA+IGJcbiAgICogICAgIF5cbiAgICogYGBgXG4gICAqXG4gICAqIEB0eXBlIHtTdGF0ZX1cbiAgICovXG4gIGZ1bmN0aW9uIGNvbnRTdGFydChjb2RlKSB7XG4gICAgaWYgKG1hcmtkb3duU3BhY2UoY29kZSkpIHtcbiAgICAgIC8vIEFsd2F5cyBwb3B1bGF0ZWQgYnkgZGVmYXVsdHMuXG4gICAgICBhc3NlcnQoXG4gICAgICAgIHNlbGYucGFyc2VyLmNvbnN0cnVjdHMuZGlzYWJsZS5udWxsLFxuICAgICAgICAnZXhwZWN0ZWQgYGRpc2FibGUubnVsbGAgdG8gYmUgcG9wdWxhdGVkJ1xuICAgICAgKVxuXG4gICAgICByZXR1cm4gZmFjdG9yeVNwYWNlKFxuICAgICAgICBlZmZlY3RzLFxuICAgICAgICBjb250QmVmb3JlLFxuICAgICAgICB0eXBlcy5saW5lUHJlZml4LFxuICAgICAgICBzZWxmLnBhcnNlci5jb25zdHJ1Y3RzLmRpc2FibGUubnVsbC5pbmNsdWRlcygnY29kZUluZGVudGVkJylcbiAgICAgICAgICA/IHVuZGVmaW5lZFxuICAgICAgICAgIDogY29uc3RhbnRzLnRhYlNpemVcbiAgICAgICkoY29kZSlcbiAgICB9XG5cbiAgICByZXR1cm4gY29udEJlZm9yZShjb2RlKVxuICB9XG5cbiAgLyoqXG4gICAqIEF0IGA+YCwgYWZ0ZXIgb3B0aW9uYWwgd2hpdGVzcGFjZS5cbiAgICpcbiAgICogQWxzbyB1c2VkIHRvIHBhcnNlIHRoZSBmaXJzdCBibG9jayBxdW90ZSBvcGVuaW5nLlxuICAgKlxuICAgKiBgYGBtYXJrZG93blxuICAgKiAgIHwgPiBhXG4gICAqID4gfCA+IGJcbiAgICogICAgIF5cbiAgICogYGBgXG4gICAqXG4gICAqIEB0eXBlIHtTdGF0ZX1cbiAgICovXG4gIGZ1bmN0aW9uIGNvbnRCZWZvcmUoY29kZSkge1xuICAgIHJldHVybiBlZmZlY3RzLmF0dGVtcHQoYmxvY2tRdW90ZSwgb2ssIG5vaykoY29kZSlcbiAgfVxufVxuXG4vKiogQHR5cGUge0V4aXRlcn0gKi9cbmZ1bmN0aW9uIGV4aXQoZWZmZWN0cykge1xuICBlZmZlY3RzLmV4aXQodHlwZXMuYmxvY2tRdW90ZSlcbn1cbiJdLCJuYW1lcyI6WyJvayIsImFzc2VydCIsImZhY3RvcnlTcGFjZSIsIm1hcmtkb3duU3BhY2UiLCJjb2RlcyIsImNvbnN0YW50cyIsInR5cGVzIiwiYmxvY2tRdW90ZSIsImNvbnRpbnVhdGlvbiIsInRva2VuaXplIiwidG9rZW5pemVCbG9ja1F1b3RlQ29udGludWF0aW9uIiwiZXhpdCIsIm5hbWUiLCJ0b2tlbml6ZUJsb2NrUXVvdGVTdGFydCIsImVmZmVjdHMiLCJub2siLCJzZWxmIiwic3RhcnQiLCJjb2RlIiwiZ3JlYXRlclRoYW4iLCJzdGF0ZSIsImNvbnRhaW5lclN0YXRlIiwib3BlbiIsImVudGVyIiwiX2NvbnRhaW5lciIsImJsb2NrUXVvdGVQcmVmaXgiLCJibG9ja1F1b3RlTWFya2VyIiwiY29uc3VtZSIsImFmdGVyIiwiYmxvY2tRdW90ZVByZWZpeFdoaXRlc3BhY2UiLCJjb250U3RhcnQiLCJwYXJzZXIiLCJjb25zdHJ1Y3RzIiwiZGlzYWJsZSIsIm51bGwiLCJjb250QmVmb3JlIiwibGluZVByZWZpeCIsImluY2x1ZGVzIiwidW5kZWZpbmVkIiwidGFiU2l6ZSIsImF0dGVtcHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/block-quote.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/character-escape.js":
/*!***********************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/character-escape.js ***!
  \***********************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   characterEscape: () => (/* binding */ characterEscape)\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! devlop */ \"(rsc)/../../node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js\");\n/* harmony import */ var micromark_util_character__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! micromark-util-character */ \"(rsc)/../../node_modules/.pnpm/micromark-util-character@2.1.1/node_modules/micromark-util-character/dev/index.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! micromark-util-symbol */ \"(rsc)/../../node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/codes.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! micromark-util-symbol */ \"(rsc)/../../node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/types.js\");\n/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */ \n\n\n/** @type {Construct} */ const characterEscape = {\n    name: \"characterEscape\",\n    tokenize: tokenizeCharacterEscape\n};\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */ function tokenizeCharacterEscape(effects, ok, nok) {\n    return start;\n    /**\n   * Start of character escape.\n   *\n   * ```markdown\n   * > | a\\*b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */ function start(code) {\n        (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.backslash, \"expected `\\\\`\");\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.characterEscape);\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.escapeMarker);\n        effects.consume(code);\n        effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.escapeMarker);\n        return inside;\n    }\n    /**\n   * After `\\`, at punctuation.\n   *\n   * ```markdown\n   * > | a\\*b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */ function inside(code) {\n        // ASCII punctuation.\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.asciiPunctuation)(code)) {\n            effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.characterEscapeValue);\n            effects.consume(code);\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.characterEscapeValue);\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.characterEscape);\n            return ok;\n        }\n        return nok(code);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21pY3JvbWFyay1jb3JlLWNvbW1vbm1hcmtAMi4wLjMvbm9kZV9tb2R1bGVzL21pY3JvbWFyay1jb3JlLWNvbW1vbm1hcmsvZGV2L2xpYi9jaGFyYWN0ZXItZXNjYXBlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7Ozs7Ozs7Q0FPQyxHQUVrQztBQUNzQjtBQUNQO0FBRWxELHNCQUFzQixHQUNmLE1BQU1LLGtCQUFrQjtJQUM3QkMsTUFBTTtJQUNOQyxVQUFVQztBQUNaLEVBQUM7QUFFRDs7OztDQUlDLEdBQ0QsU0FBU0Esd0JBQXdCQyxPQUFPLEVBQUVULEVBQUUsRUFBRVUsR0FBRztJQUMvQyxPQUFPQztJQUVQOzs7Ozs7Ozs7R0FTQyxHQUNELFNBQVNBLE1BQU1DLElBQUk7UUFDakJYLDBDQUFNQSxDQUFDVyxTQUFTVCx3REFBS0EsQ0FBQ1UsU0FBUyxFQUFFO1FBQ2pDSixRQUFRSyxLQUFLLENBQUNWLHdEQUFLQSxDQUFDQyxlQUFlO1FBQ25DSSxRQUFRSyxLQUFLLENBQUNWLHdEQUFLQSxDQUFDVyxZQUFZO1FBQ2hDTixRQUFRTyxPQUFPLENBQUNKO1FBQ2hCSCxRQUFRUSxJQUFJLENBQUNiLHdEQUFLQSxDQUFDVyxZQUFZO1FBQy9CLE9BQU9HO0lBQ1Q7SUFFQTs7Ozs7Ozs7O0dBU0MsR0FDRCxTQUFTQSxPQUFPTixJQUFJO1FBQ2xCLHFCQUFxQjtRQUNyQixJQUFJViwwRUFBZ0JBLENBQUNVLE9BQU87WUFDMUJILFFBQVFLLEtBQUssQ0FBQ1Ysd0RBQUtBLENBQUNlLG9CQUFvQjtZQUN4Q1YsUUFBUU8sT0FBTyxDQUFDSjtZQUNoQkgsUUFBUVEsSUFBSSxDQUFDYix3REFBS0EsQ0FBQ2Usb0JBQW9CO1lBQ3ZDVixRQUFRUSxJQUFJLENBQUNiLHdEQUFLQSxDQUFDQyxlQUFlO1lBQ2xDLE9BQU9MO1FBQ1Q7UUFFQSxPQUFPVSxJQUFJRTtJQUNiO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWIvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21pY3JvbWFyay1jb3JlLWNvbW1vbm1hcmtAMi4wLjMvbm9kZV9tb2R1bGVzL21pY3JvbWFyay1jb3JlLWNvbW1vbm1hcmsvZGV2L2xpYi9jaGFyYWN0ZXItZXNjYXBlLmpzPzU5MzYiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAaW1wb3J0IHtcbiAqICAgQ29uc3RydWN0LFxuICogICBTdGF0ZSxcbiAqICAgVG9rZW5pemVDb250ZXh0LFxuICogICBUb2tlbml6ZXJcbiAqIH0gZnJvbSAnbWljcm9tYXJrLXV0aWwtdHlwZXMnXG4gKi9cblxuaW1wb3J0IHtvayBhcyBhc3NlcnR9IGZyb20gJ2RldmxvcCdcbmltcG9ydCB7YXNjaWlQdW5jdHVhdGlvbn0gZnJvbSAnbWljcm9tYXJrLXV0aWwtY2hhcmFjdGVyJ1xuaW1wb3J0IHtjb2RlcywgdHlwZXN9IGZyb20gJ21pY3JvbWFyay11dGlsLXN5bWJvbCdcblxuLyoqIEB0eXBlIHtDb25zdHJ1Y3R9ICovXG5leHBvcnQgY29uc3QgY2hhcmFjdGVyRXNjYXBlID0ge1xuICBuYW1lOiAnY2hhcmFjdGVyRXNjYXBlJyxcbiAgdG9rZW5pemU6IHRva2VuaXplQ2hhcmFjdGVyRXNjYXBlXG59XG5cbi8qKlxuICogQHRoaXMge1Rva2VuaXplQ29udGV4dH1cbiAqICAgQ29udGV4dC5cbiAqIEB0eXBlIHtUb2tlbml6ZXJ9XG4gKi9cbmZ1bmN0aW9uIHRva2VuaXplQ2hhcmFjdGVyRXNjYXBlKGVmZmVjdHMsIG9rLCBub2spIHtcbiAgcmV0dXJuIHN0YXJ0XG5cbiAgLyoqXG4gICAqIFN0YXJ0IG9mIGNoYXJhY3RlciBlc2NhcGUuXG4gICAqXG4gICAqIGBgYG1hcmtkb3duXG4gICAqID4gfCBhXFwqYlxuICAgKiAgICAgIF5cbiAgICogYGBgXG4gICAqXG4gICAqIEB0eXBlIHtTdGF0ZX1cbiAgICovXG4gIGZ1bmN0aW9uIHN0YXJ0KGNvZGUpIHtcbiAgICBhc3NlcnQoY29kZSA9PT0gY29kZXMuYmFja3NsYXNoLCAnZXhwZWN0ZWQgYFxcXFxgJylcbiAgICBlZmZlY3RzLmVudGVyKHR5cGVzLmNoYXJhY3RlckVzY2FwZSlcbiAgICBlZmZlY3RzLmVudGVyKHR5cGVzLmVzY2FwZU1hcmtlcilcbiAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICBlZmZlY3RzLmV4aXQodHlwZXMuZXNjYXBlTWFya2VyKVxuICAgIHJldHVybiBpbnNpZGVcbiAgfVxuXG4gIC8qKlxuICAgKiBBZnRlciBgXFxgLCBhdCBwdW5jdHVhdGlvbi5cbiAgICpcbiAgICogYGBgbWFya2Rvd25cbiAgICogPiB8IGFcXCpiXG4gICAqICAgICAgIF5cbiAgICogYGBgXG4gICAqXG4gICAqIEB0eXBlIHtTdGF0ZX1cbiAgICovXG4gIGZ1bmN0aW9uIGluc2lkZShjb2RlKSB7XG4gICAgLy8gQVNDSUkgcHVuY3R1YXRpb24uXG4gICAgaWYgKGFzY2lpUHVuY3R1YXRpb24oY29kZSkpIHtcbiAgICAgIGVmZmVjdHMuZW50ZXIodHlwZXMuY2hhcmFjdGVyRXNjYXBlVmFsdWUpXG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIGVmZmVjdHMuZXhpdCh0eXBlcy5jaGFyYWN0ZXJFc2NhcGVWYWx1ZSlcbiAgICAgIGVmZmVjdHMuZXhpdCh0eXBlcy5jaGFyYWN0ZXJFc2NhcGUpXG4gICAgICByZXR1cm4gb2tcbiAgICB9XG5cbiAgICByZXR1cm4gbm9rKGNvZGUpXG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJvayIsImFzc2VydCIsImFzY2lpUHVuY3R1YXRpb24iLCJjb2RlcyIsInR5cGVzIiwiY2hhcmFjdGVyRXNjYXBlIiwibmFtZSIsInRva2VuaXplIiwidG9rZW5pemVDaGFyYWN0ZXJFc2NhcGUiLCJlZmZlY3RzIiwibm9rIiwic3RhcnQiLCJjb2RlIiwiYmFja3NsYXNoIiwiZW50ZXIiLCJlc2NhcGVNYXJrZXIiLCJjb25zdW1lIiwiZXhpdCIsImluc2lkZSIsImNoYXJhY3RlckVzY2FwZVZhbHVlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/character-escape.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/character-reference.js":
/*!**************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/character-reference.js ***!
  \**************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   characterReference: () => (/* binding */ characterReference)\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! devlop */ \"(rsc)/../../node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js\");\n/* harmony import */ var decode_named_character_reference__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! decode-named-character-reference */ \"(rsc)/../../node_modules/.pnpm/decode-named-character-reference@1.2.0/node_modules/decode-named-character-reference/index.js\");\n/* harmony import */ var micromark_util_character__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! micromark-util-character */ \"(rsc)/../../node_modules/.pnpm/micromark-util-character@2.1.1/node_modules/micromark-util-character/dev/index.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! micromark-util-symbol */ \"(rsc)/../../node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/codes.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! micromark-util-symbol */ \"(rsc)/../../node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/types.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! micromark-util-symbol */ \"(rsc)/../../node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/constants.js\");\n/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */ \n\n\n\n/** @type {Construct} */ const characterReference = {\n    name: \"characterReference\",\n    tokenize: tokenizeCharacterReference\n};\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */ function tokenizeCharacterReference(effects, ok, nok) {\n    const self = this;\n    let size = 0;\n    /** @type {number} */ let max;\n    /** @type {(code: Code) => boolean} */ let test;\n    return start;\n    /**\n   * Start of character reference.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *      ^\n   * > | a&#123;b\n   *      ^\n   * > | a&#x9;b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */ function start(code) {\n        (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.ampersand, \"expected `&`\");\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.characterReference);\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.characterReferenceMarker);\n        effects.consume(code);\n        effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.characterReferenceMarker);\n        return open;\n    }\n    /**\n   * After `&`, at `#` for numeric references or alphanumeric for named\n   * references.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^\n   * > | a&#123;b\n   *       ^\n   * > | a&#x9;b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */ function open(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.numberSign) {\n            effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.characterReferenceMarkerNumeric);\n            effects.consume(code);\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.characterReferenceMarkerNumeric);\n            return numeric;\n        }\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.characterReferenceValue);\n        max = micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.constants.characterReferenceNamedSizeMax;\n        test = micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.asciiAlphanumeric;\n        return value(code);\n    }\n    /**\n   * After `#`, at `x` for hexadecimals or digit for decimals.\n   *\n   * ```markdown\n   * > | a&#123;b\n   *        ^\n   * > | a&#x9;b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */ function numeric(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.uppercaseX || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.lowercaseX) {\n            effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.characterReferenceMarkerHexadecimal);\n            effects.consume(code);\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.characterReferenceMarkerHexadecimal);\n            effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.characterReferenceValue);\n            max = micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.constants.characterReferenceHexadecimalSizeMax;\n            test = micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.asciiHexDigit;\n            return value;\n        }\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.characterReferenceValue);\n        max = micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.constants.characterReferenceDecimalSizeMax;\n        test = micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.asciiDigit;\n        return value(code);\n    }\n    /**\n   * After markers (`&#x`, `&#`, or `&`), in value, before `;`.\n   *\n   * The character reference kind defines what and how many characters are\n   * allowed.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^^^\n   * > | a&#123;b\n   *        ^^^\n   * > | a&#x9;b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */ function value(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.semicolon && size) {\n            const token = effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.characterReferenceValue);\n            if (test === micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.asciiAlphanumeric && !(0,decode_named_character_reference__WEBPACK_IMPORTED_MODULE_5__.decodeNamedCharacterReference)(self.sliceSerialize(token))) {\n                return nok(code);\n            }\n            // To do: `markdown-rs` uses a different name:\n            // `CharacterReferenceMarkerSemi`.\n            effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.characterReferenceMarker);\n            effects.consume(code);\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.characterReferenceMarker);\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.characterReference);\n            return ok;\n        }\n        if (test(code) && size++ < max) {\n            effects.consume(code);\n            return value;\n        }\n        return nok(code);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/character-reference.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/code-fenced.js":
/*!******************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/code-fenced.js ***!
  \******************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   codeFenced: () => (/* binding */ codeFenced)\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! devlop */ \"(rsc)/../../node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js\");\n/* harmony import */ var micromark_factory_space__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! micromark-factory-space */ \"(rsc)/../../node_modules/.pnpm/micromark-factory-space@2.0.1/node_modules/micromark-factory-space/dev/index.js\");\n/* harmony import */ var micromark_util_character__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! micromark-util-character */ \"(rsc)/../../node_modules/.pnpm/micromark-util-character@2.1.1/node_modules/micromark-util-character/dev/index.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! micromark-util-symbol */ \"(rsc)/../../node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/codes.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! micromark-util-symbol */ \"(rsc)/../../node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/types.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! micromark-util-symbol */ \"(rsc)/../../node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/constants.js\");\n/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */ \n\n\n\n/** @type {Construct} */ const nonLazyContinuation = {\n    partial: true,\n    tokenize: tokenizeNonLazyContinuation\n};\n/** @type {Construct} */ const codeFenced = {\n    concrete: true,\n    name: \"codeFenced\",\n    tokenize: tokenizeCodeFenced\n};\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */ function tokenizeCodeFenced(effects, ok, nok) {\n    const self = this;\n    /** @type {Construct} */ const closeStart = {\n        partial: true,\n        tokenize: tokenizeCloseStart\n    };\n    let initialPrefix = 0;\n    let sizeOpen = 0;\n    /** @type {NonNullable<Code>} */ let marker;\n    return start;\n    /**\n   * Start of code.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */ function start(code) {\n        // To do: parse whitespace like `markdown-rs`.\n        return beforeSequenceOpen(code);\n    }\n    /**\n   * In opening fence, after prefix, at sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */ function beforeSequenceOpen(code) {\n        (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.graveAccent || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.tilde, \"expected `` ` `` or `~`\");\n        const tail = self.events[self.events.length - 1];\n        initialPrefix = tail && tail[1].type === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.linePrefix ? tail[2].sliceSerialize(tail[1], true).length : 0;\n        marker = code;\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.codeFenced);\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.codeFencedFence);\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.codeFencedFenceSequence);\n        return sequenceOpen(code);\n    }\n    /**\n   * In opening fence sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *      ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */ function sequenceOpen(code) {\n        if (code === marker) {\n            sizeOpen++;\n            effects.consume(code);\n            return sequenceOpen;\n        }\n        if (sizeOpen < micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.constants.codeFencedSequenceSizeMin) {\n            return nok(code);\n        }\n        effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.codeFencedFenceSequence);\n        return (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownSpace)(code) ? (0,micromark_factory_space__WEBPACK_IMPORTED_MODULE_5__.factorySpace)(effects, infoBefore, micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.whitespace)(code) : infoBefore(code);\n    }\n    /**\n   * In opening fence, after the sequence (and optional whitespace), before info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */ function infoBefore(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownLineEnding)(code)) {\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.codeFencedFence);\n            return self.interrupt ? ok(code) : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code);\n        }\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.codeFencedFenceInfo);\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.chunkString, {\n            contentType: micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.constants.contentTypeString\n        });\n        return info(code);\n    }\n    /**\n   * In info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */ function info(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownLineEnding)(code)) {\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.chunkString);\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.codeFencedFenceInfo);\n            return infoBefore(code);\n        }\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownSpace)(code)) {\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.chunkString);\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.codeFencedFenceInfo);\n            return (0,micromark_factory_space__WEBPACK_IMPORTED_MODULE_5__.factorySpace)(effects, metaBefore, micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.whitespace)(code);\n        }\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.graveAccent && code === marker) {\n            return nok(code);\n        }\n        effects.consume(code);\n        return info;\n    }\n    /**\n   * In opening fence, after info and whitespace, before meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */ function metaBefore(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownLineEnding)(code)) {\n            return infoBefore(code);\n        }\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.codeFencedFenceMeta);\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.chunkString, {\n            contentType: micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.constants.contentTypeString\n        });\n        return meta(code);\n    }\n    /**\n   * In meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */ function meta(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownLineEnding)(code)) {\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.chunkString);\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.codeFencedFenceMeta);\n            return infoBefore(code);\n        }\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.graveAccent && code === marker) {\n            return nok(code);\n        }\n        effects.consume(code);\n        return meta;\n    }\n    /**\n   * At eol/eof in code, before a non-lazy closing fence or content.\n   *\n   * ```markdown\n   * > | ~~~js\n   *          ^\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */ function atNonLazyBreak(code) {\n        (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownLineEnding)(code), \"expected eol\");\n        return effects.attempt(closeStart, after, contentBefore)(code);\n    }\n    /**\n   * Before code content, not a closing fence, at eol.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */ function contentBefore(code) {\n        (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownLineEnding)(code), \"expected eol\");\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.lineEnding);\n        effects.consume(code);\n        effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.lineEnding);\n        return contentStart;\n    }\n    /**\n   * Before code content, not a closing fence.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */ function contentStart(code) {\n        return initialPrefix > 0 && (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownSpace)(code) ? (0,micromark_factory_space__WEBPACK_IMPORTED_MODULE_5__.factorySpace)(effects, beforeContentChunk, micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.linePrefix, initialPrefix + 1)(code) : beforeContentChunk(code);\n    }\n    /**\n   * Before code content, after optional prefix.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */ function beforeContentChunk(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownLineEnding)(code)) {\n            return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code);\n        }\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.codeFlowValue);\n        return contentChunk(code);\n    }\n    /**\n   * In code content.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^^^^^^^^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */ function contentChunk(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownLineEnding)(code)) {\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.codeFlowValue);\n            return beforeContentChunk(code);\n        }\n        effects.consume(code);\n        return contentChunk;\n    }\n    /**\n   * After code.\n   *\n   * ```markdown\n   *   | ~~~js\n   *   | alert(1)\n   * > | ~~~\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */ function after(code) {\n        effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.codeFenced);\n        return ok(code);\n    }\n    /**\n   * @this {TokenizeContext}\n   *   Context.\n   * @type {Tokenizer}\n   */ function tokenizeCloseStart(effects, ok, nok) {\n        let size = 0;\n        return startBefore;\n        /**\n     *\n     *\n     * @type {State}\n     */ function startBefore(code) {\n            (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownLineEnding)(code), \"expected eol\");\n            effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.lineEnding);\n            effects.consume(code);\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.lineEnding);\n            return start;\n        }\n        /**\n     * Before closing fence, at optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */ function start(code) {\n            // Always populated by defaults.\n            (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(self.parser.constructs.disable.null, \"expected `disable.null` to be populated\");\n            // To do: `enter` here or in next state?\n            effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.codeFencedFence);\n            return (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownSpace)(code) ? (0,micromark_factory_space__WEBPACK_IMPORTED_MODULE_5__.factorySpace)(effects, beforeSequenceClose, micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.linePrefix, self.parser.constructs.disable.null.includes(\"codeIndented\") ? undefined : micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.constants.tabSize)(code) : beforeSequenceClose(code);\n        }\n        /**\n     * In closing fence, after optional whitespace, at sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */ function beforeSequenceClose(code) {\n            if (code === marker) {\n                effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.codeFencedFenceSequence);\n                return sequenceClose(code);\n            }\n            return nok(code);\n        }\n        /**\n     * In closing fence sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */ function sequenceClose(code) {\n            if (code === marker) {\n                size++;\n                effects.consume(code);\n                return sequenceClose;\n            }\n            if (size >= sizeOpen) {\n                effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.codeFencedFenceSequence);\n                return (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownSpace)(code) ? (0,micromark_factory_space__WEBPACK_IMPORTED_MODULE_5__.factorySpace)(effects, sequenceCloseAfter, micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.whitespace)(code) : sequenceCloseAfter(code);\n            }\n            return nok(code);\n        }\n        /**\n     * After closing fence sequence, after optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *        ^\n     * ```\n     *\n     * @type {State}\n     */ function sequenceCloseAfter(code) {\n            if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownLineEnding)(code)) {\n                effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.codeFencedFence);\n                return ok(code);\n            }\n            return nok(code);\n        }\n    }\n}\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */ function tokenizeNonLazyContinuation(effects, ok, nok) {\n    const self = this;\n    return start;\n    /**\n   *\n   *\n   * @type {State}\n   */ function start(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof) {\n            return nok(code);\n        }\n        (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownLineEnding)(code), \"expected eol\");\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.lineEnding);\n        effects.consume(code);\n        effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.lineEnding);\n        return lineStart;\n    }\n    /**\n   *\n   *\n   * @type {State}\n   */ function lineStart(code) {\n        return self.parser.lazy[self.now().line] ? nok(code) : ok(code);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/code-fenced.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/code-indented.js":
/*!********************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/code-indented.js ***!
  \********************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   codeIndented: () => (/* binding */ codeIndented)\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! devlop */ \"(rsc)/../../node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js\");\n/* harmony import */ var micromark_factory_space__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! micromark-factory-space */ \"(rsc)/../../node_modules/.pnpm/micromark-factory-space@2.0.1/node_modules/micromark-factory-space/dev/index.js\");\n/* harmony import */ var micromark_util_character__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! micromark-util-character */ \"(rsc)/../../node_modules/.pnpm/micromark-util-character@2.1.1/node_modules/micromark-util-character/dev/index.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! micromark-util-symbol */ \"(rsc)/../../node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/types.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! micromark-util-symbol */ \"(rsc)/../../node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/constants.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! micromark-util-symbol */ \"(rsc)/../../node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/codes.js\");\n/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */ \n\n\n\n/** @type {Construct} */ const codeIndented = {\n    name: \"codeIndented\",\n    tokenize: tokenizeCodeIndented\n};\n/** @type {Construct} */ const furtherStart = {\n    partial: true,\n    tokenize: tokenizeFurtherStart\n};\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */ function tokenizeCodeIndented(effects, ok, nok) {\n    const self = this;\n    return start;\n    /**\n   * Start of code (indented).\n   *\n   * > **Parsing note**: it is not needed to check if this first line is a\n   * > filled line (that it has a non-whitespace character), because blank lines\n   * > are parsed already, so we never run into that.\n   *\n   * ```markdown\n   * > |     aaa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */ function start(code) {\n        // To do: manually check if interrupting like `markdown-rs`.\n        (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_1__.markdownSpace)(code));\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.codeIndented);\n        // To do: use an improved `space_or_tab` function like `markdown-rs`,\n        // so that we can drop the next state.\n        return (0,micromark_factory_space__WEBPACK_IMPORTED_MODULE_3__.factorySpace)(effects, afterPrefix, micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.linePrefix, micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__.constants.tabSize + 1)(code);\n    }\n    /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */ function afterPrefix(code) {\n        const tail = self.events[self.events.length - 1];\n        return tail && tail[1].type === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.linePrefix && tail[2].sliceSerialize(tail[1], true).length >= micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__.constants.tabSize ? atBreak(code) : nok(code);\n    }\n    /**\n   * At a break.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^  ^\n   * ```\n   *\n   * @type {State}\n   */ function atBreak(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_5__.codes.eof) {\n            return after(code);\n        }\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_1__.markdownLineEnding)(code)) {\n            return effects.attempt(furtherStart, atBreak, after)(code);\n        }\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.codeFlowValue);\n        return inside(code);\n    }\n    /**\n   * In code content.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^^^^\n   * ```\n   *\n   * @type {State}\n   */ function inside(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_5__.codes.eof || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_1__.markdownLineEnding)(code)) {\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.codeFlowValue);\n            return atBreak(code);\n        }\n        effects.consume(code);\n        return inside;\n    }\n    /** @type {State} */ function after(code) {\n        effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.codeIndented);\n        // To do: allow interrupting like `markdown-rs`.\n        // Feel free to interrupt.\n        // tokenizer.interrupt = false\n        return ok(code);\n    }\n}\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */ function tokenizeFurtherStart(effects, ok, nok) {\n    const self = this;\n    return furtherStart;\n    /**\n   * At eol, trying to parse another indent.\n   *\n   * ```markdown\n   * > |     aaa\n   *            ^\n   *   |     bbb\n   * ```\n   *\n   * @type {State}\n   */ function furtherStart(code) {\n        // To do: improve `lazy` / `pierce` handling.\n        // If this is a lazy line, it can’t be code.\n        if (self.parser.lazy[self.now().line]) {\n            return nok(code);\n        }\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_1__.markdownLineEnding)(code)) {\n            effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.lineEnding);\n            effects.consume(code);\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.lineEnding);\n            return furtherStart;\n        }\n        // To do: the code here in `micromark-js` is a bit different from\n        // `markdown-rs` because there it can attempt spaces.\n        // We can’t yet.\n        //\n        // To do: use an improved `space_or_tab` function like `markdown-rs`,\n        // so that we can drop the next state.\n        return (0,micromark_factory_space__WEBPACK_IMPORTED_MODULE_3__.factorySpace)(effects, afterPrefix, micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.linePrefix, micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__.constants.tabSize + 1)(code);\n    }\n    /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */ function afterPrefix(code) {\n        const tail = self.events[self.events.length - 1];\n        return tail && tail[1].type === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.linePrefix && tail[2].sliceSerialize(tail[1], true).length >= micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__.constants.tabSize ? ok(code) : (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_1__.markdownLineEnding)(code) ? furtherStart(code) : nok(code);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21pY3JvbWFyay1jb3JlLWNvbW1vbm1hcmtAMi4wLjMvbm9kZV9tb2R1bGVzL21pY3JvbWFyay1jb3JlLWNvbW1vbm1hcmsvZGV2L2xpYi9jb2RlLWluZGVudGVkLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQTs7Ozs7OztDQU9DLEdBRWtDO0FBQ2lCO0FBQ3NCO0FBQ2I7QUFFN0Qsc0JBQXNCLEdBQ2YsTUFBTVEsZUFBZTtJQUMxQkMsTUFBTTtJQUNOQyxVQUFVQztBQUNaLEVBQUM7QUFFRCxzQkFBc0IsR0FDdEIsTUFBTUMsZUFBZTtJQUFDQyxTQUFTO0lBQU1ILFVBQVVJO0FBQW9CO0FBRW5FOzs7O0NBSUMsR0FDRCxTQUFTSCxxQkFBcUJJLE9BQU8sRUFBRWYsRUFBRSxFQUFFZ0IsR0FBRztJQUM1QyxNQUFNQyxPQUFPLElBQUk7SUFDakIsT0FBT0M7SUFFUDs7Ozs7Ozs7Ozs7OztHQWFDLEdBQ0QsU0FBU0EsTUFBTUMsSUFBSTtRQUNqQiw0REFBNEQ7UUFDNURsQiwwQ0FBTUEsQ0FBQ0csdUVBQWFBLENBQUNlO1FBQ3JCSixRQUFRSyxLQUFLLENBQUNiLHdEQUFLQSxDQUFDQyxZQUFZO1FBQ2hDLHFFQUFxRTtRQUNyRSxzQ0FBc0M7UUFDdEMsT0FBT04scUVBQVlBLENBQ2pCYSxTQUNBTSxhQUNBZCx3REFBS0EsQ0FBQ2UsVUFBVSxFQUNoQmhCLDREQUFTQSxDQUFDaUIsT0FBTyxHQUFHLEdBQ3BCSjtJQUNKO0lBRUE7Ozs7Ozs7OztHQVNDLEdBQ0QsU0FBU0UsWUFBWUYsSUFBSTtRQUN2QixNQUFNSyxPQUFPUCxLQUFLUSxNQUFNLENBQUNSLEtBQUtRLE1BQU0sQ0FBQ0MsTUFBTSxHQUFHLEVBQUU7UUFDaEQsT0FBT0YsUUFDTEEsSUFBSSxDQUFDLEVBQUUsQ0FBQ0csSUFBSSxLQUFLcEIsd0RBQUtBLENBQUNlLFVBQVUsSUFDakNFLElBQUksQ0FBQyxFQUFFLENBQUNJLGNBQWMsQ0FBQ0osSUFBSSxDQUFDLEVBQUUsRUFBRSxNQUFNRSxNQUFNLElBQUlwQiw0REFBU0EsQ0FBQ2lCLE9BQU8sR0FDL0RNLFFBQVFWLFFBQ1JILElBQUlHO0lBQ1Y7SUFFQTs7Ozs7Ozs7O0dBU0MsR0FDRCxTQUFTVSxRQUFRVixJQUFJO1FBQ25CLElBQUlBLFNBQVNkLHdEQUFLQSxDQUFDeUIsR0FBRyxFQUFFO1lBQ3RCLE9BQU9DLE1BQU1aO1FBQ2Y7UUFFQSxJQUFJaEIsNEVBQWtCQSxDQUFDZ0IsT0FBTztZQUM1QixPQUFPSixRQUFRaUIsT0FBTyxDQUFDcEIsY0FBY2lCLFNBQVNFLE9BQU9aO1FBQ3ZEO1FBRUFKLFFBQVFLLEtBQUssQ0FBQ2Isd0RBQUtBLENBQUMwQixhQUFhO1FBQ2pDLE9BQU9DLE9BQU9mO0lBQ2hCO0lBRUE7Ozs7Ozs7OztHQVNDLEdBQ0QsU0FBU2UsT0FBT2YsSUFBSTtRQUNsQixJQUFJQSxTQUFTZCx3REFBS0EsQ0FBQ3lCLEdBQUcsSUFBSTNCLDRFQUFrQkEsQ0FBQ2dCLE9BQU87WUFDbERKLFFBQVFvQixJQUFJLENBQUM1Qix3REFBS0EsQ0FBQzBCLGFBQWE7WUFDaEMsT0FBT0osUUFBUVY7UUFDakI7UUFFQUosUUFBUXFCLE9BQU8sQ0FBQ2pCO1FBQ2hCLE9BQU9lO0lBQ1Q7SUFFQSxrQkFBa0IsR0FDbEIsU0FBU0gsTUFBTVosSUFBSTtRQUNqQkosUUFBUW9CLElBQUksQ0FBQzVCLHdEQUFLQSxDQUFDQyxZQUFZO1FBQy9CLGdEQUFnRDtRQUNoRCwwQkFBMEI7UUFDMUIsOEJBQThCO1FBQzlCLE9BQU9SLEdBQUdtQjtJQUNaO0FBQ0Y7QUFFQTs7OztDQUlDLEdBQ0QsU0FBU0wscUJBQXFCQyxPQUFPLEVBQUVmLEVBQUUsRUFBRWdCLEdBQUc7SUFDNUMsTUFBTUMsT0FBTyxJQUFJO0lBRWpCLE9BQU9MO0lBRVA7Ozs7Ozs7Ozs7R0FVQyxHQUNELFNBQVNBLGFBQWFPLElBQUk7UUFDeEIsNkNBQTZDO1FBQzdDLDRDQUE0QztRQUM1QyxJQUFJRixLQUFLb0IsTUFBTSxDQUFDQyxJQUFJLENBQUNyQixLQUFLc0IsR0FBRyxHQUFHQyxJQUFJLENBQUMsRUFBRTtZQUNyQyxPQUFPeEIsSUFBSUc7UUFDYjtRQUVBLElBQUloQiw0RUFBa0JBLENBQUNnQixPQUFPO1lBQzVCSixRQUFRSyxLQUFLLENBQUNiLHdEQUFLQSxDQUFDa0MsVUFBVTtZQUM5QjFCLFFBQVFxQixPQUFPLENBQUNqQjtZQUNoQkosUUFBUW9CLElBQUksQ0FBQzVCLHdEQUFLQSxDQUFDa0MsVUFBVTtZQUM3QixPQUFPN0I7UUFDVDtRQUVBLGlFQUFpRTtRQUNqRSxxREFBcUQ7UUFDckQsZ0JBQWdCO1FBQ2hCLEVBQUU7UUFDRixxRUFBcUU7UUFDckUsc0NBQXNDO1FBQ3RDLE9BQU9WLHFFQUFZQSxDQUNqQmEsU0FDQU0sYUFDQWQsd0RBQUtBLENBQUNlLFVBQVUsRUFDaEJoQiw0REFBU0EsQ0FBQ2lCLE9BQU8sR0FBRyxHQUNwQko7SUFDSjtJQUVBOzs7Ozs7Ozs7R0FTQyxHQUNELFNBQVNFLFlBQVlGLElBQUk7UUFDdkIsTUFBTUssT0FBT1AsS0FBS1EsTUFBTSxDQUFDUixLQUFLUSxNQUFNLENBQUNDLE1BQU0sR0FBRyxFQUFFO1FBQ2hELE9BQU9GLFFBQ0xBLElBQUksQ0FBQyxFQUFFLENBQUNHLElBQUksS0FBS3BCLHdEQUFLQSxDQUFDZSxVQUFVLElBQ2pDRSxJQUFJLENBQUMsRUFBRSxDQUFDSSxjQUFjLENBQUNKLElBQUksQ0FBQyxFQUFFLEVBQUUsTUFBTUUsTUFBTSxJQUFJcEIsNERBQVNBLENBQUNpQixPQUFPLEdBQy9EdkIsR0FBR21CLFFBQ0hoQiw0RUFBa0JBLENBQUNnQixRQUNqQlAsYUFBYU8sUUFDYkgsSUFBSUc7SUFDWjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2ViLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9taWNyb21hcmstY29yZS1jb21tb25tYXJrQDIuMC4zL25vZGVfbW9kdWxlcy9taWNyb21hcmstY29yZS1jb21tb25tYXJrL2Rldi9saWIvY29kZS1pbmRlbnRlZC5qcz80NzdiIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGltcG9ydCB7XG4gKiAgIENvbnN0cnVjdCxcbiAqICAgU3RhdGUsXG4gKiAgIFRva2VuaXplQ29udGV4dCxcbiAqICAgVG9rZW5pemVyXG4gKiB9IGZyb20gJ21pY3JvbWFyay11dGlsLXR5cGVzJ1xuICovXG5cbmltcG9ydCB7b2sgYXMgYXNzZXJ0fSBmcm9tICdkZXZsb3AnXG5pbXBvcnQge2ZhY3RvcnlTcGFjZX0gZnJvbSAnbWljcm9tYXJrLWZhY3Rvcnktc3BhY2UnXG5pbXBvcnQge21hcmtkb3duTGluZUVuZGluZywgbWFya2Rvd25TcGFjZX0gZnJvbSAnbWljcm9tYXJrLXV0aWwtY2hhcmFjdGVyJ1xuaW1wb3J0IHtjb2RlcywgY29uc3RhbnRzLCB0eXBlc30gZnJvbSAnbWljcm9tYXJrLXV0aWwtc3ltYm9sJ1xuXG4vKiogQHR5cGUge0NvbnN0cnVjdH0gKi9cbmV4cG9ydCBjb25zdCBjb2RlSW5kZW50ZWQgPSB7XG4gIG5hbWU6ICdjb2RlSW5kZW50ZWQnLFxuICB0b2tlbml6ZTogdG9rZW5pemVDb2RlSW5kZW50ZWRcbn1cblxuLyoqIEB0eXBlIHtDb25zdHJ1Y3R9ICovXG5jb25zdCBmdXJ0aGVyU3RhcnQgPSB7cGFydGlhbDogdHJ1ZSwgdG9rZW5pemU6IHRva2VuaXplRnVydGhlclN0YXJ0fVxuXG4vKipcbiAqIEB0aGlzIHtUb2tlbml6ZUNvbnRleHR9XG4gKiAgIENvbnRleHQuXG4gKiBAdHlwZSB7VG9rZW5pemVyfVxuICovXG5mdW5jdGlvbiB0b2tlbml6ZUNvZGVJbmRlbnRlZChlZmZlY3RzLCBvaywgbm9rKSB7XG4gIGNvbnN0IHNlbGYgPSB0aGlzXG4gIHJldHVybiBzdGFydFxuXG4gIC8qKlxuICAgKiBTdGFydCBvZiBjb2RlIChpbmRlbnRlZCkuXG4gICAqXG4gICAqID4gKipQYXJzaW5nIG5vdGUqKjogaXQgaXMgbm90IG5lZWRlZCB0byBjaGVjayBpZiB0aGlzIGZpcnN0IGxpbmUgaXMgYVxuICAgKiA+IGZpbGxlZCBsaW5lICh0aGF0IGl0IGhhcyBhIG5vbi13aGl0ZXNwYWNlIGNoYXJhY3RlciksIGJlY2F1c2UgYmxhbmsgbGluZXNcbiAgICogPiBhcmUgcGFyc2VkIGFscmVhZHksIHNvIHdlIG5ldmVyIHJ1biBpbnRvIHRoYXQuXG4gICAqXG4gICAqIGBgYG1hcmtkb3duXG4gICAqID4gfCAgICAgYWFhXG4gICAqICAgICBeXG4gICAqIGBgYFxuICAgKlxuICAgKiBAdHlwZSB7U3RhdGV9XG4gICAqL1xuICBmdW5jdGlvbiBzdGFydChjb2RlKSB7XG4gICAgLy8gVG8gZG86IG1hbnVhbGx5IGNoZWNrIGlmIGludGVycnVwdGluZyBsaWtlIGBtYXJrZG93bi1yc2AuXG4gICAgYXNzZXJ0KG1hcmtkb3duU3BhY2UoY29kZSkpXG4gICAgZWZmZWN0cy5lbnRlcih0eXBlcy5jb2RlSW5kZW50ZWQpXG4gICAgLy8gVG8gZG86IHVzZSBhbiBpbXByb3ZlZCBgc3BhY2Vfb3JfdGFiYCBmdW5jdGlvbiBsaWtlIGBtYXJrZG93bi1yc2AsXG4gICAgLy8gc28gdGhhdCB3ZSBjYW4gZHJvcCB0aGUgbmV4dCBzdGF0ZS5cbiAgICByZXR1cm4gZmFjdG9yeVNwYWNlKFxuICAgICAgZWZmZWN0cyxcbiAgICAgIGFmdGVyUHJlZml4LFxuICAgICAgdHlwZXMubGluZVByZWZpeCxcbiAgICAgIGNvbnN0YW50cy50YWJTaXplICsgMVxuICAgICkoY29kZSlcbiAgfVxuXG4gIC8qKlxuICAgKiBBdCBzdGFydCwgYWZ0ZXIgMSBvciA0IHNwYWNlcy5cbiAgICpcbiAgICogYGBgbWFya2Rvd25cbiAgICogPiB8ICAgICBhYWFcbiAgICogICAgICAgICBeXG4gICAqIGBgYFxuICAgKlxuICAgKiBAdHlwZSB7U3RhdGV9XG4gICAqL1xuICBmdW5jdGlvbiBhZnRlclByZWZpeChjb2RlKSB7XG4gICAgY29uc3QgdGFpbCA9IHNlbGYuZXZlbnRzW3NlbGYuZXZlbnRzLmxlbmd0aCAtIDFdXG4gICAgcmV0dXJuIHRhaWwgJiZcbiAgICAgIHRhaWxbMV0udHlwZSA9PT0gdHlwZXMubGluZVByZWZpeCAmJlxuICAgICAgdGFpbFsyXS5zbGljZVNlcmlhbGl6ZSh0YWlsWzFdLCB0cnVlKS5sZW5ndGggPj0gY29uc3RhbnRzLnRhYlNpemVcbiAgICAgID8gYXRCcmVhayhjb2RlKVxuICAgICAgOiBub2soY29kZSlcbiAgfVxuXG4gIC8qKlxuICAgKiBBdCBhIGJyZWFrLlxuICAgKlxuICAgKiBgYGBtYXJrZG93blxuICAgKiA+IHwgICAgIGFhYVxuICAgKiAgICAgICAgIF4gIF5cbiAgICogYGBgXG4gICAqXG4gICAqIEB0eXBlIHtTdGF0ZX1cbiAgICovXG4gIGZ1bmN0aW9uIGF0QnJlYWsoY29kZSkge1xuICAgIGlmIChjb2RlID09PSBjb2Rlcy5lb2YpIHtcbiAgICAgIHJldHVybiBhZnRlcihjb2RlKVxuICAgIH1cblxuICAgIGlmIChtYXJrZG93bkxpbmVFbmRpbmcoY29kZSkpIHtcbiAgICAgIHJldHVybiBlZmZlY3RzLmF0dGVtcHQoZnVydGhlclN0YXJ0LCBhdEJyZWFrLCBhZnRlcikoY29kZSlcbiAgICB9XG5cbiAgICBlZmZlY3RzLmVudGVyKHR5cGVzLmNvZGVGbG93VmFsdWUpXG4gICAgcmV0dXJuIGluc2lkZShjb2RlKVxuICB9XG5cbiAgLyoqXG4gICAqIEluIGNvZGUgY29udGVudC5cbiAgICpcbiAgICogYGBgbWFya2Rvd25cbiAgICogPiB8ICAgICBhYWFcbiAgICogICAgICAgICBeXl5eXG4gICAqIGBgYFxuICAgKlxuICAgKiBAdHlwZSB7U3RhdGV9XG4gICAqL1xuICBmdW5jdGlvbiBpbnNpZGUoY29kZSkge1xuICAgIGlmIChjb2RlID09PSBjb2Rlcy5lb2YgfHwgbWFya2Rvd25MaW5lRW5kaW5nKGNvZGUpKSB7XG4gICAgICBlZmZlY3RzLmV4aXQodHlwZXMuY29kZUZsb3dWYWx1ZSlcbiAgICAgIHJldHVybiBhdEJyZWFrKGNvZGUpXG4gICAgfVxuXG4gICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgcmV0dXJuIGluc2lkZVxuICB9XG5cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cbiAgZnVuY3Rpb24gYWZ0ZXIoY29kZSkge1xuICAgIGVmZmVjdHMuZXhpdCh0eXBlcy5jb2RlSW5kZW50ZWQpXG4gICAgLy8gVG8gZG86IGFsbG93IGludGVycnVwdGluZyBsaWtlIGBtYXJrZG93bi1yc2AuXG4gICAgLy8gRmVlbCBmcmVlIHRvIGludGVycnVwdC5cbiAgICAvLyB0b2tlbml6ZXIuaW50ZXJydXB0ID0gZmFsc2VcbiAgICByZXR1cm4gb2soY29kZSlcbiAgfVxufVxuXG4vKipcbiAqIEB0aGlzIHtUb2tlbml6ZUNvbnRleHR9XG4gKiAgIENvbnRleHQuXG4gKiBAdHlwZSB7VG9rZW5pemVyfVxuICovXG5mdW5jdGlvbiB0b2tlbml6ZUZ1cnRoZXJTdGFydChlZmZlY3RzLCBvaywgbm9rKSB7XG4gIGNvbnN0IHNlbGYgPSB0aGlzXG5cbiAgcmV0dXJuIGZ1cnRoZXJTdGFydFxuXG4gIC8qKlxuICAgKiBBdCBlb2wsIHRyeWluZyB0byBwYXJzZSBhbm90aGVyIGluZGVudC5cbiAgICpcbiAgICogYGBgbWFya2Rvd25cbiAgICogPiB8ICAgICBhYWFcbiAgICogICAgICAgICAgICBeXG4gICAqICAgfCAgICAgYmJiXG4gICAqIGBgYFxuICAgKlxuICAgKiBAdHlwZSB7U3RhdGV9XG4gICAqL1xuICBmdW5jdGlvbiBmdXJ0aGVyU3RhcnQoY29kZSkge1xuICAgIC8vIFRvIGRvOiBpbXByb3ZlIGBsYXp5YCAvIGBwaWVyY2VgIGhhbmRsaW5nLlxuICAgIC8vIElmIHRoaXMgaXMgYSBsYXp5IGxpbmUsIGl0IGNhbuKAmXQgYmUgY29kZS5cbiAgICBpZiAoc2VsZi5wYXJzZXIubGF6eVtzZWxmLm5vdygpLmxpbmVdKSB7XG4gICAgICByZXR1cm4gbm9rKGNvZGUpXG4gICAgfVxuXG4gICAgaWYgKG1hcmtkb3duTGluZUVuZGluZyhjb2RlKSkge1xuICAgICAgZWZmZWN0cy5lbnRlcih0eXBlcy5saW5lRW5kaW5nKVxuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICBlZmZlY3RzLmV4aXQodHlwZXMubGluZUVuZGluZylcbiAgICAgIHJldHVybiBmdXJ0aGVyU3RhcnRcbiAgICB9XG5cbiAgICAvLyBUbyBkbzogdGhlIGNvZGUgaGVyZSBpbiBgbWljcm9tYXJrLWpzYCBpcyBhIGJpdCBkaWZmZXJlbnQgZnJvbVxuICAgIC8vIGBtYXJrZG93bi1yc2AgYmVjYXVzZSB0aGVyZSBpdCBjYW4gYXR0ZW1wdCBzcGFjZXMuXG4gICAgLy8gV2UgY2Fu4oCZdCB5ZXQuXG4gICAgLy9cbiAgICAvLyBUbyBkbzogdXNlIGFuIGltcHJvdmVkIGBzcGFjZV9vcl90YWJgIGZ1bmN0aW9uIGxpa2UgYG1hcmtkb3duLXJzYCxcbiAgICAvLyBzbyB0aGF0IHdlIGNhbiBkcm9wIHRoZSBuZXh0IHN0YXRlLlxuICAgIHJldHVybiBmYWN0b3J5U3BhY2UoXG4gICAgICBlZmZlY3RzLFxuICAgICAgYWZ0ZXJQcmVmaXgsXG4gICAgICB0eXBlcy5saW5lUHJlZml4LFxuICAgICAgY29uc3RhbnRzLnRhYlNpemUgKyAxXG4gICAgKShjb2RlKVxuICB9XG5cbiAgLyoqXG4gICAqIEF0IHN0YXJ0LCBhZnRlciAxIG9yIDQgc3BhY2VzLlxuICAgKlxuICAgKiBgYGBtYXJrZG93blxuICAgKiA+IHwgICAgIGFhYVxuICAgKiAgICAgICAgIF5cbiAgICogYGBgXG4gICAqXG4gICAqIEB0eXBlIHtTdGF0ZX1cbiAgICovXG4gIGZ1bmN0aW9uIGFmdGVyUHJlZml4KGNvZGUpIHtcbiAgICBjb25zdCB0YWlsID0gc2VsZi5ldmVudHNbc2VsZi5ldmVudHMubGVuZ3RoIC0gMV1cbiAgICByZXR1cm4gdGFpbCAmJlxuICAgICAgdGFpbFsxXS50eXBlID09PSB0eXBlcy5saW5lUHJlZml4ICYmXG4gICAgICB0YWlsWzJdLnNsaWNlU2VyaWFsaXplKHRhaWxbMV0sIHRydWUpLmxlbmd0aCA+PSBjb25zdGFudHMudGFiU2l6ZVxuICAgICAgPyBvayhjb2RlKVxuICAgICAgOiBtYXJrZG93bkxpbmVFbmRpbmcoY29kZSlcbiAgICAgICAgPyBmdXJ0aGVyU3RhcnQoY29kZSlcbiAgICAgICAgOiBub2soY29kZSlcbiAgfVxufVxuIl0sIm5hbWVzIjpbIm9rIiwiYXNzZXJ0IiwiZmFjdG9yeVNwYWNlIiwibWFya2Rvd25MaW5lRW5kaW5nIiwibWFya2Rvd25TcGFjZSIsImNvZGVzIiwiY29uc3RhbnRzIiwidHlwZXMiLCJjb2RlSW5kZW50ZWQiLCJuYW1lIiwidG9rZW5pemUiLCJ0b2tlbml6ZUNvZGVJbmRlbnRlZCIsImZ1cnRoZXJTdGFydCIsInBhcnRpYWwiLCJ0b2tlbml6ZUZ1cnRoZXJTdGFydCIsImVmZmVjdHMiLCJub2siLCJzZWxmIiwic3RhcnQiLCJjb2RlIiwiZW50ZXIiLCJhZnRlclByZWZpeCIsImxpbmVQcmVmaXgiLCJ0YWJTaXplIiwidGFpbCIsImV2ZW50cyIsImxlbmd0aCIsInR5cGUiLCJzbGljZVNlcmlhbGl6ZSIsImF0QnJlYWsiLCJlb2YiLCJhZnRlciIsImF0dGVtcHQiLCJjb2RlRmxvd1ZhbHVlIiwiaW5zaWRlIiwiZXhpdCIsImNvbnN1bWUiLCJwYXJzZXIiLCJsYXp5Iiwibm93IiwibGluZSIsImxpbmVFbmRpbmciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/code-indented.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/code-text.js":
/*!****************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/code-text.js ***!
  \****************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   codeText: () => (/* binding */ codeText)\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! devlop */ \"(rsc)/../../node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js\");\n/* harmony import */ var micromark_util_character__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! micromark-util-character */ \"(rsc)/../../node_modules/.pnpm/micromark-util-character@2.1.1/node_modules/micromark-util-character/dev/index.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! micromark-util-symbol */ \"(rsc)/../../node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/types.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! micromark-util-symbol */ \"(rsc)/../../node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/codes.js\");\n/**\n * @import {\n *   Construct,\n *   Previous,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */ \n\n\n/** @type {Construct} */ const codeText = {\n    name: \"codeText\",\n    previous,\n    resolve: resolveCodeText,\n    tokenize: tokenizeCodeText\n};\n// To do: next major: don’t resolve, like `markdown-rs`.\n/** @type {Resolver} */ function resolveCodeText(events) {\n    let tailExitIndex = events.length - 4;\n    let headEnterIndex = 3;\n    /** @type {number} */ let index;\n    /** @type {number | undefined} */ let enter;\n    // If we start and end with an EOL or a space.\n    if ((events[headEnterIndex][1].type === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.lineEnding || events[headEnterIndex][1].type === \"space\") && (events[tailExitIndex][1].type === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.lineEnding || events[tailExitIndex][1].type === \"space\")) {\n        index = headEnterIndex;\n        // And we have data.\n        while(++index < tailExitIndex){\n            if (events[index][1].type === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.codeTextData) {\n                // Then we have padding.\n                events[headEnterIndex][1].type = micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.codeTextPadding;\n                events[tailExitIndex][1].type = micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.codeTextPadding;\n                headEnterIndex += 2;\n                tailExitIndex -= 2;\n                break;\n            }\n        }\n    }\n    // Merge adjacent spaces and data.\n    index = headEnterIndex - 1;\n    tailExitIndex++;\n    while(++index <= tailExitIndex){\n        if (enter === undefined) {\n            if (index !== tailExitIndex && events[index][1].type !== micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.lineEnding) {\n                enter = index;\n            }\n        } else if (index === tailExitIndex || events[index][1].type === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.lineEnding) {\n            events[enter][1].type = micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.codeTextData;\n            if (index !== enter + 2) {\n                events[enter][1].end = events[index - 1][1].end;\n                events.splice(enter + 2, index - enter - 2);\n                tailExitIndex -= index - enter - 2;\n                index = enter + 2;\n            }\n            enter = undefined;\n        }\n    }\n    return events;\n}\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Previous}\n */ function previous(code) {\n    // If there is a previous code, there will always be a tail.\n    return code !== micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.graveAccent || this.events[this.events.length - 1][1].type === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.characterEscape;\n}\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */ function tokenizeCodeText(effects, ok, nok) {\n    const self = this;\n    let sizeOpen = 0;\n    /** @type {number} */ let size;\n    /** @type {Token} */ let token;\n    return start;\n    /**\n   * Start of code (text).\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * > | \\`a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */ function start(code) {\n        (0,devlop__WEBPACK_IMPORTED_MODULE_2__.ok)(code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.graveAccent, \"expected `` ` ``\");\n        (0,devlop__WEBPACK_IMPORTED_MODULE_2__.ok)(previous.call(self, self.previous), \"expected correct previous\");\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.codeText);\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.codeTextSequence);\n        return sequenceOpen(code);\n    }\n    /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */ function sequenceOpen(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.graveAccent) {\n            effects.consume(code);\n            sizeOpen++;\n            return sequenceOpen;\n        }\n        effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.codeTextSequence);\n        return between(code);\n    }\n    /**\n   * Between something and something else.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^^\n   * ```\n   *\n   * @type {State}\n   */ function between(code) {\n        // EOF.\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof) {\n            return nok(code);\n        }\n        // To do: next major: don’t do spaces in resolve, but when compiling,\n        // like `markdown-rs`.\n        // Tabs don’t work, and virtual spaces don’t make sense.\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.space) {\n            effects.enter(\"space\");\n            effects.consume(code);\n            effects.exit(\"space\");\n            return between;\n        }\n        // Closing fence? Could also be data.\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.graveAccent) {\n            token = effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.codeTextSequence);\n            size = 0;\n            return sequenceClose(code);\n        }\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownLineEnding)(code)) {\n            effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.lineEnding);\n            effects.consume(code);\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.lineEnding);\n            return between;\n        }\n        // Data.\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.codeTextData);\n        return data(code);\n    }\n    /**\n   * In data.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */ function data(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.space || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.graveAccent || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownLineEnding)(code)) {\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.codeTextData);\n            return between(code);\n        }\n        effects.consume(code);\n        return data;\n    }\n    /**\n   * In closing sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */ function sequenceClose(code) {\n        // More.\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.graveAccent) {\n            effects.consume(code);\n            size++;\n            return sequenceClose;\n        }\n        // Done!\n        if (size === sizeOpen) {\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.codeTextSequence);\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.codeText);\n            return ok(code);\n        }\n        // More or less accents: mark as data.\n        token.type = micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.codeTextData;\n        return data(code);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/code-text.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/content.js":
/*!**************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/content.js ***!
  \**************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   content: () => (/* binding */ content)\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! devlop */ \"(rsc)/../../node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js\");\n/* harmony import */ var micromark_factory_space__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! micromark-factory-space */ \"(rsc)/../../node_modules/.pnpm/micromark-factory-space@2.0.1/node_modules/micromark-factory-space/dev/index.js\");\n/* harmony import */ var micromark_util_character__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! micromark-util-character */ \"(rsc)/../../node_modules/.pnpm/micromark-util-character@2.1.1/node_modules/micromark-util-character/dev/index.js\");\n/* harmony import */ var micromark_util_subtokenize__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! micromark-util-subtokenize */ \"(rsc)/../../node_modules/.pnpm/micromark-util-subtokenize@2.1.0/node_modules/micromark-util-subtokenize/dev/index.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! micromark-util-symbol */ \"(rsc)/../../node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/codes.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! micromark-util-symbol */ \"(rsc)/../../node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/types.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! micromark-util-symbol */ \"(rsc)/../../node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/constants.js\");\n/**\n * @import {\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */ \n\n\n\n\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */ const content = {\n    resolve: resolveContent,\n    tokenize: tokenizeContent\n};\n/** @type {Construct} */ const continuationConstruct = {\n    partial: true,\n    tokenize: tokenizeContinuation\n};\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */ function resolveContent(events) {\n    (0,micromark_util_subtokenize__WEBPACK_IMPORTED_MODULE_0__.subtokenize)(events);\n    return events;\n}\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */ function tokenizeContent(effects, ok) {\n    /** @type {Token | undefined} */ let previous;\n    return chunkStart;\n    /**\n   * Before a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */ function chunkStart(code) {\n        (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(code !== micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.eof && !(0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownLineEnding)(code), \"expected no eof or eol\");\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__.types.content);\n        previous = effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__.types.chunkContent, {\n            contentType: micromark_util_symbol__WEBPACK_IMPORTED_MODULE_5__.constants.contentTypeContent\n        });\n        return chunkInside(code);\n    }\n    /**\n   * In a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^^^\n   * ```\n   *\n   * @type {State}\n   */ function chunkInside(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.eof) {\n            return contentEnd(code);\n        }\n        // To do: in `markdown-rs`, each line is parsed on its own, and everything\n        // is stitched together resolving.\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownLineEnding)(code)) {\n            return effects.check(continuationConstruct, contentContinue, contentEnd)(code);\n        }\n        // Data.\n        effects.consume(code);\n        return chunkInside;\n    }\n    /**\n   *\n   *\n   * @type {State}\n   */ function contentEnd(code) {\n        effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__.types.chunkContent);\n        effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__.types.content);\n        return ok(code);\n    }\n    /**\n   *\n   *\n   * @type {State}\n   */ function contentContinue(code) {\n        (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownLineEnding)(code), \"expected eol\");\n        effects.consume(code);\n        effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__.types.chunkContent);\n        (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(previous, \"expected previous token\");\n        previous.next = effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__.types.chunkContent, {\n            contentType: micromark_util_symbol__WEBPACK_IMPORTED_MODULE_5__.constants.contentTypeContent,\n            previous\n        });\n        previous = previous.next;\n        return chunkInside;\n    }\n}\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */ function tokenizeContinuation(effects, ok, nok) {\n    const self = this;\n    return startLookahead;\n    /**\n   *\n   *\n   * @type {State}\n   */ function startLookahead(code) {\n        (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownLineEnding)(code), \"expected a line ending\");\n        effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__.types.chunkContent);\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__.types.lineEnding);\n        effects.consume(code);\n        effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__.types.lineEnding);\n        return (0,micromark_factory_space__WEBPACK_IMPORTED_MODULE_6__.factorySpace)(effects, prefixed, micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__.types.linePrefix);\n    }\n    /**\n   *\n   *\n   * @type {State}\n   */ function prefixed(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.eof || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownLineEnding)(code)) {\n            return nok(code);\n        }\n        // Always populated by defaults.\n        (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(self.parser.constructs.disable.null, \"expected `disable.null` to be populated\");\n        const tail = self.events[self.events.length - 1];\n        if (!self.parser.constructs.disable.null.includes(\"codeIndented\") && tail && tail[1].type === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__.types.linePrefix && tail[2].sliceSerialize(tail[1], true).length >= micromark_util_symbol__WEBPACK_IMPORTED_MODULE_5__.constants.tabSize) {\n            return ok(code);\n        }\n        return effects.interrupt(self.parser.constructs.flow, nok, ok)(code);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/content.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/definition.js":
/*!*****************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/definition.js ***!
  \*****************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   definition: () => (/* binding */ definition)\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! devlop */ \"(rsc)/../../node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js\");\n/* harmony import */ var micromark_factory_destination__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! micromark-factory-destination */ \"(rsc)/../../node_modules/.pnpm/micromark-factory-destination@2.0.1/node_modules/micromark-factory-destination/dev/index.js\");\n/* harmony import */ var micromark_factory_label__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! micromark-factory-label */ \"(rsc)/../../node_modules/.pnpm/micromark-factory-label@2.0.1/node_modules/micromark-factory-label/dev/index.js\");\n/* harmony import */ var micromark_factory_space__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! micromark-factory-space */ \"(rsc)/../../node_modules/.pnpm/micromark-factory-space@2.0.1/node_modules/micromark-factory-space/dev/index.js\");\n/* harmony import */ var micromark_factory_title__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! micromark-factory-title */ \"(rsc)/../../node_modules/.pnpm/micromark-factory-title@2.0.1/node_modules/micromark-factory-title/dev/index.js\");\n/* harmony import */ var micromark_factory_whitespace__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! micromark-factory-whitespace */ \"(rsc)/../../node_modules/.pnpm/micromark-factory-whitespace@2.0.1/node_modules/micromark-factory-whitespace/dev/index.js\");\n/* harmony import */ var micromark_util_character__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! micromark-util-character */ \"(rsc)/../../node_modules/.pnpm/micromark-util-character@2.1.1/node_modules/micromark-util-character/dev/index.js\");\n/* harmony import */ var micromark_util_normalize_identifier__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! micromark-util-normalize-identifier */ \"(rsc)/../../node_modules/.pnpm/micromark-util-normalize-identifier@2.0.1/node_modules/micromark-util-normalize-identifier/dev/index.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! micromark-util-symbol */ \"(rsc)/../../node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/types.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! micromark-util-symbol */ \"(rsc)/../../node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/codes.js\");\n/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */ \n\n\n\n\n\n\n\n\n/** @type {Construct} */ const definition = {\n    name: \"definition\",\n    tokenize: tokenizeDefinition\n};\n/** @type {Construct} */ const titleBefore = {\n    partial: true,\n    tokenize: tokenizeTitleBefore\n};\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */ function tokenizeDefinition(effects, ok, nok) {\n    const self = this;\n    /** @type {string} */ let identifier;\n    return start;\n    /**\n   * At start of a definition.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */ function start(code) {\n        // Do not interrupt paragraphs (but do follow definitions).\n        // To do: do `interrupt` the way `markdown-rs` does.\n        // To do: parse whitespace the way `markdown-rs` does.\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.definition);\n        return before(code);\n    }\n    /**\n   * After optional whitespace, at `[`.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */ function before(code) {\n        // To do: parse whitespace the way `markdown-rs` does.\n        (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.leftSquareBracket, \"expected `[`\");\n        return micromark_factory_label__WEBPACK_IMPORTED_MODULE_3__.factoryLabel.call(self, effects, labelAfter, // Note: we don’t need to reset the way `markdown-rs` does.\n        nok, micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.definitionLabel, micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.definitionLabelMarker, micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.definitionLabelString)(code);\n    }\n    /**\n   * After label.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */ function labelAfter(code) {\n        identifier = (0,micromark_util_normalize_identifier__WEBPACK_IMPORTED_MODULE_4__.normalizeIdentifier)(self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1));\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.colon) {\n            effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.definitionMarker);\n            effects.consume(code);\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.definitionMarker);\n            return markerAfter;\n        }\n        return nok(code);\n    }\n    /**\n   * After marker.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */ function markerAfter(code) {\n        // Note: whitespace is optional.\n        return (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_5__.markdownLineEndingOrSpace)(code) ? (0,micromark_factory_whitespace__WEBPACK_IMPORTED_MODULE_6__.factoryWhitespace)(effects, destinationBefore)(code) : destinationBefore(code);\n    }\n    /**\n   * Before destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */ function destinationBefore(code) {\n        return (0,micromark_factory_destination__WEBPACK_IMPORTED_MODULE_7__.factoryDestination)(effects, destinationAfter, // Note: we don’t need to reset the way `markdown-rs` does.\n        nok, micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.definitionDestination, micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.definitionDestinationLiteral, micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.definitionDestinationLiteralMarker, micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.definitionDestinationRaw, micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.definitionDestinationString)(code);\n    }\n    /**\n   * After destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */ function destinationAfter(code) {\n        return effects.attempt(titleBefore, after, after)(code);\n    }\n    /**\n   * After definition.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */ function after(code) {\n        return (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_5__.markdownSpace)(code) ? (0,micromark_factory_space__WEBPACK_IMPORTED_MODULE_8__.factorySpace)(effects, afterWhitespace, micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.whitespace)(code) : afterWhitespace(code);\n    }\n    /**\n   * After definition, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */ function afterWhitespace(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.eof || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_5__.markdownLineEnding)(code)) {\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.definition);\n            // Note: we don’t care about uniqueness.\n            // It’s likely that that doesn’t happen very frequently.\n            // It is more likely that it wastes precious time.\n            self.parser.defined.push(identifier);\n            // To do: `markdown-rs` interrupt.\n            // // You’d be interrupting.\n            // tokenizer.interrupt = true\n            return ok(code);\n        }\n        return nok(code);\n    }\n}\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */ function tokenizeTitleBefore(effects, ok, nok) {\n    return titleBefore;\n    /**\n   * After destination, at whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */ function titleBefore(code) {\n        return (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_5__.markdownLineEndingOrSpace)(code) ? (0,micromark_factory_whitespace__WEBPACK_IMPORTED_MODULE_6__.factoryWhitespace)(effects, beforeMarker)(code) : nok(code);\n    }\n    /**\n   * At title.\n   *\n   * ```markdown\n   *   | [a]: b\n   * > | \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */ function beforeMarker(code) {\n        return (0,micromark_factory_title__WEBPACK_IMPORTED_MODULE_9__.factoryTitle)(effects, titleAfter, nok, micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.definitionTitle, micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.definitionTitleMarker, micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.definitionTitleString)(code);\n    }\n    /**\n   * After title.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */ function titleAfter(code) {\n        return (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_5__.markdownSpace)(code) ? (0,micromark_factory_space__WEBPACK_IMPORTED_MODULE_8__.factorySpace)(effects, titleAfterOptionalWhitespace, micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.whitespace)(code) : titleAfterOptionalWhitespace(code);\n    }\n    /**\n   * After title, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */ function titleAfterOptionalWhitespace(code) {\n        return code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.eof || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_5__.markdownLineEnding)(code) ? ok(code) : nok(code);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/definition.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/hard-break-escape.js":
/*!************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/hard-break-escape.js ***!
  \************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   hardBreakEscape: () => (/* binding */ hardBreakEscape)\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! devlop */ \"(rsc)/../../node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js\");\n/* harmony import */ var micromark_util_character__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! micromark-util-character */ \"(rsc)/../../node_modules/.pnpm/micromark-util-character@2.1.1/node_modules/micromark-util-character/dev/index.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! micromark-util-symbol */ \"(rsc)/../../node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/codes.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! micromark-util-symbol */ \"(rsc)/../../node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/types.js\");\n/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */ \n\n\n/** @type {Construct} */ const hardBreakEscape = {\n    name: \"hardBreakEscape\",\n    tokenize: tokenizeHardBreakEscape\n};\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */ function tokenizeHardBreakEscape(effects, ok, nok) {\n    return start;\n    /**\n   * Start of a hard break (escape).\n   *\n   * ```markdown\n   * > | a\\\n   *      ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */ function start(code) {\n        (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.backslash, \"expected `\\\\`\");\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.hardBreakEscape);\n        effects.consume(code);\n        return after;\n    }\n    /**\n   * After `\\`, at eol.\n   *\n   * ```markdown\n   * > | a\\\n   *       ^\n   *   | b\n   * ```\n   *\n   *  @type {State}\n   */ function after(code) {\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownLineEnding)(code)) {\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.hardBreakEscape);\n            return ok(code);\n        }\n        return nok(code);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21pY3JvbWFyay1jb3JlLWNvbW1vbm1hcmtAMi4wLjMvbm9kZV9tb2R1bGVzL21pY3JvbWFyay1jb3JlLWNvbW1vbm1hcmsvZGV2L2xpYi9oYXJkLWJyZWFrLWVzY2FwZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBOzs7Ozs7O0NBT0MsR0FFa0M7QUFDd0I7QUFDVDtBQUVsRCxzQkFBc0IsR0FDZixNQUFNSyxrQkFBa0I7SUFDN0JDLE1BQU07SUFDTkMsVUFBVUM7QUFDWixFQUFDO0FBRUQ7Ozs7Q0FJQyxHQUNELFNBQVNBLHdCQUF3QkMsT0FBTyxFQUFFVCxFQUFFLEVBQUVVLEdBQUc7SUFDL0MsT0FBT0M7SUFFUDs7Ozs7Ozs7OztHQVVDLEdBQ0QsU0FBU0EsTUFBTUMsSUFBSTtRQUNqQlgsMENBQU1BLENBQUNXLFNBQVNULHdEQUFLQSxDQUFDVSxTQUFTLEVBQUU7UUFDakNKLFFBQVFLLEtBQUssQ0FBQ1Ysd0RBQUtBLENBQUNDLGVBQWU7UUFDbkNJLFFBQVFNLE9BQU8sQ0FBQ0g7UUFDaEIsT0FBT0k7SUFDVDtJQUVBOzs7Ozs7Ozs7O0dBVUMsR0FDRCxTQUFTQSxNQUFNSixJQUFJO1FBQ2pCLElBQUlWLDRFQUFrQkEsQ0FBQ1UsT0FBTztZQUM1QkgsUUFBUVEsSUFBSSxDQUFDYix3REFBS0EsQ0FBQ0MsZUFBZTtZQUNsQyxPQUFPTCxHQUFHWTtRQUNaO1FBRUEsT0FBT0YsSUFBSUU7SUFDYjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2ViLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9taWNyb21hcmstY29yZS1jb21tb25tYXJrQDIuMC4zL25vZGVfbW9kdWxlcy9taWNyb21hcmstY29yZS1jb21tb25tYXJrL2Rldi9saWIvaGFyZC1icmVhay1lc2NhcGUuanM/MTQyNyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBpbXBvcnQge1xuICogICBDb25zdHJ1Y3QsXG4gKiAgIFN0YXRlLFxuICogICBUb2tlbml6ZUNvbnRleHQsXG4gKiAgIFRva2VuaXplclxuICogfSBmcm9tICdtaWNyb21hcmstdXRpbC10eXBlcydcbiAqL1xuXG5pbXBvcnQge29rIGFzIGFzc2VydH0gZnJvbSAnZGV2bG9wJ1xuaW1wb3J0IHttYXJrZG93bkxpbmVFbmRpbmd9IGZyb20gJ21pY3JvbWFyay11dGlsLWNoYXJhY3RlcidcbmltcG9ydCB7Y29kZXMsIHR5cGVzfSBmcm9tICdtaWNyb21hcmstdXRpbC1zeW1ib2wnXG5cbi8qKiBAdHlwZSB7Q29uc3RydWN0fSAqL1xuZXhwb3J0IGNvbnN0IGhhcmRCcmVha0VzY2FwZSA9IHtcbiAgbmFtZTogJ2hhcmRCcmVha0VzY2FwZScsXG4gIHRva2VuaXplOiB0b2tlbml6ZUhhcmRCcmVha0VzY2FwZVxufVxuXG4vKipcbiAqIEB0aGlzIHtUb2tlbml6ZUNvbnRleHR9XG4gKiAgIENvbnRleHQuXG4gKiBAdHlwZSB7VG9rZW5pemVyfVxuICovXG5mdW5jdGlvbiB0b2tlbml6ZUhhcmRCcmVha0VzY2FwZShlZmZlY3RzLCBvaywgbm9rKSB7XG4gIHJldHVybiBzdGFydFxuXG4gIC8qKlxuICAgKiBTdGFydCBvZiBhIGhhcmQgYnJlYWsgKGVzY2FwZSkuXG4gICAqXG4gICAqIGBgYG1hcmtkb3duXG4gICAqID4gfCBhXFxcbiAgICogICAgICBeXG4gICAqICAgfCBiXG4gICAqIGBgYFxuICAgKlxuICAgKiBAdHlwZSB7U3RhdGV9XG4gICAqL1xuICBmdW5jdGlvbiBzdGFydChjb2RlKSB7XG4gICAgYXNzZXJ0KGNvZGUgPT09IGNvZGVzLmJhY2tzbGFzaCwgJ2V4cGVjdGVkIGBcXFxcYCcpXG4gICAgZWZmZWN0cy5lbnRlcih0eXBlcy5oYXJkQnJlYWtFc2NhcGUpXG4gICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgcmV0dXJuIGFmdGVyXG4gIH1cblxuICAvKipcbiAgICogQWZ0ZXIgYFxcYCwgYXQgZW9sLlxuICAgKlxuICAgKiBgYGBtYXJrZG93blxuICAgKiA+IHwgYVxcXG4gICAqICAgICAgIF5cbiAgICogICB8IGJcbiAgICogYGBgXG4gICAqXG4gICAqICBAdHlwZSB7U3RhdGV9XG4gICAqL1xuICBmdW5jdGlvbiBhZnRlcihjb2RlKSB7XG4gICAgaWYgKG1hcmtkb3duTGluZUVuZGluZyhjb2RlKSkge1xuICAgICAgZWZmZWN0cy5leGl0KHR5cGVzLmhhcmRCcmVha0VzY2FwZSlcbiAgICAgIHJldHVybiBvayhjb2RlKVxuICAgIH1cblxuICAgIHJldHVybiBub2soY29kZSlcbiAgfVxufVxuIl0sIm5hbWVzIjpbIm9rIiwiYXNzZXJ0IiwibWFya2Rvd25MaW5lRW5kaW5nIiwiY29kZXMiLCJ0eXBlcyIsImhhcmRCcmVha0VzY2FwZSIsIm5hbWUiLCJ0b2tlbml6ZSIsInRva2VuaXplSGFyZEJyZWFrRXNjYXBlIiwiZWZmZWN0cyIsIm5vayIsInN0YXJ0IiwiY29kZSIsImJhY2tzbGFzaCIsImVudGVyIiwiY29uc3VtZSIsImFmdGVyIiwiZXhpdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/hard-break-escape.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/heading-atx.js":
/*!******************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/heading-atx.js ***!
  \******************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   headingAtx: () => (/* binding */ headingAtx)\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! devlop */ \"(rsc)/../../node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js\");\n/* harmony import */ var micromark_factory_space__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! micromark-factory-space */ \"(rsc)/../../node_modules/.pnpm/micromark-factory-space@2.0.1/node_modules/micromark-factory-space/dev/index.js\");\n/* harmony import */ var micromark_util_character__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! micromark-util-character */ \"(rsc)/../../node_modules/.pnpm/micromark-util-character@2.1.1/node_modules/micromark-util-character/dev/index.js\");\n/* harmony import */ var micromark_util_chunked__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! micromark-util-chunked */ \"(rsc)/../../node_modules/.pnpm/micromark-util-chunked@2.0.1/node_modules/micromark-util-chunked/dev/index.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! micromark-util-symbol */ \"(rsc)/../../node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/types.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! micromark-util-symbol */ \"(rsc)/../../node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/constants.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! micromark-util-symbol */ \"(rsc)/../../node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/codes.js\");\n/**\n * @import {\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */ \n\n\n\n\n/** @type {Construct} */ const headingAtx = {\n    name: \"headingAtx\",\n    resolve: resolveHeadingAtx,\n    tokenize: tokenizeHeadingAtx\n};\n/** @type {Resolver} */ function resolveHeadingAtx(events, context) {\n    let contentEnd = events.length - 2;\n    let contentStart = 3;\n    /** @type {Token} */ let content;\n    /** @type {Token} */ let text;\n    // Prefix whitespace, part of the opening.\n    if (events[contentStart][1].type === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.whitespace) {\n        contentStart += 2;\n    }\n    // Suffix whitespace, part of the closing.\n    if (contentEnd - 2 > contentStart && events[contentEnd][1].type === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.whitespace) {\n        contentEnd -= 2;\n    }\n    if (events[contentEnd][1].type === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.atxHeadingSequence && (contentStart === contentEnd - 1 || contentEnd - 4 > contentStart && events[contentEnd - 2][1].type === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.whitespace)) {\n        contentEnd -= contentStart + 1 === contentEnd ? 2 : 4;\n    }\n    if (contentEnd > contentStart) {\n        content = {\n            type: micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.atxHeadingText,\n            start: events[contentStart][1].start,\n            end: events[contentEnd][1].end\n        };\n        text = {\n            type: micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.chunkText,\n            start: events[contentStart][1].start,\n            end: events[contentEnd][1].end,\n            contentType: micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.constants.contentTypeText\n        };\n        (0,micromark_util_chunked__WEBPACK_IMPORTED_MODULE_2__.splice)(events, contentStart, contentEnd - contentStart + 1, [\n            [\n                \"enter\",\n                content,\n                context\n            ],\n            [\n                \"enter\",\n                text,\n                context\n            ],\n            [\n                \"exit\",\n                text,\n                context\n            ],\n            [\n                \"exit\",\n                content,\n                context\n            ]\n        ]);\n    }\n    return events;\n}\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */ function tokenizeHeadingAtx(effects, ok, nok) {\n    let size = 0;\n    return start;\n    /**\n   * Start of a heading (atx).\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */ function start(code) {\n        // To do: parse indent like `markdown-rs`.\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.atxHeading);\n        return before(code);\n    }\n    /**\n   * After optional whitespace, at `#`.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */ function before(code) {\n        (0,devlop__WEBPACK_IMPORTED_MODULE_3__.ok)(code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__.codes.numberSign, \"expected `#`\");\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.atxHeadingSequence);\n        return sequenceOpen(code);\n    }\n    /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */ function sequenceOpen(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__.codes.numberSign && size++ < micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.constants.atxHeadingOpeningFenceSizeMax) {\n            effects.consume(code);\n            return sequenceOpen;\n        }\n        // Always at least one `#`.\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__.codes.eof || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_5__.markdownLineEndingOrSpace)(code)) {\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.atxHeadingSequence);\n            return atBreak(code);\n        }\n        return nok(code);\n    }\n    /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ## aa\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */ function atBreak(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__.codes.numberSign) {\n            effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.atxHeadingSequence);\n            return sequenceFurther(code);\n        }\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__.codes.eof || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_5__.markdownLineEnding)(code)) {\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.atxHeading);\n            // To do: interrupt like `markdown-rs`.\n            // // Feel free to interrupt.\n            // tokenizer.interrupt = false\n            return ok(code);\n        }\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_5__.markdownSpace)(code)) {\n            return (0,micromark_factory_space__WEBPACK_IMPORTED_MODULE_6__.factorySpace)(effects, atBreak, micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.whitespace)(code);\n        }\n        // To do: generate `data` tokens, add the `text` token later.\n        // Needs edit map, see: `markdown.rs`.\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.atxHeadingText);\n        return data(code);\n    }\n    /**\n   * In further sequence (after whitespace).\n   *\n   * Could be normal “visible” hashes in the heading or a final sequence.\n   *\n   * ```markdown\n   * > | ## aa ##\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */ function sequenceFurther(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__.codes.numberSign) {\n            effects.consume(code);\n            return sequenceFurther;\n        }\n        effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.atxHeadingSequence);\n        return atBreak(code);\n    }\n    /**\n   * In text.\n   *\n   * ```markdown\n   * > | ## aa\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */ function data(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__.codes.eof || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__.codes.numberSign || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_5__.markdownLineEndingOrSpace)(code)) {\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.atxHeadingText);\n            return atBreak(code);\n        }\n        effects.consume(code);\n        return data;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/heading-atx.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/html-flow.js":
/*!****************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/html-flow.js ***!
  \****************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   htmlFlow: () => (/* binding */ htmlFlow)\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! devlop */ \"(rsc)/../../node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js\");\n/* harmony import */ var micromark_util_character__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! micromark-util-character */ \"(rsc)/../../node_modules/.pnpm/micromark-util-character@2.1.1/node_modules/micromark-util-character/dev/index.js\");\n/* harmony import */ var micromark_util_html_tag_name__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! micromark-util-html-tag-name */ \"(rsc)/../../node_modules/.pnpm/micromark-util-html-tag-name@2.0.1/node_modules/micromark-util-html-tag-name/index.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! micromark-util-symbol */ \"(rsc)/../../node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/types.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! micromark-util-symbol */ \"(rsc)/../../node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/codes.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! micromark-util-symbol */ \"(rsc)/../../node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/constants.js\");\n/* harmony import */ var _blank_line_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./blank-line.js */ \"(rsc)/../../node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/blank-line.js\");\n/**\n * @import {\n *   Code,\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */ \n\n\n\n\n/** @type {Construct} */ const htmlFlow = {\n    concrete: true,\n    name: \"htmlFlow\",\n    resolveTo: resolveToHtmlFlow,\n    tokenize: tokenizeHtmlFlow\n};\n/** @type {Construct} */ const blankLineBefore = {\n    partial: true,\n    tokenize: tokenizeBlankLineBefore\n};\nconst nonLazyContinuationStart = {\n    partial: true,\n    tokenize: tokenizeNonLazyContinuationStart\n};\n/** @type {Resolver} */ function resolveToHtmlFlow(events) {\n    let index = events.length;\n    while(index--){\n        if (events[index][0] === \"enter\" && events[index][1].type === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.htmlFlow) {\n            break;\n        }\n    }\n    if (index > 1 && events[index - 2][1].type === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.linePrefix) {\n        // Add the prefix start to the HTML token.\n        events[index][1].start = events[index - 2][1].start;\n        // Add the prefix start to the HTML line token.\n        events[index + 1][1].start = events[index - 2][1].start;\n        // Remove the line prefix.\n        events.splice(index - 2, 2);\n    }\n    return events;\n}\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */ function tokenizeHtmlFlow(effects, ok, nok) {\n    const self = this;\n    /** @type {number} */ let marker;\n    /** @type {boolean} */ let closingTag;\n    /** @type {string} */ let buffer;\n    /** @type {number} */ let index;\n    /** @type {Code} */ let markerB;\n    return start;\n    /**\n   * Start of HTML (flow).\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */ function start(code) {\n        // To do: parse indent like `markdown-rs`.\n        return before(code);\n    }\n    /**\n   * At `<`, after optional whitespace.\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */ function before(code) {\n        (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.lessThan, \"expected `<`\");\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.htmlFlow);\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.htmlFlowData);\n        effects.consume(code);\n        return open;\n    }\n    /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | <x />\n   *      ^\n   * > | <!doctype>\n   *      ^\n   * > | <!--xxx-->\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */ function open(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.exclamationMark) {\n            effects.consume(code);\n            return declarationOpen;\n        }\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.slash) {\n            effects.consume(code);\n            closingTag = true;\n            return tagCloseStart;\n        }\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.questionMark) {\n            effects.consume(code);\n            marker = micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.constants.htmlInstruction;\n            // To do:\n            // tokenizer.concrete = true\n            // To do: use `markdown-rs` style interrupt.\n            // While we’re in an instruction instead of a declaration, we’re on a `?`\n            // right now, so we do need to search for `>`, similar to declarations.\n            return self.interrupt ? ok : continuationDeclarationInside;\n        }\n        // ASCII alphabetical.\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.asciiAlpha)(code)) {\n            (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(code !== null) // Always the case.\n            ;\n            effects.consume(code);\n            buffer = String.fromCharCode(code);\n            return tagName;\n        }\n        return nok(code);\n    }\n    /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *       ^\n   * > | <!--xxx-->\n   *       ^\n   * > | <![CDATA[>&<]]>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */ function declarationOpen(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.dash) {\n            effects.consume(code);\n            marker = micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.constants.htmlComment;\n            return commentOpenInside;\n        }\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.leftSquareBracket) {\n            effects.consume(code);\n            marker = micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.constants.htmlCdata;\n            index = 0;\n            return cdataOpenInside;\n        }\n        // ASCII alphabetical.\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.asciiAlpha)(code)) {\n            effects.consume(code);\n            marker = micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.constants.htmlDeclaration;\n            // // Do not form containers.\n            // tokenizer.concrete = true\n            return self.interrupt ? ok : continuationDeclarationInside;\n        }\n        return nok(code);\n    }\n    /**\n   * After `<!-`, inside a comment, at another `-`.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */ function commentOpenInside(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.dash) {\n            effects.consume(code);\n            // // Do not form containers.\n            // tokenizer.concrete = true\n            return self.interrupt ? ok : continuationDeclarationInside;\n        }\n        return nok(code);\n    }\n    /**\n   * After `<![`, inside CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *        ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */ function cdataOpenInside(code) {\n        const value = micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.constants.cdataOpeningString;\n        if (code === value.charCodeAt(index++)) {\n            effects.consume(code);\n            if (index === value.length) {\n                // // Do not form containers.\n                // tokenizer.concrete = true\n                return self.interrupt ? ok : continuation;\n            }\n            return cdataOpenInside;\n        }\n        return nok(code);\n    }\n    /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | </x>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */ function tagCloseStart(code) {\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.asciiAlpha)(code)) {\n            (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(code !== null) // Always the case.\n            ;\n            effects.consume(code);\n            buffer = String.fromCharCode(code);\n            return tagName;\n        }\n        return nok(code);\n    }\n    /**\n   * In tag name.\n   *\n   * ```markdown\n   * > | <ab>\n   *      ^^\n   * > | </ab>\n   *       ^^\n   * ```\n   *\n   * @type {State}\n   */ function tagName(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.eof || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.slash || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.greaterThan || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownLineEndingOrSpace)(code)) {\n            const slash = code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.slash;\n            const name = buffer.toLowerCase();\n            if (!slash && !closingTag && micromark_util_html_tag_name__WEBPACK_IMPORTED_MODULE_5__.htmlRawNames.includes(name)) {\n                marker = micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.constants.htmlRaw;\n                // // Do not form containers.\n                // tokenizer.concrete = true\n                return self.interrupt ? ok(code) : continuation(code);\n            }\n            if (micromark_util_html_tag_name__WEBPACK_IMPORTED_MODULE_5__.htmlBlockNames.includes(buffer.toLowerCase())) {\n                marker = micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.constants.htmlBasic;\n                if (slash) {\n                    effects.consume(code);\n                    return basicSelfClosing;\n                }\n                // // Do not form containers.\n                // tokenizer.concrete = true\n                return self.interrupt ? ok(code) : continuation(code);\n            }\n            marker = micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.constants.htmlComplete;\n            // Do not support complete HTML when interrupting.\n            return self.interrupt && !self.parser.lazy[self.now().line] ? nok(code) : closingTag ? completeClosingTagAfter(code) : completeAttributeNameBefore(code);\n        }\n        // ASCII alphanumerical and `-`.\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.dash || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.asciiAlphanumeric)(code)) {\n            effects.consume(code);\n            buffer += String.fromCharCode(code);\n            return tagName;\n        }\n        return nok(code);\n    }\n    /**\n   * After closing slash of a basic tag name.\n   *\n   * ```markdown\n   * > | <div/>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */ function basicSelfClosing(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.greaterThan) {\n            effects.consume(code);\n            // // Do not form containers.\n            // tokenizer.concrete = true\n            return self.interrupt ? ok : continuation;\n        }\n        return nok(code);\n    }\n    /**\n   * After closing slash of a complete tag name.\n   *\n   * ```markdown\n   * > | <x/>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */ function completeClosingTagAfter(code) {\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownSpace)(code)) {\n            effects.consume(code);\n            return completeClosingTagAfter;\n        }\n        return completeEnd(code);\n    }\n    /**\n   * At an attribute name.\n   *\n   * At first, this state is used after a complete tag name, after whitespace,\n   * where it expects optional attributes or the end of the tag.\n   * It is also reused after attributes, when expecting more optional\n   * attributes.\n   *\n   * ```markdown\n   * > | <a />\n   *        ^\n   * > | <a :b>\n   *        ^\n   * > | <a _b>\n   *        ^\n   * > | <a b>\n   *        ^\n   * > | <a >\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */ function completeAttributeNameBefore(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.slash) {\n            effects.consume(code);\n            return completeEnd;\n        }\n        // ASCII alphanumerical and `:` and `_`.\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.colon || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.underscore || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.asciiAlpha)(code)) {\n            effects.consume(code);\n            return completeAttributeName;\n        }\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownSpace)(code)) {\n            effects.consume(code);\n            return completeAttributeNameBefore;\n        }\n        return completeEnd(code);\n    }\n    /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | <a :b>\n   *         ^\n   * > | <a _b>\n   *         ^\n   * > | <a b>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */ function completeAttributeName(code) {\n        // ASCII alphanumerical and `-`, `.`, `:`, and `_`.\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.dash || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.dot || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.colon || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.underscore || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.asciiAlphanumeric)(code)) {\n            effects.consume(code);\n            return completeAttributeName;\n        }\n        return completeAttributeNameAfter(code);\n    }\n    /**\n   * After attribute name, at an optional initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b>\n   *         ^\n   * > | <a b=c>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */ function completeAttributeNameAfter(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.equalsTo) {\n            effects.consume(code);\n            return completeAttributeValueBefore;\n        }\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownSpace)(code)) {\n            effects.consume(code);\n            return completeAttributeNameAfter;\n        }\n        return completeAttributeNameBefore(code);\n    }\n    /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * > | <a b=\"c\">\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */ function completeAttributeValueBefore(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.eof || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.lessThan || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.equalsTo || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.greaterThan || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.graveAccent) {\n            return nok(code);\n        }\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.quotationMark || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.apostrophe) {\n            effects.consume(code);\n            markerB = code;\n            return completeAttributeValueQuoted;\n        }\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownSpace)(code)) {\n            effects.consume(code);\n            return completeAttributeValueBefore;\n        }\n        return completeAttributeValueUnquoted(code);\n    }\n    /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *           ^\n   * > | <a b='c'>\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */ function completeAttributeValueQuoted(code) {\n        if (code === markerB) {\n            effects.consume(code);\n            markerB = null;\n            return completeAttributeValueQuotedAfter;\n        }\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.eof || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownLineEnding)(code)) {\n            return nok(code);\n        }\n        effects.consume(code);\n        return completeAttributeValueQuoted;\n    }\n    /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */ function completeAttributeValueUnquoted(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.eof || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.quotationMark || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.apostrophe || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.slash || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.lessThan || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.equalsTo || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.greaterThan || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.graveAccent || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownLineEndingOrSpace)(code)) {\n            return completeAttributeNameAfter(code);\n        }\n        effects.consume(code);\n        return completeAttributeValueUnquoted;\n    }\n    /**\n   * After double or single quoted attribute value, before whitespace or the\n   * end of the tag.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */ function completeAttributeValueQuotedAfter(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.slash || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.greaterThan || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownSpace)(code)) {\n            return completeAttributeNameBefore(code);\n        }\n        return nok(code);\n    }\n    /**\n   * In certain circumstances of a complete tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */ function completeEnd(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.greaterThan) {\n            effects.consume(code);\n            return completeAfter;\n        }\n        return nok(code);\n    }\n    /**\n   * After `>` in a complete tag.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */ function completeAfter(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.eof || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownLineEnding)(code)) {\n            // // Do not form containers.\n            // tokenizer.concrete = true\n            return continuation(code);\n        }\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownSpace)(code)) {\n            effects.consume(code);\n            return completeAfter;\n        }\n        return nok(code);\n    }\n    /**\n   * In continuation of any HTML kind.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */ function continuation(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.dash && marker === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.constants.htmlComment) {\n            effects.consume(code);\n            return continuationCommentInside;\n        }\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.lessThan && marker === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.constants.htmlRaw) {\n            effects.consume(code);\n            return continuationRawTagOpen;\n        }\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.greaterThan && marker === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.constants.htmlDeclaration) {\n            effects.consume(code);\n            return continuationClose;\n        }\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.questionMark && marker === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.constants.htmlInstruction) {\n            effects.consume(code);\n            return continuationDeclarationInside;\n        }\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.rightSquareBracket && marker === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.constants.htmlCdata) {\n            effects.consume(code);\n            return continuationCdataInside;\n        }\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownLineEnding)(code) && (marker === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.constants.htmlBasic || marker === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.constants.htmlComplete)) {\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.htmlFlowData);\n            return effects.check(blankLineBefore, continuationAfter, continuationStart)(code);\n        }\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.eof || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownLineEnding)(code)) {\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.htmlFlowData);\n            return continuationStart(code);\n        }\n        effects.consume(code);\n        return continuation;\n    }\n    /**\n   * In continuation, at eol.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */ function continuationStart(code) {\n        return effects.check(nonLazyContinuationStart, continuationStartNonLazy, continuationAfter)(code);\n    }\n    /**\n   * In continuation, at eol, before non-lazy content.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */ function continuationStartNonLazy(code) {\n        (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownLineEnding)(code));\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.lineEnding);\n        effects.consume(code);\n        effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.lineEnding);\n        return continuationBefore;\n    }\n    /**\n   * In continuation, before non-lazy content.\n   *\n   * ```markdown\n   *   | <x>\n   * > | asd\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */ function continuationBefore(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.eof || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownLineEnding)(code)) {\n            return continuationStart(code);\n        }\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.htmlFlowData);\n        return continuation(code);\n    }\n    /**\n   * In comment continuation, after one `-`, expecting another.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */ function continuationCommentInside(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.dash) {\n            effects.consume(code);\n            return continuationDeclarationInside;\n        }\n        return continuation(code);\n    }\n    /**\n   * In raw continuation, after `<`, at `/`.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                            ^\n   * ```\n   *\n   * @type {State}\n   */ function continuationRawTagOpen(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.slash) {\n            effects.consume(code);\n            buffer = \"\";\n            return continuationRawEndTag;\n        }\n        return continuation(code);\n    }\n    /**\n   * In raw continuation, after `</`, in a raw tag name.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                             ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */ function continuationRawEndTag(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.greaterThan) {\n            const name = buffer.toLowerCase();\n            if (micromark_util_html_tag_name__WEBPACK_IMPORTED_MODULE_5__.htmlRawNames.includes(name)) {\n                effects.consume(code);\n                return continuationClose;\n            }\n            return continuation(code);\n        }\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.asciiAlpha)(code) && buffer.length < micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.constants.htmlRawSizeMax) {\n            (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(code !== null) // Always the case.\n            ;\n            effects.consume(code);\n            buffer += String.fromCharCode(code);\n            return continuationRawEndTag;\n        }\n        return continuation(code);\n    }\n    /**\n   * In cdata continuation, after `]`, expecting `]>`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *                  ^\n   * ```\n   *\n   * @type {State}\n   */ function continuationCdataInside(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.rightSquareBracket) {\n            effects.consume(code);\n            return continuationDeclarationInside;\n        }\n        return continuation(code);\n    }\n    /**\n   * In declaration or instruction continuation, at `>`.\n   *\n   * ```markdown\n   * > | <!-->\n   *         ^\n   * > | <?>\n   *       ^\n   * > | <!q>\n   *        ^\n   * > | <!--ab-->\n   *             ^\n   * > | <![CDATA[>&<]]>\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */ function continuationDeclarationInside(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.greaterThan) {\n            effects.consume(code);\n            return continuationClose;\n        }\n        // More dashes.\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.dash && marker === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.constants.htmlComment) {\n            effects.consume(code);\n            return continuationDeclarationInside;\n        }\n        return continuation(code);\n    }\n    /**\n   * In closed continuation: everything we get until the eol/eof is part of it.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */ function continuationClose(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.eof || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownLineEnding)(code)) {\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.htmlFlowData);\n            return continuationAfter(code);\n        }\n        effects.consume(code);\n        return continuationClose;\n    }\n    /**\n   * Done.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */ function continuationAfter(code) {\n        effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.htmlFlow);\n        // // Feel free to interrupt.\n        // tokenizer.interrupt = false\n        // // No longer concrete.\n        // tokenizer.concrete = false\n        return ok(code);\n    }\n}\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */ function tokenizeNonLazyContinuationStart(effects, ok, nok) {\n    const self = this;\n    return start;\n    /**\n   * At eol, before continuation.\n   *\n   * ```markdown\n   * > | * ```js\n   *            ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */ function start(code) {\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownLineEnding)(code)) {\n            effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.lineEnding);\n            effects.consume(code);\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.lineEnding);\n            return after;\n        }\n        return nok(code);\n    }\n    /**\n   * A continuation.\n   *\n   * ```markdown\n   *   | * ```js\n   * > | b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */ function after(code) {\n        return self.parser.lazy[self.now().line] ? nok(code) : ok(code);\n    }\n}\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */ function tokenizeBlankLineBefore(effects, ok, nok) {\n    return start;\n    /**\n   * Before eol, expecting blank line.\n   *\n   * ```markdown\n   * > | <div>\n   *          ^\n   *   |\n   * ```\n   *\n   * @type {State}\n   */ function start(code) {\n        (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownLineEnding)(code), \"expected a line ending\");\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.lineEnding);\n        effects.consume(code);\n        effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.lineEnding);\n        return effects.attempt(_blank_line_js__WEBPACK_IMPORTED_MODULE_6__.blankLine, ok, nok);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/html-flow.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/html-text.js":
/*!****************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/html-text.js ***!
  \****************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   htmlText: () => (/* binding */ htmlText)\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! devlop */ \"(rsc)/../../node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js\");\n/* harmony import */ var micromark_factory_space__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! micromark-factory-space */ \"(rsc)/../../node_modules/.pnpm/micromark-factory-space@2.0.1/node_modules/micromark-factory-space/dev/index.js\");\n/* harmony import */ var micromark_util_character__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! micromark-util-character */ \"(rsc)/../../node_modules/.pnpm/micromark-util-character@2.1.1/node_modules/micromark-util-character/dev/index.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! micromark-util-symbol */ \"(rsc)/../../node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/codes.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! micromark-util-symbol */ \"(rsc)/../../node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/types.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! micromark-util-symbol */ \"(rsc)/../../node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/constants.js\");\n/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */ \n\n\n\n/** @type {Construct} */ const htmlText = {\n    name: \"htmlText\",\n    tokenize: tokenizeHtmlText\n};\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */ function tokenizeHtmlText(effects, ok, nok) {\n    const self = this;\n    /** @type {NonNullable<Code> | undefined} */ let marker;\n    /** @type {number} */ let index;\n    /** @type {State} */ let returnState;\n    return start;\n    /**\n   * Start of HTML (text).\n   *\n   * ```markdown\n   * > | a <b> c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */ function start(code) {\n        (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.lessThan, \"expected `<`\");\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.htmlText);\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.htmlTextData);\n        effects.consume(code);\n        return open;\n    }\n    /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | a <b> c\n   *        ^\n   * > | a <!doctype> c\n   *        ^\n   * > | a <!--b--> c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */ function open(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.exclamationMark) {\n            effects.consume(code);\n            return declarationOpen;\n        }\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.slash) {\n            effects.consume(code);\n            return tagCloseStart;\n        }\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.questionMark) {\n            effects.consume(code);\n            return instruction;\n        }\n        // ASCII alphabetical.\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.asciiAlpha)(code)) {\n            effects.consume(code);\n            return tagOpen;\n        }\n        return nok(code);\n    }\n    /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | a <!doctype> c\n   *         ^\n   * > | a <!--b--> c\n   *         ^\n   * > | a <![CDATA[>&<]]> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */ function declarationOpen(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.dash) {\n            effects.consume(code);\n            return commentOpenInside;\n        }\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.leftSquareBracket) {\n            effects.consume(code);\n            index = 0;\n            return cdataOpenInside;\n        }\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.asciiAlpha)(code)) {\n            effects.consume(code);\n            return declaration;\n        }\n        return nok(code);\n    }\n    /**\n   * In a comment, after `<!-`, at another `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */ function commentOpenInside(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.dash) {\n            effects.consume(code);\n            return commentEnd;\n        }\n        return nok(code);\n    }\n    /**\n   * In comment.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */ function comment(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof) {\n            return nok(code);\n        }\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.dash) {\n            effects.consume(code);\n            return commentClose;\n        }\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownLineEnding)(code)) {\n            returnState = comment;\n            return lineEndingBefore(code);\n        }\n        effects.consume(code);\n        return comment;\n    }\n    /**\n   * In comment, after `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */ function commentClose(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.dash) {\n            effects.consume(code);\n            return commentEnd;\n        }\n        return comment(code);\n    }\n    /**\n   * In comment, after `--`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */ function commentEnd(code) {\n        return code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.greaterThan ? end(code) : code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.dash ? commentClose(code) : comment(code);\n    }\n    /**\n   * After `<![`, in CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *          ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */ function cdataOpenInside(code) {\n        const value = micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__.constants.cdataOpeningString;\n        if (code === value.charCodeAt(index++)) {\n            effects.consume(code);\n            return index === value.length ? cdata : cdataOpenInside;\n        }\n        return nok(code);\n    }\n    /**\n   * In CDATA.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                ^^^\n   * ```\n   *\n   * @type {State}\n   */ function cdata(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof) {\n            return nok(code);\n        }\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.rightSquareBracket) {\n            effects.consume(code);\n            return cdataClose;\n        }\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownLineEnding)(code)) {\n            returnState = cdata;\n            return lineEndingBefore(code);\n        }\n        effects.consume(code);\n        return cdata;\n    }\n    /**\n   * In CDATA, after `]`, at another `]`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */ function cdataClose(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.rightSquareBracket) {\n            effects.consume(code);\n            return cdataEnd;\n        }\n        return cdata(code);\n    }\n    /**\n   * In CDATA, after `]]`, at `>`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                     ^\n   * ```\n   *\n   * @type {State}\n   */ function cdataEnd(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.greaterThan) {\n            return end(code);\n        }\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.rightSquareBracket) {\n            effects.consume(code);\n            return cdataEnd;\n        }\n        return cdata(code);\n    }\n    /**\n   * In declaration.\n   *\n   * ```markdown\n   * > | a <!b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */ function declaration(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.greaterThan) {\n            return end(code);\n        }\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownLineEnding)(code)) {\n            returnState = declaration;\n            return lineEndingBefore(code);\n        }\n        effects.consume(code);\n        return declaration;\n    }\n    /**\n   * In instruction.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */ function instruction(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof) {\n            return nok(code);\n        }\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.questionMark) {\n            effects.consume(code);\n            return instructionClose;\n        }\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownLineEnding)(code)) {\n            returnState = instruction;\n            return lineEndingBefore(code);\n        }\n        effects.consume(code);\n        return instruction;\n    }\n    /**\n   * In instruction, after `?`, at `>`.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */ function instructionClose(code) {\n        return code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.greaterThan ? end(code) : instruction(code);\n    }\n    /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */ function tagCloseStart(code) {\n        // ASCII alphabetical.\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.asciiAlpha)(code)) {\n            effects.consume(code);\n            return tagClose;\n        }\n        return nok(code);\n    }\n    /**\n   * After `</x`, in a tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */ function tagClose(code) {\n        // ASCII alphanumerical and `-`.\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.dash || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.asciiAlphanumeric)(code)) {\n            effects.consume(code);\n            return tagClose;\n        }\n        return tagCloseBetween(code);\n    }\n    /**\n   * In closing tag, after tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */ function tagCloseBetween(code) {\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownLineEnding)(code)) {\n            returnState = tagCloseBetween;\n            return lineEndingBefore(code);\n        }\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownSpace)(code)) {\n            effects.consume(code);\n            return tagCloseBetween;\n        }\n        return end(code);\n    }\n    /**\n   * After `<x`, in opening tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */ function tagOpen(code) {\n        // ASCII alphanumerical and `-`.\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.dash || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.asciiAlphanumeric)(code)) {\n            effects.consume(code);\n            return tagOpen;\n        }\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.slash || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.greaterThan || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownLineEndingOrSpace)(code)) {\n            return tagOpenBetween(code);\n        }\n        return nok(code);\n    }\n    /**\n   * In opening tag, after tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */ function tagOpenBetween(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.slash) {\n            effects.consume(code);\n            return end;\n        }\n        // ASCII alphabetical and `:` and `_`.\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.colon || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.underscore || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.asciiAlpha)(code)) {\n            effects.consume(code);\n            return tagOpenAttributeName;\n        }\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownLineEnding)(code)) {\n            returnState = tagOpenBetween;\n            return lineEndingBefore(code);\n        }\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownSpace)(code)) {\n            effects.consume(code);\n            return tagOpenBetween;\n        }\n        return end(code);\n    }\n    /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */ function tagOpenAttributeName(code) {\n        // ASCII alphabetical and `-`, `.`, `:`, and `_`.\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.dash || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.dot || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.colon || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.underscore || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.asciiAlphanumeric)(code)) {\n            effects.consume(code);\n            return tagOpenAttributeName;\n        }\n        return tagOpenAttributeNameAfter(code);\n    }\n    /**\n   * After attribute name, before initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */ function tagOpenAttributeNameAfter(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.equalsTo) {\n            effects.consume(code);\n            return tagOpenAttributeValueBefore;\n        }\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownLineEnding)(code)) {\n            returnState = tagOpenAttributeNameAfter;\n            return lineEndingBefore(code);\n        }\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownSpace)(code)) {\n            effects.consume(code);\n            return tagOpenAttributeNameAfter;\n        }\n        return tagOpenBetween(code);\n    }\n    /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */ function tagOpenAttributeValueBefore(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.lessThan || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.equalsTo || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.greaterThan || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.graveAccent) {\n            return nok(code);\n        }\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.quotationMark || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.apostrophe) {\n            effects.consume(code);\n            marker = code;\n            return tagOpenAttributeValueQuoted;\n        }\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownLineEnding)(code)) {\n            returnState = tagOpenAttributeValueBefore;\n            return lineEndingBefore(code);\n        }\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownSpace)(code)) {\n            effects.consume(code);\n            return tagOpenAttributeValueBefore;\n        }\n        effects.consume(code);\n        return tagOpenAttributeValueUnquoted;\n    }\n    /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */ function tagOpenAttributeValueQuoted(code) {\n        if (code === marker) {\n            effects.consume(code);\n            marker = undefined;\n            return tagOpenAttributeValueQuotedAfter;\n        }\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof) {\n            return nok(code);\n        }\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownLineEnding)(code)) {\n            returnState = tagOpenAttributeValueQuoted;\n            return lineEndingBefore(code);\n        }\n        effects.consume(code);\n        return tagOpenAttributeValueQuoted;\n    }\n    /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */ function tagOpenAttributeValueUnquoted(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.quotationMark || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.apostrophe || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.lessThan || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.equalsTo || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.graveAccent) {\n            return nok(code);\n        }\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.slash || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.greaterThan || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownLineEndingOrSpace)(code)) {\n            return tagOpenBetween(code);\n        }\n        effects.consume(code);\n        return tagOpenAttributeValueUnquoted;\n    }\n    /**\n   * After double or single quoted attribute value, before whitespace or the end\n   * of the tag.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */ function tagOpenAttributeValueQuotedAfter(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.slash || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.greaterThan || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownLineEndingOrSpace)(code)) {\n            return tagOpenBetween(code);\n        }\n        return nok(code);\n    }\n    /**\n   * In certain circumstances of a tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */ function end(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.greaterThan) {\n            effects.consume(code);\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.htmlTextData);\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.htmlText);\n            return ok;\n        }\n        return nok(code);\n    }\n    /**\n   * At eol.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   * > | a <!--a\n   *            ^\n   *   | b-->\n   * ```\n   *\n   * @type {State}\n   */ function lineEndingBefore(code) {\n        (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(returnState, \"expected return state\");\n        (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownLineEnding)(code), \"expected eol\");\n        effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.htmlTextData);\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.lineEnding);\n        effects.consume(code);\n        effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.lineEnding);\n        return lineEndingAfter;\n    }\n    /**\n   * After eol, at optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */ function lineEndingAfter(code) {\n        // Always populated by defaults.\n        (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(self.parser.constructs.disable.null, \"expected `disable.null` to be populated\");\n        return (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownSpace)(code) ? (0,micromark_factory_space__WEBPACK_IMPORTED_MODULE_5__.factorySpace)(effects, lineEndingAfterPrefix, micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.linePrefix, self.parser.constructs.disable.null.includes(\"codeIndented\") ? undefined : micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__.constants.tabSize)(code) : lineEndingAfterPrefix(code);\n    }\n    /**\n   * After eol, after optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */ function lineEndingAfterPrefix(code) {\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.htmlTextData);\n        return returnState(code);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/html-text.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/label-end.js":
/*!****************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/label-end.js ***!
  \****************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   labelEnd: () => (/* binding */ labelEnd)\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! devlop */ \"(rsc)/../../node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js\");\n/* harmony import */ var micromark_factory_destination__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! micromark-factory-destination */ \"(rsc)/../../node_modules/.pnpm/micromark-factory-destination@2.0.1/node_modules/micromark-factory-destination/dev/index.js\");\n/* harmony import */ var micromark_factory_label__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! micromark-factory-label */ \"(rsc)/../../node_modules/.pnpm/micromark-factory-label@2.0.1/node_modules/micromark-factory-label/dev/index.js\");\n/* harmony import */ var micromark_factory_title__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! micromark-factory-title */ \"(rsc)/../../node_modules/.pnpm/micromark-factory-title@2.0.1/node_modules/micromark-factory-title/dev/index.js\");\n/* harmony import */ var micromark_factory_whitespace__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! micromark-factory-whitespace */ \"(rsc)/../../node_modules/.pnpm/micromark-factory-whitespace@2.0.1/node_modules/micromark-factory-whitespace/dev/index.js\");\n/* harmony import */ var micromark_util_character__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! micromark-util-character */ \"(rsc)/../../node_modules/.pnpm/micromark-util-character@2.1.1/node_modules/micromark-util-character/dev/index.js\");\n/* harmony import */ var micromark_util_chunked__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! micromark-util-chunked */ \"(rsc)/../../node_modules/.pnpm/micromark-util-chunked@2.0.1/node_modules/micromark-util-chunked/dev/index.js\");\n/* harmony import */ var micromark_util_normalize_identifier__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! micromark-util-normalize-identifier */ \"(rsc)/../../node_modules/.pnpm/micromark-util-normalize-identifier@2.0.1/node_modules/micromark-util-normalize-identifier/dev/index.js\");\n/* harmony import */ var micromark_util_resolve_all__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! micromark-util-resolve-all */ \"(rsc)/../../node_modules/.pnpm/micromark-util-resolve-all@2.0.1/node_modules/micromark-util-resolve-all/index.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! micromark-util-symbol */ \"(rsc)/../../node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/types.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! micromark-util-symbol */ \"(rsc)/../../node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/codes.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! micromark-util-symbol */ \"(rsc)/../../node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/constants.js\");\n/**\n * @import {\n *   Construct,\n *   Event,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */ \n\n\n\n\n\n\n\n\n\n/** @type {Construct} */ const labelEnd = {\n    name: \"labelEnd\",\n    resolveAll: resolveAllLabelEnd,\n    resolveTo: resolveToLabelEnd,\n    tokenize: tokenizeLabelEnd\n};\n/** @type {Construct} */ const resourceConstruct = {\n    tokenize: tokenizeResource\n};\n/** @type {Construct} */ const referenceFullConstruct = {\n    tokenize: tokenizeReferenceFull\n};\n/** @type {Construct} */ const referenceCollapsedConstruct = {\n    tokenize: tokenizeReferenceCollapsed\n};\n/** @type {Resolver} */ function resolveAllLabelEnd(events) {\n    let index = -1;\n    /** @type {Array<Event>} */ const newEvents = [];\n    while(++index < events.length){\n        const token = events[index][1];\n        newEvents.push(events[index]);\n        if (token.type === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.labelImage || token.type === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.labelLink || token.type === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.labelEnd) {\n            // Remove the marker.\n            const offset = token.type === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.labelImage ? 4 : 2;\n            token.type = micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.data;\n            index += offset;\n        }\n    }\n    // If the events are equal, we don't have to copy newEvents to events\n    if (events.length !== newEvents.length) {\n        (0,micromark_util_chunked__WEBPACK_IMPORTED_MODULE_1__.splice)(events, 0, events.length, newEvents);\n    }\n    return events;\n}\n/** @type {Resolver} */ function resolveToLabelEnd(events, context) {\n    let index = events.length;\n    let offset = 0;\n    /** @type {Token} */ let token;\n    /** @type {number | undefined} */ let open;\n    /** @type {number | undefined} */ let close;\n    /** @type {Array<Event>} */ let media;\n    // Find an opening.\n    while(index--){\n        token = events[index][1];\n        if (open) {\n            // If we see another link, or inactive link label, we’ve been here before.\n            if (token.type === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.link || token.type === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.labelLink && token._inactive) {\n                break;\n            }\n            // Mark other link openings as inactive, as we can’t have links in\n            // links.\n            if (events[index][0] === \"enter\" && token.type === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.labelLink) {\n                token._inactive = true;\n            }\n        } else if (close) {\n            if (events[index][0] === \"enter\" && (token.type === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.labelImage || token.type === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.labelLink) && !token._balanced) {\n                open = index;\n                if (token.type !== micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.labelLink) {\n                    offset = 2;\n                    break;\n                }\n            }\n        } else if (token.type === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.labelEnd) {\n            close = index;\n        }\n    }\n    (0,devlop__WEBPACK_IMPORTED_MODULE_2__.ok)(open !== undefined, \"`open` is supposed to be found\");\n    (0,devlop__WEBPACK_IMPORTED_MODULE_2__.ok)(close !== undefined, \"`close` is supposed to be found\");\n    const group = {\n        type: events[open][1].type === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.labelLink ? micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.link : micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.image,\n        start: {\n            ...events[open][1].start\n        },\n        end: {\n            ...events[events.length - 1][1].end\n        }\n    };\n    const label = {\n        type: micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.label,\n        start: {\n            ...events[open][1].start\n        },\n        end: {\n            ...events[close][1].end\n        }\n    };\n    const text = {\n        type: micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.labelText,\n        start: {\n            ...events[open + offset + 2][1].end\n        },\n        end: {\n            ...events[close - 2][1].start\n        }\n    };\n    media = [\n        [\n            \"enter\",\n            group,\n            context\n        ],\n        [\n            \"enter\",\n            label,\n            context\n        ]\n    ];\n    // Opening marker.\n    media = (0,micromark_util_chunked__WEBPACK_IMPORTED_MODULE_1__.push)(media, events.slice(open + 1, open + offset + 3));\n    // Text open.\n    media = (0,micromark_util_chunked__WEBPACK_IMPORTED_MODULE_1__.push)(media, [\n        [\n            \"enter\",\n            text,\n            context\n        ]\n    ]);\n    // Always populated by defaults.\n    (0,devlop__WEBPACK_IMPORTED_MODULE_2__.ok)(context.parser.constructs.insideSpan.null, \"expected `insideSpan.null` to be populated\");\n    // Between.\n    media = (0,micromark_util_chunked__WEBPACK_IMPORTED_MODULE_1__.push)(media, (0,micromark_util_resolve_all__WEBPACK_IMPORTED_MODULE_3__.resolveAll)(context.parser.constructs.insideSpan.null, events.slice(open + offset + 4, close - 3), context));\n    // Text close, marker close, label close.\n    media = (0,micromark_util_chunked__WEBPACK_IMPORTED_MODULE_1__.push)(media, [\n        [\n            \"exit\",\n            text,\n            context\n        ],\n        events[close - 2],\n        events[close - 1],\n        [\n            \"exit\",\n            label,\n            context\n        ]\n    ]);\n    // Reference, resource, or so.\n    media = (0,micromark_util_chunked__WEBPACK_IMPORTED_MODULE_1__.push)(media, events.slice(close + 1));\n    // Media close.\n    media = (0,micromark_util_chunked__WEBPACK_IMPORTED_MODULE_1__.push)(media, [\n        [\n            \"exit\",\n            group,\n            context\n        ]\n    ]);\n    (0,micromark_util_chunked__WEBPACK_IMPORTED_MODULE_1__.splice)(events, open, events.length, media);\n    return events;\n}\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */ function tokenizeLabelEnd(effects, ok, nok) {\n    const self = this;\n    let index = self.events.length;\n    /** @type {Token} */ let labelStart;\n    /** @type {boolean} */ let defined;\n    // Find an opening.\n    while(index--){\n        if ((self.events[index][1].type === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.labelImage || self.events[index][1].type === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.labelLink) && !self.events[index][1]._balanced) {\n            labelStart = self.events[index][1];\n            break;\n        }\n    }\n    return start;\n    /**\n   * Start of label end.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   * ```\n   *\n   * @type {State}\n   */ function start(code) {\n        (0,devlop__WEBPACK_IMPORTED_MODULE_2__.ok)(code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__.codes.rightSquareBracket, \"expected `]`\");\n        // If there is not an okay opening.\n        if (!labelStart) {\n            return nok(code);\n        }\n        // If the corresponding label (link) start is marked as inactive,\n        // it means we’d be wrapping a link, like this:\n        //\n        // ```markdown\n        // > | a [b [c](d) e](f) g.\n        //                  ^\n        // ```\n        //\n        // We can’t have that, so it’s just balanced brackets.\n        if (labelStart._inactive) {\n            return labelEndNok(code);\n        }\n        defined = self.parser.defined.includes((0,micromark_util_normalize_identifier__WEBPACK_IMPORTED_MODULE_5__.normalizeIdentifier)(self.sliceSerialize({\n            start: labelStart.end,\n            end: self.now()\n        })));\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.labelEnd);\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.labelMarker);\n        effects.consume(code);\n        effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.labelMarker);\n        effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.labelEnd);\n        return after;\n    }\n    /**\n   * After `]`.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */ function after(code) {\n        // Note: `markdown-rs` also parses GFM footnotes here, which for us is in\n        // an extension.\n        // Resource (`[asd](fgh)`)?\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__.codes.leftParenthesis) {\n            return effects.attempt(resourceConstruct, labelEndOk, defined ? labelEndOk : labelEndNok)(code);\n        }\n        // Full (`[asd][fgh]`) or collapsed (`[asd][]`) reference?\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__.codes.leftSquareBracket) {\n            return effects.attempt(referenceFullConstruct, labelEndOk, defined ? referenceNotFull : labelEndNok)(code);\n        }\n        // Shortcut (`[asd]`) reference?\n        return defined ? labelEndOk(code) : labelEndNok(code);\n    }\n    /**\n   * After `]`, at `[`, but not at a full reference.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] b\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */ function referenceNotFull(code) {\n        return effects.attempt(referenceCollapsedConstruct, labelEndOk, labelEndNok)(code);\n    }\n    /**\n   * Done, we found something.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *           ^\n   * > | [a][b] c\n   *           ^\n   * > | [a][] b\n   *          ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */ function labelEndOk(code) {\n        // Note: `markdown-rs` does a bunch of stuff here.\n        return ok(code);\n    }\n    /**\n   * Done, it’s nothing.\n   *\n   * There was an okay opening, but we didn’t match anything.\n   *\n   * ```markdown\n   * > | [a](b c\n   *        ^\n   * > | [a][b c\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */ function labelEndNok(code) {\n        labelStart._balanced = true;\n        return nok(code);\n    }\n}\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */ function tokenizeResource(effects, ok, nok) {\n    return resourceStart;\n    /**\n   * At a resource.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */ function resourceStart(code) {\n        (0,devlop__WEBPACK_IMPORTED_MODULE_2__.ok)(code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__.codes.leftParenthesis, \"expected left paren\");\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.resource);\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.resourceMarker);\n        effects.consume(code);\n        effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.resourceMarker);\n        return resourceBefore;\n    }\n    /**\n   * In resource, after `(`, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */ function resourceBefore(code) {\n        return (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_6__.markdownLineEndingOrSpace)(code) ? (0,micromark_factory_whitespace__WEBPACK_IMPORTED_MODULE_7__.factoryWhitespace)(effects, resourceOpen)(code) : resourceOpen(code);\n    }\n    /**\n   * In resource, after optional whitespace, at `)` or a destination.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */ function resourceOpen(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__.codes.rightParenthesis) {\n            return resourceEnd(code);\n        }\n        return (0,micromark_factory_destination__WEBPACK_IMPORTED_MODULE_8__.factoryDestination)(effects, resourceDestinationAfter, resourceDestinationMissing, micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.resourceDestination, micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.resourceDestinationLiteral, micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.resourceDestinationLiteralMarker, micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.resourceDestinationRaw, micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.resourceDestinationString, micromark_util_symbol__WEBPACK_IMPORTED_MODULE_9__.constants.linkResourceDestinationBalanceMax)(code);\n    }\n    /**\n   * In resource, after destination, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */ function resourceDestinationAfter(code) {\n        return (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_6__.markdownLineEndingOrSpace)(code) ? (0,micromark_factory_whitespace__WEBPACK_IMPORTED_MODULE_7__.factoryWhitespace)(effects, resourceBetween)(code) : resourceEnd(code);\n    }\n    /**\n   * At invalid destination.\n   *\n   * ```markdown\n   * > | [a](<<) b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */ function resourceDestinationMissing(code) {\n        return nok(code);\n    }\n    /**\n   * In resource, after destination and whitespace, at `(` or title.\n   *\n   * ```markdown\n   * > | [a](b ) c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */ function resourceBetween(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__.codes.quotationMark || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__.codes.apostrophe || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__.codes.leftParenthesis) {\n            return (0,micromark_factory_title__WEBPACK_IMPORTED_MODULE_10__.factoryTitle)(effects, resourceTitleAfter, nok, micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.resourceTitle, micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.resourceTitleMarker, micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.resourceTitleString)(code);\n        }\n        return resourceEnd(code);\n    }\n    /**\n   * In resource, after title, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b \"c\") d\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */ function resourceTitleAfter(code) {\n        return (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_6__.markdownLineEndingOrSpace)(code) ? (0,micromark_factory_whitespace__WEBPACK_IMPORTED_MODULE_7__.factoryWhitespace)(effects, resourceEnd)(code) : resourceEnd(code);\n    }\n    /**\n   * In resource, at `)`.\n   *\n   * ```markdown\n   * > | [a](b) d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */ function resourceEnd(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__.codes.rightParenthesis) {\n            effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.resourceMarker);\n            effects.consume(code);\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.resourceMarker);\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.resource);\n            return ok;\n        }\n        return nok(code);\n    }\n}\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */ function tokenizeReferenceFull(effects, ok, nok) {\n    const self = this;\n    return referenceFull;\n    /**\n   * In a reference (full), at the `[`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */ function referenceFull(code) {\n        (0,devlop__WEBPACK_IMPORTED_MODULE_2__.ok)(code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__.codes.leftSquareBracket, \"expected left bracket\");\n        return micromark_factory_label__WEBPACK_IMPORTED_MODULE_11__.factoryLabel.call(self, effects, referenceFullAfter, referenceFullMissing, micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.reference, micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.referenceMarker, micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.referenceString)(code);\n    }\n    /**\n   * In a reference (full), after `]`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */ function referenceFullAfter(code) {\n        return self.parser.defined.includes((0,micromark_util_normalize_identifier__WEBPACK_IMPORTED_MODULE_5__.normalizeIdentifier)(self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1))) ? ok(code) : nok(code);\n    }\n    /**\n   * In reference (full) that was missing.\n   *\n   * ```markdown\n   * > | [a][b d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */ function referenceFullMissing(code) {\n        return nok(code);\n    }\n}\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */ function tokenizeReferenceCollapsed(effects, ok, nok) {\n    return referenceCollapsedStart;\n    /**\n   * In reference (collapsed), at `[`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */ function referenceCollapsedStart(code) {\n        // We only attempt a collapsed label if there’s a `[`.\n        (0,devlop__WEBPACK_IMPORTED_MODULE_2__.ok)(code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__.codes.leftSquareBracket, \"expected left bracket\");\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.reference);\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.referenceMarker);\n        effects.consume(code);\n        effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.referenceMarker);\n        return referenceCollapsedOpen;\n    }\n    /**\n   * In reference (collapsed), at `]`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *         ^\n   * ```\n   *\n   *  @type {State}\n   */ function referenceCollapsedOpen(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__.codes.rightSquareBracket) {\n            effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.referenceMarker);\n            effects.consume(code);\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.referenceMarker);\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.reference);\n            return ok;\n        }\n        return nok(code);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/label-end.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/label-start-image.js":
/*!************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/label-start-image.js ***!
  \************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   labelStartImage: () => (/* binding */ labelStartImage)\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! devlop */ \"(rsc)/../../node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! micromark-util-symbol */ \"(rsc)/../../node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/codes.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! micromark-util-symbol */ \"(rsc)/../../node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/types.js\");\n/* harmony import */ var _label_end_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./label-end.js */ \"(rsc)/../../node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/label-end.js\");\n/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */ \n\n\n/** @type {Construct} */ const labelStartImage = {\n    name: \"labelStartImage\",\n    resolveAll: _label_end_js__WEBPACK_IMPORTED_MODULE_0__.labelEnd.resolveAll,\n    tokenize: tokenizeLabelStartImage\n};\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */ function tokenizeLabelStartImage(effects, ok, nok) {\n    const self = this;\n    return start;\n    /**\n   * Start of label (image) start.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */ function start(code) {\n        (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.exclamationMark, \"expected `!`\");\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.types.labelImage);\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.types.labelImageMarker);\n        effects.consume(code);\n        effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.types.labelImageMarker);\n        return open;\n    }\n    /**\n   * After `!`, at `[`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */ function open(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.leftSquareBracket) {\n            effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.types.labelMarker);\n            effects.consume(code);\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.types.labelMarker);\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.types.labelImage);\n            return after;\n        }\n        return nok(code);\n    }\n    /**\n   * After `![`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *         ^\n   * ```\n   *\n   * This is needed in because, when GFM footnotes are enabled, images never\n   * form when started with a `^`.\n   * Instead, links form:\n   *\n   * ```markdown\n   * ![^a](b)\n   *\n   * ![^a][b]\n   *\n   * [b]: c\n   * ```\n   *\n   * ```html\n   * <p>!<a href=\\\"b\\\">^a</a></p>\n   * <p>!<a href=\\\"c\\\">^a</a></p>\n   * ```\n   *\n   * @type {State}\n   */ function after(code) {\n        // To do: use a new field to do this, this is still needed for\n        // `micromark-extension-gfm-footnote`, but the `label-start-link`\n        // behavior isn’t.\n        // Hidden footnotes hook.\n        /* c8 ignore next 3 */ return code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.caret && \"_hiddenFootnoteSupport\" in self.parser.constructs ? nok(code) : ok(code);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21pY3JvbWFyay1jb3JlLWNvbW1vbm1hcmtAMi4wLjMvbm9kZV9tb2R1bGVzL21pY3JvbWFyay1jb3JlLWNvbW1vbm1hcmsvZGV2L2xpYi9sYWJlbC1zdGFydC1pbWFnZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBOzs7Ozs7O0NBT0MsR0FFa0M7QUFDZTtBQUNYO0FBRXZDLHNCQUFzQixHQUNmLE1BQU1LLGtCQUFrQjtJQUM3QkMsTUFBTTtJQUNOQyxZQUFZSCxtREFBUUEsQ0FBQ0csVUFBVTtJQUMvQkMsVUFBVUM7QUFDWixFQUFDO0FBRUQ7Ozs7Q0FJQyxHQUNELFNBQVNBLHdCQUF3QkMsT0FBTyxFQUFFVixFQUFFLEVBQUVXLEdBQUc7SUFDL0MsTUFBTUMsT0FBTyxJQUFJO0lBRWpCLE9BQU9DO0lBRVA7Ozs7Ozs7OztHQVNDLEdBQ0QsU0FBU0EsTUFBTUMsSUFBSTtRQUNqQmIsMENBQU1BLENBQUNhLFNBQVNaLHdEQUFLQSxDQUFDYSxlQUFlLEVBQUU7UUFDdkNMLFFBQVFNLEtBQUssQ0FBQ2Isd0RBQUtBLENBQUNjLFVBQVU7UUFDOUJQLFFBQVFNLEtBQUssQ0FBQ2Isd0RBQUtBLENBQUNlLGdCQUFnQjtRQUNwQ1IsUUFBUVMsT0FBTyxDQUFDTDtRQUNoQkosUUFBUVUsSUFBSSxDQUFDakIsd0RBQUtBLENBQUNlLGdCQUFnQjtRQUNuQyxPQUFPRztJQUNUO0lBRUE7Ozs7Ozs7OztHQVNDLEdBQ0QsU0FBU0EsS0FBS1AsSUFBSTtRQUNoQixJQUFJQSxTQUFTWix3REFBS0EsQ0FBQ29CLGlCQUFpQixFQUFFO1lBQ3BDWixRQUFRTSxLQUFLLENBQUNiLHdEQUFLQSxDQUFDb0IsV0FBVztZQUMvQmIsUUFBUVMsT0FBTyxDQUFDTDtZQUNoQkosUUFBUVUsSUFBSSxDQUFDakIsd0RBQUtBLENBQUNvQixXQUFXO1lBQzlCYixRQUFRVSxJQUFJLENBQUNqQix3REFBS0EsQ0FBQ2MsVUFBVTtZQUM3QixPQUFPTztRQUNUO1FBRUEsT0FBT2IsSUFBSUc7SUFDYjtJQUVBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQTBCQyxHQUNELFNBQVNVLE1BQU1WLElBQUk7UUFDakIsOERBQThEO1FBQzlELGlFQUFpRTtRQUNqRSxrQkFBa0I7UUFDbEIseUJBQXlCO1FBQ3pCLG9CQUFvQixHQUNwQixPQUFPQSxTQUFTWix3REFBS0EsQ0FBQ3VCLEtBQUssSUFDekIsNEJBQTRCYixLQUFLYyxNQUFNLENBQUNDLFVBQVUsR0FDaERoQixJQUFJRyxRQUNKZCxHQUFHYztJQUNUO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWIvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21pY3JvbWFyay1jb3JlLWNvbW1vbm1hcmtAMi4wLjMvbm9kZV9tb2R1bGVzL21pY3JvbWFyay1jb3JlLWNvbW1vbm1hcmsvZGV2L2xpYi9sYWJlbC1zdGFydC1pbWFnZS5qcz85YWQ1Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGltcG9ydCB7XG4gKiAgIENvbnN0cnVjdCxcbiAqICAgU3RhdGUsXG4gKiAgIFRva2VuaXplQ29udGV4dCxcbiAqICAgVG9rZW5pemVyXG4gKiB9IGZyb20gJ21pY3JvbWFyay11dGlsLXR5cGVzJ1xuICovXG5cbmltcG9ydCB7b2sgYXMgYXNzZXJ0fSBmcm9tICdkZXZsb3AnXG5pbXBvcnQge2NvZGVzLCB0eXBlc30gZnJvbSAnbWljcm9tYXJrLXV0aWwtc3ltYm9sJ1xuaW1wb3J0IHtsYWJlbEVuZH0gZnJvbSAnLi9sYWJlbC1lbmQuanMnXG5cbi8qKiBAdHlwZSB7Q29uc3RydWN0fSAqL1xuZXhwb3J0IGNvbnN0IGxhYmVsU3RhcnRJbWFnZSA9IHtcbiAgbmFtZTogJ2xhYmVsU3RhcnRJbWFnZScsXG4gIHJlc29sdmVBbGw6IGxhYmVsRW5kLnJlc29sdmVBbGwsXG4gIHRva2VuaXplOiB0b2tlbml6ZUxhYmVsU3RhcnRJbWFnZVxufVxuXG4vKipcbiAqIEB0aGlzIHtUb2tlbml6ZUNvbnRleHR9XG4gKiAgIENvbnRleHQuXG4gKiBAdHlwZSB7VG9rZW5pemVyfVxuICovXG5mdW5jdGlvbiB0b2tlbml6ZUxhYmVsU3RhcnRJbWFnZShlZmZlY3RzLCBvaywgbm9rKSB7XG4gIGNvbnN0IHNlbGYgPSB0aGlzXG5cbiAgcmV0dXJuIHN0YXJ0XG5cbiAgLyoqXG4gICAqIFN0YXJ0IG9mIGxhYmVsIChpbWFnZSkgc3RhcnQuXG4gICAqXG4gICAqIGBgYG1hcmtkb3duXG4gICAqID4gfCBhICFbYl0gY1xuICAgKiAgICAgICBeXG4gICAqIGBgYFxuICAgKlxuICAgKiBAdHlwZSB7U3RhdGV9XG4gICAqL1xuICBmdW5jdGlvbiBzdGFydChjb2RlKSB7XG4gICAgYXNzZXJ0KGNvZGUgPT09IGNvZGVzLmV4Y2xhbWF0aW9uTWFyaywgJ2V4cGVjdGVkIGAhYCcpXG4gICAgZWZmZWN0cy5lbnRlcih0eXBlcy5sYWJlbEltYWdlKVxuICAgIGVmZmVjdHMuZW50ZXIodHlwZXMubGFiZWxJbWFnZU1hcmtlcilcbiAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICBlZmZlY3RzLmV4aXQodHlwZXMubGFiZWxJbWFnZU1hcmtlcilcbiAgICByZXR1cm4gb3BlblxuICB9XG5cbiAgLyoqXG4gICAqIEFmdGVyIGAhYCwgYXQgYFtgLlxuICAgKlxuICAgKiBgYGBtYXJrZG93blxuICAgKiA+IHwgYSAhW2JdIGNcbiAgICogICAgICAgIF5cbiAgICogYGBgXG4gICAqXG4gICAqIEB0eXBlIHtTdGF0ZX1cbiAgICovXG4gIGZ1bmN0aW9uIG9wZW4oY29kZSkge1xuICAgIGlmIChjb2RlID09PSBjb2Rlcy5sZWZ0U3F1YXJlQnJhY2tldCkge1xuICAgICAgZWZmZWN0cy5lbnRlcih0eXBlcy5sYWJlbE1hcmtlcilcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgZWZmZWN0cy5leGl0KHR5cGVzLmxhYmVsTWFya2VyKVxuICAgICAgZWZmZWN0cy5leGl0KHR5cGVzLmxhYmVsSW1hZ2UpXG4gICAgICByZXR1cm4gYWZ0ZXJcbiAgICB9XG5cbiAgICByZXR1cm4gbm9rKGNvZGUpXG4gIH1cblxuICAvKipcbiAgICogQWZ0ZXIgYCFbYC5cbiAgICpcbiAgICogYGBgbWFya2Rvd25cbiAgICogPiB8IGEgIVtiXSBjXG4gICAqICAgICAgICAgXlxuICAgKiBgYGBcbiAgICpcbiAgICogVGhpcyBpcyBuZWVkZWQgaW4gYmVjYXVzZSwgd2hlbiBHRk0gZm9vdG5vdGVzIGFyZSBlbmFibGVkLCBpbWFnZXMgbmV2ZXJcbiAgICogZm9ybSB3aGVuIHN0YXJ0ZWQgd2l0aCBhIGBeYC5cbiAgICogSW5zdGVhZCwgbGlua3MgZm9ybTpcbiAgICpcbiAgICogYGBgbWFya2Rvd25cbiAgICogIVteYV0oYilcbiAgICpcbiAgICogIVteYV1bYl1cbiAgICpcbiAgICogW2JdOiBjXG4gICAqIGBgYFxuICAgKlxuICAgKiBgYGBodG1sXG4gICAqIDxwPiE8YSBocmVmPVxcXCJiXFxcIj5eYTwvYT48L3A+XG4gICAqIDxwPiE8YSBocmVmPVxcXCJjXFxcIj5eYTwvYT48L3A+XG4gICAqIGBgYFxuICAgKlxuICAgKiBAdHlwZSB7U3RhdGV9XG4gICAqL1xuICBmdW5jdGlvbiBhZnRlcihjb2RlKSB7XG4gICAgLy8gVG8gZG86IHVzZSBhIG5ldyBmaWVsZCB0byBkbyB0aGlzLCB0aGlzIGlzIHN0aWxsIG5lZWRlZCBmb3JcbiAgICAvLyBgbWljcm9tYXJrLWV4dGVuc2lvbi1nZm0tZm9vdG5vdGVgLCBidXQgdGhlIGBsYWJlbC1zdGFydC1saW5rYFxuICAgIC8vIGJlaGF2aW9yIGlzbuKAmXQuXG4gICAgLy8gSGlkZGVuIGZvb3Rub3RlcyBob29rLlxuICAgIC8qIGM4IGlnbm9yZSBuZXh0IDMgKi9cbiAgICByZXR1cm4gY29kZSA9PT0gY29kZXMuY2FyZXQgJiZcbiAgICAgICdfaGlkZGVuRm9vdG5vdGVTdXBwb3J0JyBpbiBzZWxmLnBhcnNlci5jb25zdHJ1Y3RzXG4gICAgICA/IG5vayhjb2RlKVxuICAgICAgOiBvayhjb2RlKVxuICB9XG59XG4iXSwibmFtZXMiOlsib2siLCJhc3NlcnQiLCJjb2RlcyIsInR5cGVzIiwibGFiZWxFbmQiLCJsYWJlbFN0YXJ0SW1hZ2UiLCJuYW1lIiwicmVzb2x2ZUFsbCIsInRva2VuaXplIiwidG9rZW5pemVMYWJlbFN0YXJ0SW1hZ2UiLCJlZmZlY3RzIiwibm9rIiwic2VsZiIsInN0YXJ0IiwiY29kZSIsImV4Y2xhbWF0aW9uTWFyayIsImVudGVyIiwibGFiZWxJbWFnZSIsImxhYmVsSW1hZ2VNYXJrZXIiLCJjb25zdW1lIiwiZXhpdCIsIm9wZW4iLCJsZWZ0U3F1YXJlQnJhY2tldCIsImxhYmVsTWFya2VyIiwiYWZ0ZXIiLCJjYXJldCIsInBhcnNlciIsImNvbnN0cnVjdHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/label-start-image.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/label-start-link.js":
/*!***********************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/label-start-link.js ***!
  \***********************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   labelStartLink: () => (/* binding */ labelStartLink)\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! devlop */ \"(rsc)/../../node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! micromark-util-symbol */ \"(rsc)/../../node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/codes.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! micromark-util-symbol */ \"(rsc)/../../node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/types.js\");\n/* harmony import */ var _label_end_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./label-end.js */ \"(rsc)/../../node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/label-end.js\");\n/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */ \n\n\n/** @type {Construct} */ const labelStartLink = {\n    name: \"labelStartLink\",\n    resolveAll: _label_end_js__WEBPACK_IMPORTED_MODULE_0__.labelEnd.resolveAll,\n    tokenize: tokenizeLabelStartLink\n};\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */ function tokenizeLabelStartLink(effects, ok, nok) {\n    const self = this;\n    return start;\n    /**\n   * Start of label (link) start.\n   *\n   * ```markdown\n   * > | a [b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */ function start(code) {\n        (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.leftSquareBracket, \"expected `[`\");\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.types.labelLink);\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.types.labelMarker);\n        effects.consume(code);\n        effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.types.labelMarker);\n        effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.types.labelLink);\n        return after;\n    }\n    /** @type {State} */ function after(code) {\n        // To do: this isn’t needed in `micromark-extension-gfm-footnote`,\n        // remove.\n        // Hidden footnotes hook.\n        /* c8 ignore next 3 */ return code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.caret && \"_hiddenFootnoteSupport\" in self.parser.constructs ? nok(code) : ok(code);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21pY3JvbWFyay1jb3JlLWNvbW1vbm1hcmtAMi4wLjMvbm9kZV9tb2R1bGVzL21pY3JvbWFyay1jb3JlLWNvbW1vbm1hcmsvZGV2L2xpYi9sYWJlbC1zdGFydC1saW5rLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7Ozs7Ozs7Q0FPQyxHQUVrQztBQUNlO0FBQ1g7QUFFdkMsc0JBQXNCLEdBQ2YsTUFBTUssaUJBQWlCO0lBQzVCQyxNQUFNO0lBQ05DLFlBQVlILG1EQUFRQSxDQUFDRyxVQUFVO0lBQy9CQyxVQUFVQztBQUNaLEVBQUM7QUFFRDs7OztDQUlDLEdBQ0QsU0FBU0EsdUJBQXVCQyxPQUFPLEVBQUVWLEVBQUUsRUFBRVcsR0FBRztJQUM5QyxNQUFNQyxPQUFPLElBQUk7SUFFakIsT0FBT0M7SUFFUDs7Ozs7Ozs7O0dBU0MsR0FDRCxTQUFTQSxNQUFNQyxJQUFJO1FBQ2pCYiwwQ0FBTUEsQ0FBQ2EsU0FBU1osd0RBQUtBLENBQUNhLGlCQUFpQixFQUFFO1FBQ3pDTCxRQUFRTSxLQUFLLENBQUNiLHdEQUFLQSxDQUFDYyxTQUFTO1FBQzdCUCxRQUFRTSxLQUFLLENBQUNiLHdEQUFLQSxDQUFDZSxXQUFXO1FBQy9CUixRQUFRUyxPQUFPLENBQUNMO1FBQ2hCSixRQUFRVSxJQUFJLENBQUNqQix3REFBS0EsQ0FBQ2UsV0FBVztRQUM5QlIsUUFBUVUsSUFBSSxDQUFDakIsd0RBQUtBLENBQUNjLFNBQVM7UUFDNUIsT0FBT0k7SUFDVDtJQUVBLGtCQUFrQixHQUNsQixTQUFTQSxNQUFNUCxJQUFJO1FBQ2pCLGtFQUFrRTtRQUNsRSxVQUFVO1FBQ1YseUJBQXlCO1FBQ3pCLG9CQUFvQixHQUNwQixPQUFPQSxTQUFTWix3REFBS0EsQ0FBQ29CLEtBQUssSUFDekIsNEJBQTRCVixLQUFLVyxNQUFNLENBQUNDLFVBQVUsR0FDaERiLElBQUlHLFFBQ0pkLEdBQUdjO0lBQ1Q7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL3dlYi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbWljcm9tYXJrLWNvcmUtY29tbW9ubWFya0AyLjAuMy9ub2RlX21vZHVsZXMvbWljcm9tYXJrLWNvcmUtY29tbW9ubWFyay9kZXYvbGliL2xhYmVsLXN0YXJ0LWxpbmsuanM/ZTczZSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBpbXBvcnQge1xuICogICBDb25zdHJ1Y3QsXG4gKiAgIFN0YXRlLFxuICogICBUb2tlbml6ZUNvbnRleHQsXG4gKiAgIFRva2VuaXplclxuICogfSBmcm9tICdtaWNyb21hcmstdXRpbC10eXBlcydcbiAqL1xuXG5pbXBvcnQge29rIGFzIGFzc2VydH0gZnJvbSAnZGV2bG9wJ1xuaW1wb3J0IHtjb2RlcywgdHlwZXN9IGZyb20gJ21pY3JvbWFyay11dGlsLXN5bWJvbCdcbmltcG9ydCB7bGFiZWxFbmR9IGZyb20gJy4vbGFiZWwtZW5kLmpzJ1xuXG4vKiogQHR5cGUge0NvbnN0cnVjdH0gKi9cbmV4cG9ydCBjb25zdCBsYWJlbFN0YXJ0TGluayA9IHtcbiAgbmFtZTogJ2xhYmVsU3RhcnRMaW5rJyxcbiAgcmVzb2x2ZUFsbDogbGFiZWxFbmQucmVzb2x2ZUFsbCxcbiAgdG9rZW5pemU6IHRva2VuaXplTGFiZWxTdGFydExpbmtcbn1cblxuLyoqXG4gKiBAdGhpcyB7VG9rZW5pemVDb250ZXh0fVxuICogICBDb250ZXh0LlxuICogQHR5cGUge1Rva2VuaXplcn1cbiAqL1xuZnVuY3Rpb24gdG9rZW5pemVMYWJlbFN0YXJ0TGluayhlZmZlY3RzLCBvaywgbm9rKSB7XG4gIGNvbnN0IHNlbGYgPSB0aGlzXG5cbiAgcmV0dXJuIHN0YXJ0XG5cbiAgLyoqXG4gICAqIFN0YXJ0IG9mIGxhYmVsIChsaW5rKSBzdGFydC5cbiAgICpcbiAgICogYGBgbWFya2Rvd25cbiAgICogPiB8IGEgW2JdIGNcbiAgICogICAgICAgXlxuICAgKiBgYGBcbiAgICpcbiAgICogQHR5cGUge1N0YXRlfVxuICAgKi9cbiAgZnVuY3Rpb24gc3RhcnQoY29kZSkge1xuICAgIGFzc2VydChjb2RlID09PSBjb2Rlcy5sZWZ0U3F1YXJlQnJhY2tldCwgJ2V4cGVjdGVkIGBbYCcpXG4gICAgZWZmZWN0cy5lbnRlcih0eXBlcy5sYWJlbExpbmspXG4gICAgZWZmZWN0cy5lbnRlcih0eXBlcy5sYWJlbE1hcmtlcilcbiAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICBlZmZlY3RzLmV4aXQodHlwZXMubGFiZWxNYXJrZXIpXG4gICAgZWZmZWN0cy5leGl0KHR5cGVzLmxhYmVsTGluaylcbiAgICByZXR1cm4gYWZ0ZXJcbiAgfVxuXG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG4gIGZ1bmN0aW9uIGFmdGVyKGNvZGUpIHtcbiAgICAvLyBUbyBkbzogdGhpcyBpc27igJl0IG5lZWRlZCBpbiBgbWljcm9tYXJrLWV4dGVuc2lvbi1nZm0tZm9vdG5vdGVgLFxuICAgIC8vIHJlbW92ZS5cbiAgICAvLyBIaWRkZW4gZm9vdG5vdGVzIGhvb2suXG4gICAgLyogYzggaWdub3JlIG5leHQgMyAqL1xuICAgIHJldHVybiBjb2RlID09PSBjb2Rlcy5jYXJldCAmJlxuICAgICAgJ19oaWRkZW5Gb290bm90ZVN1cHBvcnQnIGluIHNlbGYucGFyc2VyLmNvbnN0cnVjdHNcbiAgICAgID8gbm9rKGNvZGUpXG4gICAgICA6IG9rKGNvZGUpXG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJvayIsImFzc2VydCIsImNvZGVzIiwidHlwZXMiLCJsYWJlbEVuZCIsImxhYmVsU3RhcnRMaW5rIiwibmFtZSIsInJlc29sdmVBbGwiLCJ0b2tlbml6ZSIsInRva2VuaXplTGFiZWxTdGFydExpbmsiLCJlZmZlY3RzIiwibm9rIiwic2VsZiIsInN0YXJ0IiwiY29kZSIsImxlZnRTcXVhcmVCcmFja2V0IiwiZW50ZXIiLCJsYWJlbExpbmsiLCJsYWJlbE1hcmtlciIsImNvbnN1bWUiLCJleGl0IiwiYWZ0ZXIiLCJjYXJldCIsInBhcnNlciIsImNvbnN0cnVjdHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/label-start-link.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/line-ending.js":
/*!******************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/line-ending.js ***!
  \******************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   lineEnding: () => (/* binding */ lineEnding)\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! devlop */ \"(rsc)/../../node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js\");\n/* harmony import */ var micromark_factory_space__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! micromark-factory-space */ \"(rsc)/../../node_modules/.pnpm/micromark-factory-space@2.0.1/node_modules/micromark-factory-space/dev/index.js\");\n/* harmony import */ var micromark_util_character__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! micromark-util-character */ \"(rsc)/../../node_modules/.pnpm/micromark-util-character@2.1.1/node_modules/micromark-util-character/dev/index.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! micromark-util-symbol */ \"(rsc)/../../node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/types.js\");\n/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */ \n\n\n\n/** @type {Construct} */ const lineEnding = {\n    name: \"lineEnding\",\n    tokenize: tokenizeLineEnding\n};\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */ function tokenizeLineEnding(effects, ok) {\n    return start;\n    /** @type {State} */ function start(code) {\n        (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_1__.markdownLineEnding)(code), \"expected eol\");\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.lineEnding);\n        effects.consume(code);\n        effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.lineEnding);\n        return (0,micromark_factory_space__WEBPACK_IMPORTED_MODULE_3__.factorySpace)(effects, ok, micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.linePrefix);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21pY3JvbWFyay1jb3JlLWNvbW1vbm1hcmtAMi4wLjMvbm9kZV9tb2R1bGVzL21pY3JvbWFyay1jb3JlLWNvbW1vbm1hcmsvZGV2L2xpYi9saW5lLWVuZGluZy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBOzs7Ozs7O0NBT0MsR0FFa0M7QUFDaUI7QUFDTztBQUNoQjtBQUUzQyxzQkFBc0IsR0FDZixNQUFNSyxhQUFhO0lBQUNDLE1BQU07SUFBY0MsVUFBVUM7QUFBa0IsRUFBQztBQUU1RTs7OztDQUlDLEdBQ0QsU0FBU0EsbUJBQW1CQyxPQUFPLEVBQUVULEVBQUU7SUFDckMsT0FBT1U7SUFFUCxrQkFBa0IsR0FDbEIsU0FBU0EsTUFBTUMsSUFBSTtRQUNqQlYsMENBQU1BLENBQUNFLDRFQUFrQkEsQ0FBQ1EsT0FBTztRQUNqQ0YsUUFBUUcsS0FBSyxDQUFDUix3REFBS0EsQ0FBQ0MsVUFBVTtRQUM5QkksUUFBUUksT0FBTyxDQUFDRjtRQUNoQkYsUUFBUUssSUFBSSxDQUFDVix3REFBS0EsQ0FBQ0MsVUFBVTtRQUM3QixPQUFPSCxxRUFBWUEsQ0FBQ08sU0FBU1QsSUFBSUksd0RBQUtBLENBQUNXLFVBQVU7SUFDbkQ7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL3dlYi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbWljcm9tYXJrLWNvcmUtY29tbW9ubWFya0AyLjAuMy9ub2RlX21vZHVsZXMvbWljcm9tYXJrLWNvcmUtY29tbW9ubWFyay9kZXYvbGliL2xpbmUtZW5kaW5nLmpzP2YwYzMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAaW1wb3J0IHtcbiAqICAgQ29uc3RydWN0LFxuICogICBTdGF0ZSxcbiAqICAgVG9rZW5pemVDb250ZXh0LFxuICogICBUb2tlbml6ZXJcbiAqIH0gZnJvbSAnbWljcm9tYXJrLXV0aWwtdHlwZXMnXG4gKi9cblxuaW1wb3J0IHtvayBhcyBhc3NlcnR9IGZyb20gJ2RldmxvcCdcbmltcG9ydCB7ZmFjdG9yeVNwYWNlfSBmcm9tICdtaWNyb21hcmstZmFjdG9yeS1zcGFjZSdcbmltcG9ydCB7bWFya2Rvd25MaW5lRW5kaW5nfSBmcm9tICdtaWNyb21hcmstdXRpbC1jaGFyYWN0ZXInXG5pbXBvcnQge3R5cGVzfSBmcm9tICdtaWNyb21hcmstdXRpbC1zeW1ib2wnXG5cbi8qKiBAdHlwZSB7Q29uc3RydWN0fSAqL1xuZXhwb3J0IGNvbnN0IGxpbmVFbmRpbmcgPSB7bmFtZTogJ2xpbmVFbmRpbmcnLCB0b2tlbml6ZTogdG9rZW5pemVMaW5lRW5kaW5nfVxuXG4vKipcbiAqIEB0aGlzIHtUb2tlbml6ZUNvbnRleHR9XG4gKiAgIENvbnRleHQuXG4gKiBAdHlwZSB7VG9rZW5pemVyfVxuICovXG5mdW5jdGlvbiB0b2tlbml6ZUxpbmVFbmRpbmcoZWZmZWN0cywgb2spIHtcbiAgcmV0dXJuIHN0YXJ0XG5cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cbiAgZnVuY3Rpb24gc3RhcnQoY29kZSkge1xuICAgIGFzc2VydChtYXJrZG93bkxpbmVFbmRpbmcoY29kZSksICdleHBlY3RlZCBlb2wnKVxuICAgIGVmZmVjdHMuZW50ZXIodHlwZXMubGluZUVuZGluZylcbiAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICBlZmZlY3RzLmV4aXQodHlwZXMubGluZUVuZGluZylcbiAgICByZXR1cm4gZmFjdG9yeVNwYWNlKGVmZmVjdHMsIG9rLCB0eXBlcy5saW5lUHJlZml4KVxuICB9XG59XG4iXSwibmFtZXMiOlsib2siLCJhc3NlcnQiLCJmYWN0b3J5U3BhY2UiLCJtYXJrZG93bkxpbmVFbmRpbmciLCJ0eXBlcyIsImxpbmVFbmRpbmciLCJuYW1lIiwidG9rZW5pemUiLCJ0b2tlbml6ZUxpbmVFbmRpbmciLCJlZmZlY3RzIiwic3RhcnQiLCJjb2RlIiwiZW50ZXIiLCJjb25zdW1lIiwiZXhpdCIsImxpbmVQcmVmaXgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/line-ending.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/list.js":
/*!***********************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/list.js ***!
  \***********************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   list: () => (/* binding */ list)\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! devlop */ \"(rsc)/../../node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js\");\n/* harmony import */ var micromark_factory_space__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! micromark-factory-space */ \"(rsc)/../../node_modules/.pnpm/micromark-factory-space@2.0.1/node_modules/micromark-factory-space/dev/index.js\");\n/* harmony import */ var micromark_util_character__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! micromark-util-character */ \"(rsc)/../../node_modules/.pnpm/micromark-util-character@2.1.1/node_modules/micromark-util-character/dev/index.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! micromark-util-symbol */ \"(rsc)/../../node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/types.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! micromark-util-symbol */ \"(rsc)/../../node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/codes.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! micromark-util-symbol */ \"(rsc)/../../node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/constants.js\");\n/* harmony import */ var _blank_line_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./blank-line.js */ \"(rsc)/../../node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/blank-line.js\");\n/* harmony import */ var _thematic_break_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./thematic-break.js */ \"(rsc)/../../node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/thematic-break.js\");\n/**\n * @import {\n *   Code,\n *   Construct,\n *   Exiter,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */ \n\n\n\n\n\n/** @type {Construct} */ const list = {\n    continuation: {\n        tokenize: tokenizeListContinuation\n    },\n    exit: tokenizeListEnd,\n    name: \"list\",\n    tokenize: tokenizeListStart\n};\n/** @type {Construct} */ const listItemPrefixWhitespaceConstruct = {\n    partial: true,\n    tokenize: tokenizeListItemPrefixWhitespace\n};\n/** @type {Construct} */ const indentConstruct = {\n    partial: true,\n    tokenize: tokenizeIndent\n};\n// To do: `markdown-rs` parses list items on their own and later stitches them\n// together.\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */ function tokenizeListStart(effects, ok, nok) {\n    const self = this;\n    const tail = self.events[self.events.length - 1];\n    let initialSize = tail && tail[1].type === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.linePrefix ? tail[2].sliceSerialize(tail[1], true).length : 0;\n    let size = 0;\n    return start;\n    /** @type {State} */ function start(code) {\n        (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(self.containerState, \"expected state\");\n        const kind = self.containerState.type || (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.asterisk || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.plusSign || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.dash ? micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.listUnordered : micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.listOrdered);\n        if (kind === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.listUnordered ? !self.containerState.marker || code === self.containerState.marker : (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.asciiDigit)(code)) {\n            if (!self.containerState.type) {\n                self.containerState.type = kind;\n                effects.enter(kind, {\n                    _container: true\n                });\n            }\n            if (kind === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.listUnordered) {\n                effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.listItemPrefix);\n                return code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.asterisk || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.dash ? effects.check(_thematic_break_js__WEBPACK_IMPORTED_MODULE_4__.thematicBreak, nok, atMarker)(code) : atMarker(code);\n            }\n            if (!self.interrupt || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.digit1) {\n                effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.listItemPrefix);\n                effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.listItemValue);\n                return inside(code);\n            }\n        }\n        return nok(code);\n    }\n    /** @type {State} */ function inside(code) {\n        (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(self.containerState, \"expected state\");\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.asciiDigit)(code) && ++size < micromark_util_symbol__WEBPACK_IMPORTED_MODULE_5__.constants.listItemValueSizeMax) {\n            effects.consume(code);\n            return inside;\n        }\n        if ((!self.interrupt || size < 2) && (self.containerState.marker ? code === self.containerState.marker : code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.rightParenthesis || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.dot)) {\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.listItemValue);\n            return atMarker(code);\n        }\n        return nok(code);\n    }\n    /**\n   * @type {State}\n   **/ function atMarker(code) {\n        (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(self.containerState, \"expected state\");\n        (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(code !== micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.eof, \"eof (`null`) is not a marker\");\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.listItemMarker);\n        effects.consume(code);\n        effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.listItemMarker);\n        self.containerState.marker = self.containerState.marker || code;\n        return effects.check(_blank_line_js__WEBPACK_IMPORTED_MODULE_6__.blankLine, // Can’t be empty when interrupting.\n        self.interrupt ? nok : onBlank, effects.attempt(listItemPrefixWhitespaceConstruct, endOfPrefix, otherPrefix));\n    }\n    /** @type {State} */ function onBlank(code) {\n        (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(self.containerState, \"expected state\");\n        self.containerState.initialBlankLine = true;\n        initialSize++;\n        return endOfPrefix(code);\n    }\n    /** @type {State} */ function otherPrefix(code) {\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownSpace)(code)) {\n            effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.listItemPrefixWhitespace);\n            effects.consume(code);\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.listItemPrefixWhitespace);\n            return endOfPrefix;\n        }\n        return nok(code);\n    }\n    /** @type {State} */ function endOfPrefix(code) {\n        (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(self.containerState, \"expected state\");\n        self.containerState.size = initialSize + self.sliceSerialize(effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.listItemPrefix), true).length;\n        return ok(code);\n    }\n}\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */ function tokenizeListContinuation(effects, ok, nok) {\n    const self = this;\n    (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(self.containerState, \"expected state\");\n    self.containerState._closeFlow = undefined;\n    return effects.check(_blank_line_js__WEBPACK_IMPORTED_MODULE_6__.blankLine, onBlank, notBlank);\n    /** @type {State} */ function onBlank(code) {\n        (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(self.containerState, \"expected state\");\n        (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(typeof self.containerState.size === \"number\", \"expected size\");\n        self.containerState.furtherBlankLines = self.containerState.furtherBlankLines || self.containerState.initialBlankLine;\n        // We have a blank line.\n        // Still, try to consume at most the items size.\n        return (0,micromark_factory_space__WEBPACK_IMPORTED_MODULE_7__.factorySpace)(effects, ok, micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.listItemIndent, self.containerState.size + 1)(code);\n    }\n    /** @type {State} */ function notBlank(code) {\n        (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(self.containerState, \"expected state\");\n        if (self.containerState.furtherBlankLines || !(0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownSpace)(code)) {\n            self.containerState.furtherBlankLines = undefined;\n            self.containerState.initialBlankLine = undefined;\n            return notInCurrentItem(code);\n        }\n        self.containerState.furtherBlankLines = undefined;\n        self.containerState.initialBlankLine = undefined;\n        return effects.attempt(indentConstruct, ok, notInCurrentItem)(code);\n    }\n    /** @type {State} */ function notInCurrentItem(code) {\n        (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(self.containerState, \"expected state\");\n        // While we do continue, we signal that the flow should be closed.\n        self.containerState._closeFlow = true;\n        // As we’re closing flow, we’re no longer interrupting.\n        self.interrupt = undefined;\n        // Always populated by defaults.\n        (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(self.parser.constructs.disable.null, \"expected `disable.null` to be populated\");\n        return (0,micromark_factory_space__WEBPACK_IMPORTED_MODULE_7__.factorySpace)(effects, effects.attempt(list, ok, nok), micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.linePrefix, self.parser.constructs.disable.null.includes(\"codeIndented\") ? undefined : micromark_util_symbol__WEBPACK_IMPORTED_MODULE_5__.constants.tabSize)(code);\n    }\n}\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */ function tokenizeIndent(effects, ok, nok) {\n    const self = this;\n    (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(self.containerState, \"expected state\");\n    (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(typeof self.containerState.size === \"number\", \"expected size\");\n    return (0,micromark_factory_space__WEBPACK_IMPORTED_MODULE_7__.factorySpace)(effects, afterPrefix, micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.listItemIndent, self.containerState.size + 1);\n    /** @type {State} */ function afterPrefix(code) {\n        (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(self.containerState, \"expected state\");\n        const tail = self.events[self.events.length - 1];\n        return tail && tail[1].type === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.listItemIndent && tail[2].sliceSerialize(tail[1], true).length === self.containerState.size ? ok(code) : nok(code);\n    }\n}\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Exiter}\n */ function tokenizeListEnd(effects) {\n    (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(this.containerState, \"expected state\");\n    (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(typeof this.containerState.type === \"string\", \"expected type\");\n    effects.exit(this.containerState.type);\n}\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */ function tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n    const self = this;\n    // Always populated by defaults.\n    (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(self.parser.constructs.disable.null, \"expected `disable.null` to be populated\");\n    return (0,micromark_factory_space__WEBPACK_IMPORTED_MODULE_7__.factorySpace)(effects, afterPrefix, micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.listItemPrefixWhitespace, self.parser.constructs.disable.null.includes(\"codeIndented\") ? undefined : micromark_util_symbol__WEBPACK_IMPORTED_MODULE_5__.constants.tabSize + 1);\n    /** @type {State} */ function afterPrefix(code) {\n        const tail = self.events[self.events.length - 1];\n        return !(0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownSpace)(code) && tail && tail[1].type === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.listItemPrefixWhitespace ? ok(code) : nok(code);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/list.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/setext-underline.js":
/*!***********************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/setext-underline.js ***!
  \***********************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   setextUnderline: () => (/* binding */ setextUnderline)\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! devlop */ \"(rsc)/../../node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js\");\n/* harmony import */ var micromark_factory_space__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! micromark-factory-space */ \"(rsc)/../../node_modules/.pnpm/micromark-factory-space@2.0.1/node_modules/micromark-factory-space/dev/index.js\");\n/* harmony import */ var micromark_util_character__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! micromark-util-character */ \"(rsc)/../../node_modules/.pnpm/micromark-util-character@2.1.1/node_modules/micromark-util-character/dev/index.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! micromark-util-symbol */ \"(rsc)/../../node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/types.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! micromark-util-symbol */ \"(rsc)/../../node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/codes.js\");\n/**\n * @import {\n *   Code,\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */ \n\n\n\n/** @type {Construct} */ const setextUnderline = {\n    name: \"setextUnderline\",\n    resolveTo: resolveToSetextUnderline,\n    tokenize: tokenizeSetextUnderline\n};\n/** @type {Resolver} */ function resolveToSetextUnderline(events, context) {\n    // To do: resolve like `markdown-rs`.\n    let index = events.length;\n    /** @type {number | undefined} */ let content;\n    /** @type {number | undefined} */ let text;\n    /** @type {number | undefined} */ let definition;\n    // Find the opening of the content.\n    // It’ll always exist: we don’t tokenize if it isn’t there.\n    while(index--){\n        if (events[index][0] === \"enter\") {\n            if (events[index][1].type === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.content) {\n                content = index;\n                break;\n            }\n            if (events[index][1].type === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.paragraph) {\n                text = index;\n            }\n        } else {\n            if (events[index][1].type === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.content) {\n                // Remove the content end (if needed we’ll add it later)\n                events.splice(index, 1);\n            }\n            if (!definition && events[index][1].type === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.definition) {\n                definition = index;\n            }\n        }\n    }\n    (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(text !== undefined, \"expected a `text` index to be found\");\n    (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(content !== undefined, \"expected a `text` index to be found\");\n    (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(events[content][2] === context, \"enter context should be same\");\n    (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(events[events.length - 1][2] === context, \"enter context should be same\");\n    const heading = {\n        type: micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.setextHeading,\n        start: {\n            ...events[content][1].start\n        },\n        end: {\n            ...events[events.length - 1][1].end\n        }\n    };\n    // Change the paragraph to setext heading text.\n    events[text][1].type = micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.setextHeadingText;\n    // If we have definitions in the content, we’ll keep on having content,\n    // but we need move it.\n    if (definition) {\n        events.splice(text, 0, [\n            \"enter\",\n            heading,\n            context\n        ]);\n        events.splice(definition + 1, 0, [\n            \"exit\",\n            events[content][1],\n            context\n        ]);\n        events[content][1].end = {\n            ...events[definition][1].end\n        };\n    } else {\n        events[content][1] = heading;\n    }\n    // Add the heading exit at the end.\n    events.push([\n        \"exit\",\n        heading,\n        context\n    ]);\n    return events;\n}\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */ function tokenizeSetextUnderline(effects, ok, nok) {\n    const self = this;\n    /** @type {NonNullable<Code>} */ let marker;\n    return start;\n    /**\n   * At start of heading (setext) underline.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */ function start(code) {\n        let index = self.events.length;\n        /** @type {boolean | undefined} */ let paragraph;\n        (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.dash || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.equalsTo, \"expected `=` or `-`\");\n        // Find an opening.\n        while(index--){\n            // Skip enter/exit of line ending, line prefix, and content.\n            // We can now either have a definition or a paragraph.\n            if (self.events[index][1].type !== micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.lineEnding && self.events[index][1].type !== micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.linePrefix && self.events[index][1].type !== micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.content) {\n                paragraph = self.events[index][1].type === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.paragraph;\n                break;\n            }\n        }\n        // To do: handle lazy/pierce like `markdown-rs`.\n        // To do: parse indent like `markdown-rs`.\n        if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n            effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.setextHeadingLine);\n            marker = code;\n            return before(code);\n        }\n        return nok(code);\n    }\n    /**\n   * After optional whitespace, at `-` or `=`.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */ function before(code) {\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.setextHeadingLineSequence);\n        return inside(code);\n    }\n    /**\n   * In sequence.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */ function inside(code) {\n        if (code === marker) {\n            effects.consume(code);\n            return inside;\n        }\n        effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.setextHeadingLineSequence);\n        return (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownSpace)(code) ? (0,micromark_factory_space__WEBPACK_IMPORTED_MODULE_4__.factorySpace)(effects, after, micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.lineSuffix)(code) : after(code);\n    }\n    /**\n   * After sequence, after optional whitespace.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */ function after(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.eof || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownLineEnding)(code)) {\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.setextHeadingLine);\n            return ok(code);\n        }\n        return nok(code);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21pY3JvbWFyay1jb3JlLWNvbW1vbm1hcmtAMi4wLjMvbm9kZV9tb2R1bGVzL21pY3JvbWFyay1jb3JlLWNvbW1vbm1hcmsvZGV2L2xpYi9zZXRleHQtdW5kZXJsaW5lLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOzs7Ozs7Ozs7Q0FTQyxHQUVrQztBQUNpQjtBQUNzQjtBQUN4QjtBQUVsRCxzQkFBc0IsR0FDZixNQUFNTyxrQkFBa0I7SUFDN0JDLE1BQU07SUFDTkMsV0FBV0M7SUFDWEMsVUFBVUM7QUFDWixFQUFDO0FBRUQscUJBQXFCLEdBQ3JCLFNBQVNGLHlCQUF5QkcsTUFBTSxFQUFFQyxPQUFPO0lBQy9DLHFDQUFxQztJQUNyQyxJQUFJQyxRQUFRRixPQUFPRyxNQUFNO0lBQ3pCLCtCQUErQixHQUMvQixJQUFJQztJQUNKLCtCQUErQixHQUMvQixJQUFJQztJQUNKLCtCQUErQixHQUMvQixJQUFJQztJQUVKLG1DQUFtQztJQUNuQywyREFBMkQ7SUFDM0QsTUFBT0osUUFBUztRQUNkLElBQUlGLE1BQU0sQ0FBQ0UsTUFBTSxDQUFDLEVBQUUsS0FBSyxTQUFTO1lBQ2hDLElBQUlGLE1BQU0sQ0FBQ0UsTUFBTSxDQUFDLEVBQUUsQ0FBQ0ssSUFBSSxLQUFLZCx3REFBS0EsQ0FBQ1csT0FBTyxFQUFFO2dCQUMzQ0EsVUFBVUY7Z0JBQ1Y7WUFDRjtZQUVBLElBQUlGLE1BQU0sQ0FBQ0UsTUFBTSxDQUFDLEVBQUUsQ0FBQ0ssSUFBSSxLQUFLZCx3REFBS0EsQ0FBQ2UsU0FBUyxFQUFFO2dCQUM3Q0gsT0FBT0g7WUFDVDtRQUNGLE9BRUs7WUFDSCxJQUFJRixNQUFNLENBQUNFLE1BQU0sQ0FBQyxFQUFFLENBQUNLLElBQUksS0FBS2Qsd0RBQUtBLENBQUNXLE9BQU8sRUFBRTtnQkFDM0Msd0RBQXdEO2dCQUN4REosT0FBT1MsTUFBTSxDQUFDUCxPQUFPO1lBQ3ZCO1lBRUEsSUFBSSxDQUFDSSxjQUFjTixNQUFNLENBQUNFLE1BQU0sQ0FBQyxFQUFFLENBQUNLLElBQUksS0FBS2Qsd0RBQUtBLENBQUNhLFVBQVUsRUFBRTtnQkFDN0RBLGFBQWFKO1lBQ2Y7UUFDRjtJQUNGO0lBRUFkLDBDQUFNQSxDQUFDaUIsU0FBU0ssV0FBVztJQUMzQnRCLDBDQUFNQSxDQUFDZ0IsWUFBWU0sV0FBVztJQUM5QnRCLDBDQUFNQSxDQUFDWSxNQUFNLENBQUNJLFFBQVEsQ0FBQyxFQUFFLEtBQUtILFNBQVM7SUFDdkNiLDBDQUFNQSxDQUNKWSxNQUFNLENBQUNBLE9BQU9HLE1BQU0sR0FBRyxFQUFFLENBQUMsRUFBRSxLQUFLRixTQUNqQztJQUVGLE1BQU1VLFVBQVU7UUFDZEosTUFBTWQsd0RBQUtBLENBQUNtQixhQUFhO1FBQ3pCQyxPQUFPO1lBQUMsR0FBR2IsTUFBTSxDQUFDSSxRQUFRLENBQUMsRUFBRSxDQUFDUyxLQUFLO1FBQUE7UUFDbkNDLEtBQUs7WUFBQyxHQUFHZCxNQUFNLENBQUNBLE9BQU9HLE1BQU0sR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDVyxHQUFHO1FBQUE7SUFDM0M7SUFFQSwrQ0FBK0M7SUFDL0NkLE1BQU0sQ0FBQ0ssS0FBSyxDQUFDLEVBQUUsQ0FBQ0UsSUFBSSxHQUFHZCx3REFBS0EsQ0FBQ3NCLGlCQUFpQjtJQUU5Qyx1RUFBdUU7SUFDdkUsdUJBQXVCO0lBQ3ZCLElBQUlULFlBQVk7UUFDZE4sT0FBT1MsTUFBTSxDQUFDSixNQUFNLEdBQUc7WUFBQztZQUFTTTtZQUFTVjtTQUFRO1FBQ2xERCxPQUFPUyxNQUFNLENBQUNILGFBQWEsR0FBRyxHQUFHO1lBQUM7WUFBUU4sTUFBTSxDQUFDSSxRQUFRLENBQUMsRUFBRTtZQUFFSDtTQUFRO1FBQ3RFRCxNQUFNLENBQUNJLFFBQVEsQ0FBQyxFQUFFLENBQUNVLEdBQUcsR0FBRztZQUFDLEdBQUdkLE1BQU0sQ0FBQ00sV0FBVyxDQUFDLEVBQUUsQ0FBQ1EsR0FBRztRQUFBO0lBQ3hELE9BQU87UUFDTGQsTUFBTSxDQUFDSSxRQUFRLENBQUMsRUFBRSxHQUFHTztJQUN2QjtJQUVBLG1DQUFtQztJQUNuQ1gsT0FBT2dCLElBQUksQ0FBQztRQUFDO1FBQVFMO1FBQVNWO0tBQVE7SUFFdEMsT0FBT0Q7QUFDVDtBQUVBOzs7O0NBSUMsR0FDRCxTQUFTRCx3QkFBd0JrQixPQUFPLEVBQUU5QixFQUFFLEVBQUUrQixHQUFHO0lBQy9DLE1BQU1DLE9BQU8sSUFBSTtJQUNqQiw4QkFBOEIsR0FDOUIsSUFBSUM7SUFFSixPQUFPUDtJQUVQOzs7Ozs7Ozs7O0dBVUMsR0FDRCxTQUFTQSxNQUFNUSxJQUFJO1FBQ2pCLElBQUluQixRQUFRaUIsS0FBS25CLE1BQU0sQ0FBQ0csTUFBTTtRQUM5QixnQ0FBZ0MsR0FDaEMsSUFBSUs7UUFFSnBCLDBDQUFNQSxDQUNKaUMsU0FBUzdCLHdEQUFLQSxDQUFDOEIsSUFBSSxJQUFJRCxTQUFTN0Isd0RBQUtBLENBQUMrQixRQUFRLEVBQzlDO1FBR0YsbUJBQW1CO1FBQ25CLE1BQU9yQixRQUFTO1lBQ2QsNERBQTREO1lBQzVELHNEQUFzRDtZQUN0RCxJQUNFaUIsS0FBS25CLE1BQU0sQ0FBQ0UsTUFBTSxDQUFDLEVBQUUsQ0FBQ0ssSUFBSSxLQUFLZCx3REFBS0EsQ0FBQytCLFVBQVUsSUFDL0NMLEtBQUtuQixNQUFNLENBQUNFLE1BQU0sQ0FBQyxFQUFFLENBQUNLLElBQUksS0FBS2Qsd0RBQUtBLENBQUNnQyxVQUFVLElBQy9DTixLQUFLbkIsTUFBTSxDQUFDRSxNQUFNLENBQUMsRUFBRSxDQUFDSyxJQUFJLEtBQUtkLHdEQUFLQSxDQUFDVyxPQUFPLEVBQzVDO2dCQUNBSSxZQUFZVyxLQUFLbkIsTUFBTSxDQUFDRSxNQUFNLENBQUMsRUFBRSxDQUFDSyxJQUFJLEtBQUtkLHdEQUFLQSxDQUFDZSxTQUFTO2dCQUMxRDtZQUNGO1FBQ0Y7UUFFQSxnREFBZ0Q7UUFDaEQsMENBQTBDO1FBQzFDLElBQUksQ0FBQ1csS0FBS08sTUFBTSxDQUFDQyxJQUFJLENBQUNSLEtBQUtTLEdBQUcsR0FBR0MsSUFBSSxDQUFDLElBQUtWLENBQUFBLEtBQUtXLFNBQVMsSUFBSXRCLFNBQVEsR0FBSTtZQUN2RVMsUUFBUWMsS0FBSyxDQUFDdEMsd0RBQUtBLENBQUN1QyxpQkFBaUI7WUFDckNaLFNBQVNDO1lBQ1QsT0FBT1ksT0FBT1o7UUFDaEI7UUFFQSxPQUFPSCxJQUFJRztJQUNiO0lBRUE7Ozs7Ozs7Ozs7R0FVQyxHQUNELFNBQVNZLE9BQU9aLElBQUk7UUFDbEJKLFFBQVFjLEtBQUssQ0FBQ3RDLHdEQUFLQSxDQUFDeUMseUJBQXlCO1FBQzdDLE9BQU9DLE9BQU9kO0lBQ2hCO0lBRUE7Ozs7Ozs7Ozs7R0FVQyxHQUNELFNBQVNjLE9BQU9kLElBQUk7UUFDbEIsSUFBSUEsU0FBU0QsUUFBUTtZQUNuQkgsUUFBUW1CLE9BQU8sQ0FBQ2Y7WUFDaEIsT0FBT2M7UUFDVDtRQUVBbEIsUUFBUW9CLElBQUksQ0FBQzVDLHdEQUFLQSxDQUFDeUMseUJBQXlCO1FBRTVDLE9BQU8zQyx1RUFBYUEsQ0FBQzhCLFFBQ2pCaEMscUVBQVlBLENBQUM0QixTQUFTcUIsT0FBTzdDLHdEQUFLQSxDQUFDOEMsVUFBVSxFQUFFbEIsUUFDL0NpQixNQUFNakI7SUFDWjtJQUVBOzs7Ozs7Ozs7O0dBVUMsR0FDRCxTQUFTaUIsTUFBTWpCLElBQUk7UUFDakIsSUFBSUEsU0FBUzdCLHdEQUFLQSxDQUFDZ0QsR0FBRyxJQUFJbEQsNEVBQWtCQSxDQUFDK0IsT0FBTztZQUNsREosUUFBUW9CLElBQUksQ0FBQzVDLHdEQUFLQSxDQUFDdUMsaUJBQWlCO1lBQ3BDLE9BQU83QyxHQUFHa0M7UUFDWjtRQUVBLE9BQU9ILElBQUlHO0lBQ2I7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL3dlYi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbWljcm9tYXJrLWNvcmUtY29tbW9ubWFya0AyLjAuMy9ub2RlX21vZHVsZXMvbWljcm9tYXJrLWNvcmUtY29tbW9ubWFyay9kZXYvbGliL3NldGV4dC11bmRlcmxpbmUuanM/OTM1YyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBpbXBvcnQge1xuICogICBDb2RlLFxuICogICBDb25zdHJ1Y3QsXG4gKiAgIFJlc29sdmVyLFxuICogICBTdGF0ZSxcbiAqICAgVG9rZW5pemVDb250ZXh0LFxuICogICBUb2tlbml6ZXJcbiAqIH0gZnJvbSAnbWljcm9tYXJrLXV0aWwtdHlwZXMnXG4gKi9cblxuaW1wb3J0IHtvayBhcyBhc3NlcnR9IGZyb20gJ2RldmxvcCdcbmltcG9ydCB7ZmFjdG9yeVNwYWNlfSBmcm9tICdtaWNyb21hcmstZmFjdG9yeS1zcGFjZSdcbmltcG9ydCB7bWFya2Rvd25MaW5lRW5kaW5nLCBtYXJrZG93blNwYWNlfSBmcm9tICdtaWNyb21hcmstdXRpbC1jaGFyYWN0ZXInXG5pbXBvcnQge2NvZGVzLCB0eXBlc30gZnJvbSAnbWljcm9tYXJrLXV0aWwtc3ltYm9sJ1xuXG4vKiogQHR5cGUge0NvbnN0cnVjdH0gKi9cbmV4cG9ydCBjb25zdCBzZXRleHRVbmRlcmxpbmUgPSB7XG4gIG5hbWU6ICdzZXRleHRVbmRlcmxpbmUnLFxuICByZXNvbHZlVG86IHJlc29sdmVUb1NldGV4dFVuZGVybGluZSxcbiAgdG9rZW5pemU6IHRva2VuaXplU2V0ZXh0VW5kZXJsaW5lXG59XG5cbi8qKiBAdHlwZSB7UmVzb2x2ZXJ9ICovXG5mdW5jdGlvbiByZXNvbHZlVG9TZXRleHRVbmRlcmxpbmUoZXZlbnRzLCBjb250ZXh0KSB7XG4gIC8vIFRvIGRvOiByZXNvbHZlIGxpa2UgYG1hcmtkb3duLXJzYC5cbiAgbGV0IGluZGV4ID0gZXZlbnRzLmxlbmd0aFxuICAvKiogQHR5cGUge251bWJlciB8IHVuZGVmaW5lZH0gKi9cbiAgbGV0IGNvbnRlbnRcbiAgLyoqIEB0eXBlIHtudW1iZXIgfCB1bmRlZmluZWR9ICovXG4gIGxldCB0ZXh0XG4gIC8qKiBAdHlwZSB7bnVtYmVyIHwgdW5kZWZpbmVkfSAqL1xuICBsZXQgZGVmaW5pdGlvblxuXG4gIC8vIEZpbmQgdGhlIG9wZW5pbmcgb2YgdGhlIGNvbnRlbnQuXG4gIC8vIEl04oCZbGwgYWx3YXlzIGV4aXN0OiB3ZSBkb27igJl0IHRva2VuaXplIGlmIGl0IGlzbuKAmXQgdGhlcmUuXG4gIHdoaWxlIChpbmRleC0tKSB7XG4gICAgaWYgKGV2ZW50c1tpbmRleF1bMF0gPT09ICdlbnRlcicpIHtcbiAgICAgIGlmIChldmVudHNbaW5kZXhdWzFdLnR5cGUgPT09IHR5cGVzLmNvbnRlbnQpIHtcbiAgICAgICAgY29udGVudCA9IGluZGV4XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG5cbiAgICAgIGlmIChldmVudHNbaW5kZXhdWzFdLnR5cGUgPT09IHR5cGVzLnBhcmFncmFwaCkge1xuICAgICAgICB0ZXh0ID0gaW5kZXhcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gRXhpdFxuICAgIGVsc2Uge1xuICAgICAgaWYgKGV2ZW50c1tpbmRleF1bMV0udHlwZSA9PT0gdHlwZXMuY29udGVudCkge1xuICAgICAgICAvLyBSZW1vdmUgdGhlIGNvbnRlbnQgZW5kIChpZiBuZWVkZWQgd2XigJlsbCBhZGQgaXQgbGF0ZXIpXG4gICAgICAgIGV2ZW50cy5zcGxpY2UoaW5kZXgsIDEpXG4gICAgICB9XG5cbiAgICAgIGlmICghZGVmaW5pdGlvbiAmJiBldmVudHNbaW5kZXhdWzFdLnR5cGUgPT09IHR5cGVzLmRlZmluaXRpb24pIHtcbiAgICAgICAgZGVmaW5pdGlvbiA9IGluZGV4XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgYXNzZXJ0KHRleHQgIT09IHVuZGVmaW5lZCwgJ2V4cGVjdGVkIGEgYHRleHRgIGluZGV4IHRvIGJlIGZvdW5kJylcbiAgYXNzZXJ0KGNvbnRlbnQgIT09IHVuZGVmaW5lZCwgJ2V4cGVjdGVkIGEgYHRleHRgIGluZGV4IHRvIGJlIGZvdW5kJylcbiAgYXNzZXJ0KGV2ZW50c1tjb250ZW50XVsyXSA9PT0gY29udGV4dCwgJ2VudGVyIGNvbnRleHQgc2hvdWxkIGJlIHNhbWUnKVxuICBhc3NlcnQoXG4gICAgZXZlbnRzW2V2ZW50cy5sZW5ndGggLSAxXVsyXSA9PT0gY29udGV4dCxcbiAgICAnZW50ZXIgY29udGV4dCBzaG91bGQgYmUgc2FtZSdcbiAgKVxuICBjb25zdCBoZWFkaW5nID0ge1xuICAgIHR5cGU6IHR5cGVzLnNldGV4dEhlYWRpbmcsXG4gICAgc3RhcnQ6IHsuLi5ldmVudHNbY29udGVudF1bMV0uc3RhcnR9LFxuICAgIGVuZDogey4uLmV2ZW50c1tldmVudHMubGVuZ3RoIC0gMV1bMV0uZW5kfVxuICB9XG5cbiAgLy8gQ2hhbmdlIHRoZSBwYXJhZ3JhcGggdG8gc2V0ZXh0IGhlYWRpbmcgdGV4dC5cbiAgZXZlbnRzW3RleHRdWzFdLnR5cGUgPSB0eXBlcy5zZXRleHRIZWFkaW5nVGV4dFxuXG4gIC8vIElmIHdlIGhhdmUgZGVmaW5pdGlvbnMgaW4gdGhlIGNvbnRlbnQsIHdl4oCZbGwga2VlcCBvbiBoYXZpbmcgY29udGVudCxcbiAgLy8gYnV0IHdlIG5lZWQgbW92ZSBpdC5cbiAgaWYgKGRlZmluaXRpb24pIHtcbiAgICBldmVudHMuc3BsaWNlKHRleHQsIDAsIFsnZW50ZXInLCBoZWFkaW5nLCBjb250ZXh0XSlcbiAgICBldmVudHMuc3BsaWNlKGRlZmluaXRpb24gKyAxLCAwLCBbJ2V4aXQnLCBldmVudHNbY29udGVudF1bMV0sIGNvbnRleHRdKVxuICAgIGV2ZW50c1tjb250ZW50XVsxXS5lbmQgPSB7Li4uZXZlbnRzW2RlZmluaXRpb25dWzFdLmVuZH1cbiAgfSBlbHNlIHtcbiAgICBldmVudHNbY29udGVudF1bMV0gPSBoZWFkaW5nXG4gIH1cblxuICAvLyBBZGQgdGhlIGhlYWRpbmcgZXhpdCBhdCB0aGUgZW5kLlxuICBldmVudHMucHVzaChbJ2V4aXQnLCBoZWFkaW5nLCBjb250ZXh0XSlcblxuICByZXR1cm4gZXZlbnRzXG59XG5cbi8qKlxuICogQHRoaXMge1Rva2VuaXplQ29udGV4dH1cbiAqICAgQ29udGV4dC5cbiAqIEB0eXBlIHtUb2tlbml6ZXJ9XG4gKi9cbmZ1bmN0aW9uIHRva2VuaXplU2V0ZXh0VW5kZXJsaW5lKGVmZmVjdHMsIG9rLCBub2spIHtcbiAgY29uc3Qgc2VsZiA9IHRoaXNcbiAgLyoqIEB0eXBlIHtOb25OdWxsYWJsZTxDb2RlPn0gKi9cbiAgbGV0IG1hcmtlclxuXG4gIHJldHVybiBzdGFydFxuXG4gIC8qKlxuICAgKiBBdCBzdGFydCBvZiBoZWFkaW5nIChzZXRleHQpIHVuZGVybGluZS5cbiAgICpcbiAgICogYGBgbWFya2Rvd25cbiAgICogICB8IGFhXG4gICAqID4gfCA9PVxuICAgKiAgICAgXlxuICAgKiBgYGBcbiAgICpcbiAgICogQHR5cGUge1N0YXRlfVxuICAgKi9cbiAgZnVuY3Rpb24gc3RhcnQoY29kZSkge1xuICAgIGxldCBpbmRleCA9IHNlbGYuZXZlbnRzLmxlbmd0aFxuICAgIC8qKiBAdHlwZSB7Ym9vbGVhbiB8IHVuZGVmaW5lZH0gKi9cbiAgICBsZXQgcGFyYWdyYXBoXG5cbiAgICBhc3NlcnQoXG4gICAgICBjb2RlID09PSBjb2Rlcy5kYXNoIHx8IGNvZGUgPT09IGNvZGVzLmVxdWFsc1RvLFxuICAgICAgJ2V4cGVjdGVkIGA9YCBvciBgLWAnXG4gICAgKVxuXG4gICAgLy8gRmluZCBhbiBvcGVuaW5nLlxuICAgIHdoaWxlIChpbmRleC0tKSB7XG4gICAgICAvLyBTa2lwIGVudGVyL2V4aXQgb2YgbGluZSBlbmRpbmcsIGxpbmUgcHJlZml4LCBhbmQgY29udGVudC5cbiAgICAgIC8vIFdlIGNhbiBub3cgZWl0aGVyIGhhdmUgYSBkZWZpbml0aW9uIG9yIGEgcGFyYWdyYXBoLlxuICAgICAgaWYgKFxuICAgICAgICBzZWxmLmV2ZW50c1tpbmRleF1bMV0udHlwZSAhPT0gdHlwZXMubGluZUVuZGluZyAmJlxuICAgICAgICBzZWxmLmV2ZW50c1tpbmRleF1bMV0udHlwZSAhPT0gdHlwZXMubGluZVByZWZpeCAmJlxuICAgICAgICBzZWxmLmV2ZW50c1tpbmRleF1bMV0udHlwZSAhPT0gdHlwZXMuY29udGVudFxuICAgICAgKSB7XG4gICAgICAgIHBhcmFncmFwaCA9IHNlbGYuZXZlbnRzW2luZGV4XVsxXS50eXBlID09PSB0eXBlcy5wYXJhZ3JhcGhcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBUbyBkbzogaGFuZGxlIGxhenkvcGllcmNlIGxpa2UgYG1hcmtkb3duLXJzYC5cbiAgICAvLyBUbyBkbzogcGFyc2UgaW5kZW50IGxpa2UgYG1hcmtkb3duLXJzYC5cbiAgICBpZiAoIXNlbGYucGFyc2VyLmxhenlbc2VsZi5ub3coKS5saW5lXSAmJiAoc2VsZi5pbnRlcnJ1cHQgfHwgcGFyYWdyYXBoKSkge1xuICAgICAgZWZmZWN0cy5lbnRlcih0eXBlcy5zZXRleHRIZWFkaW5nTGluZSlcbiAgICAgIG1hcmtlciA9IGNvZGVcbiAgICAgIHJldHVybiBiZWZvcmUoY29kZSlcbiAgICB9XG5cbiAgICByZXR1cm4gbm9rKGNvZGUpXG4gIH1cblxuICAvKipcbiAgICogQWZ0ZXIgb3B0aW9uYWwgd2hpdGVzcGFjZSwgYXQgYC1gIG9yIGA9YC5cbiAgICpcbiAgICogYGBgbWFya2Rvd25cbiAgICogICB8IGFhXG4gICAqID4gfCA9PVxuICAgKiAgICAgXlxuICAgKiBgYGBcbiAgICpcbiAgICogQHR5cGUge1N0YXRlfVxuICAgKi9cbiAgZnVuY3Rpb24gYmVmb3JlKGNvZGUpIHtcbiAgICBlZmZlY3RzLmVudGVyKHR5cGVzLnNldGV4dEhlYWRpbmdMaW5lU2VxdWVuY2UpXG4gICAgcmV0dXJuIGluc2lkZShjb2RlKVxuICB9XG5cbiAgLyoqXG4gICAqIEluIHNlcXVlbmNlLlxuICAgKlxuICAgKiBgYGBtYXJrZG93blxuICAgKiAgIHwgYWFcbiAgICogPiB8ID09XG4gICAqICAgICBeXG4gICAqIGBgYFxuICAgKlxuICAgKiBAdHlwZSB7U3RhdGV9XG4gICAqL1xuICBmdW5jdGlvbiBpbnNpZGUoY29kZSkge1xuICAgIGlmIChjb2RlID09PSBtYXJrZXIpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgcmV0dXJuIGluc2lkZVxuICAgIH1cblxuICAgIGVmZmVjdHMuZXhpdCh0eXBlcy5zZXRleHRIZWFkaW5nTGluZVNlcXVlbmNlKVxuXG4gICAgcmV0dXJuIG1hcmtkb3duU3BhY2UoY29kZSlcbiAgICAgID8gZmFjdG9yeVNwYWNlKGVmZmVjdHMsIGFmdGVyLCB0eXBlcy5saW5lU3VmZml4KShjb2RlKVxuICAgICAgOiBhZnRlcihjb2RlKVxuICB9XG5cbiAgLyoqXG4gICAqIEFmdGVyIHNlcXVlbmNlLCBhZnRlciBvcHRpb25hbCB3aGl0ZXNwYWNlLlxuICAgKlxuICAgKiBgYGBtYXJrZG93blxuICAgKiAgIHwgYWFcbiAgICogPiB8ID09XG4gICAqICAgICAgIF5cbiAgICogYGBgXG4gICAqXG4gICAqIEB0eXBlIHtTdGF0ZX1cbiAgICovXG4gIGZ1bmN0aW9uIGFmdGVyKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gY29kZXMuZW9mIHx8IG1hcmtkb3duTGluZUVuZGluZyhjb2RlKSkge1xuICAgICAgZWZmZWN0cy5leGl0KHR5cGVzLnNldGV4dEhlYWRpbmdMaW5lKVxuICAgICAgcmV0dXJuIG9rKGNvZGUpXG4gICAgfVxuXG4gICAgcmV0dXJuIG5vayhjb2RlKVxuICB9XG59XG4iXSwibmFtZXMiOlsib2siLCJhc3NlcnQiLCJmYWN0b3J5U3BhY2UiLCJtYXJrZG93bkxpbmVFbmRpbmciLCJtYXJrZG93blNwYWNlIiwiY29kZXMiLCJ0eXBlcyIsInNldGV4dFVuZGVybGluZSIsIm5hbWUiLCJyZXNvbHZlVG8iLCJyZXNvbHZlVG9TZXRleHRVbmRlcmxpbmUiLCJ0b2tlbml6ZSIsInRva2VuaXplU2V0ZXh0VW5kZXJsaW5lIiwiZXZlbnRzIiwiY29udGV4dCIsImluZGV4IiwibGVuZ3RoIiwiY29udGVudCIsInRleHQiLCJkZWZpbml0aW9uIiwidHlwZSIsInBhcmFncmFwaCIsInNwbGljZSIsInVuZGVmaW5lZCIsImhlYWRpbmciLCJzZXRleHRIZWFkaW5nIiwic3RhcnQiLCJlbmQiLCJzZXRleHRIZWFkaW5nVGV4dCIsInB1c2giLCJlZmZlY3RzIiwibm9rIiwic2VsZiIsIm1hcmtlciIsImNvZGUiLCJkYXNoIiwiZXF1YWxzVG8iLCJsaW5lRW5kaW5nIiwibGluZVByZWZpeCIsInBhcnNlciIsImxhenkiLCJub3ciLCJsaW5lIiwiaW50ZXJydXB0IiwiZW50ZXIiLCJzZXRleHRIZWFkaW5nTGluZSIsImJlZm9yZSIsInNldGV4dEhlYWRpbmdMaW5lU2VxdWVuY2UiLCJpbnNpZGUiLCJjb25zdW1lIiwiZXhpdCIsImFmdGVyIiwibGluZVN1ZmZpeCIsImVvZiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/setext-underline.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/thematic-break.js":
/*!*********************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/thematic-break.js ***!
  \*********************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   thematicBreak: () => (/* binding */ thematicBreak)\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! devlop */ \"(rsc)/../../node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js\");\n/* harmony import */ var micromark_factory_space__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! micromark-factory-space */ \"(rsc)/../../node_modules/.pnpm/micromark-factory-space@2.0.1/node_modules/micromark-factory-space/dev/index.js\");\n/* harmony import */ var micromark_util_character__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! micromark-util-character */ \"(rsc)/../../node_modules/.pnpm/micromark-util-character@2.1.1/node_modules/micromark-util-character/dev/index.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! micromark-util-symbol */ \"(rsc)/../../node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/types.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! micromark-util-symbol */ \"(rsc)/../../node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/codes.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! micromark-util-symbol */ \"(rsc)/../../node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/constants.js\");\n/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */ \n\n\n\n/** @type {Construct} */ const thematicBreak = {\n    name: \"thematicBreak\",\n    tokenize: tokenizeThematicBreak\n};\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */ function tokenizeThematicBreak(effects, ok, nok) {\n    let size = 0;\n    /** @type {NonNullable<Code>} */ let marker;\n    return start;\n    /**\n   * Start of thematic break.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */ function start(code) {\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.thematicBreak);\n        // To do: parse indent like `markdown-rs`.\n        return before(code);\n    }\n    /**\n   * After optional whitespace, at marker.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */ function before(code) {\n        (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.asterisk || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.dash || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.underscore, \"expected `*`, `-`, or `_`\");\n        marker = code;\n        return atBreak(code);\n    }\n    /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */ function atBreak(code) {\n        if (code === marker) {\n            effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.thematicBreakSequence);\n            return sequence(code);\n        }\n        if (size >= micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.constants.thematicBreakMarkerCountMin && (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.codes.eof || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownLineEnding)(code))) {\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.thematicBreak);\n            return ok(code);\n        }\n        return nok(code);\n    }\n    /**\n   * In sequence.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */ function sequence(code) {\n        if (code === marker) {\n            effects.consume(code);\n            size++;\n            return sequence;\n        }\n        effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.thematicBreakSequence);\n        return (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownSpace)(code) ? (0,micromark_factory_space__WEBPACK_IMPORTED_MODULE_5__.factorySpace)(effects, atBreak, micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.types.whitespace)(code) : atBreak(code);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21pY3JvbWFyay1jb3JlLWNvbW1vbm1hcmtAMi4wLjMvbm9kZV9tb2R1bGVzL21pY3JvbWFyay1jb3JlLWNvbW1vbm1hcmsvZGV2L2xpYi90aGVtYXRpYy1icmVhay5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7Ozs7Ozs7O0NBUUMsR0FFa0M7QUFDaUI7QUFDc0I7QUFDYjtBQUU3RCxzQkFBc0IsR0FDZixNQUFNUSxnQkFBZ0I7SUFDM0JDLE1BQU07SUFDTkMsVUFBVUM7QUFDWixFQUFDO0FBRUQ7Ozs7Q0FJQyxHQUNELFNBQVNBLHNCQUFzQkMsT0FBTyxFQUFFWixFQUFFLEVBQUVhLEdBQUc7SUFDN0MsSUFBSUMsT0FBTztJQUNYLDhCQUE4QixHQUM5QixJQUFJQztJQUVKLE9BQU9DO0lBRVA7Ozs7Ozs7OztHQVNDLEdBQ0QsU0FBU0EsTUFBTUMsSUFBSTtRQUNqQkwsUUFBUU0sS0FBSyxDQUFDWCx3REFBS0EsQ0FBQ0MsYUFBYTtRQUNqQywwQ0FBMEM7UUFDMUMsT0FBT1csT0FBT0Y7SUFDaEI7SUFFQTs7Ozs7Ozs7O0dBU0MsR0FDRCxTQUFTRSxPQUFPRixJQUFJO1FBQ2xCaEIsMENBQU1BLENBQ0pnQixTQUFTWix3REFBS0EsQ0FBQ2UsUUFBUSxJQUNyQkgsU0FBU1osd0RBQUtBLENBQUNnQixJQUFJLElBQ25CSixTQUFTWix3REFBS0EsQ0FBQ2lCLFVBQVUsRUFDM0I7UUFFRlAsU0FBU0U7UUFDVCxPQUFPTSxRQUFRTjtJQUNqQjtJQUVBOzs7Ozs7Ozs7R0FTQyxHQUNELFNBQVNNLFFBQVFOLElBQUk7UUFDbkIsSUFBSUEsU0FBU0YsUUFBUTtZQUNuQkgsUUFBUU0sS0FBSyxDQUFDWCx3REFBS0EsQ0FBQ2lCLHFCQUFxQjtZQUN6QyxPQUFPQyxTQUFTUjtRQUNsQjtRQUVBLElBQ0VILFFBQVFSLDREQUFTQSxDQUFDb0IsMkJBQTJCLElBQzVDVCxDQUFBQSxTQUFTWix3REFBS0EsQ0FBQ3NCLEdBQUcsSUFBSXhCLDRFQUFrQkEsQ0FBQ2MsS0FBSSxHQUM5QztZQUNBTCxRQUFRZ0IsSUFBSSxDQUFDckIsd0RBQUtBLENBQUNDLGFBQWE7WUFDaEMsT0FBT1IsR0FBR2lCO1FBQ1o7UUFFQSxPQUFPSixJQUFJSTtJQUNiO0lBRUE7Ozs7Ozs7OztHQVNDLEdBQ0QsU0FBU1EsU0FBU1IsSUFBSTtRQUNwQixJQUFJQSxTQUFTRixRQUFRO1lBQ25CSCxRQUFRaUIsT0FBTyxDQUFDWjtZQUNoQkg7WUFDQSxPQUFPVztRQUNUO1FBRUFiLFFBQVFnQixJQUFJLENBQUNyQix3REFBS0EsQ0FBQ2lCLHFCQUFxQjtRQUN4QyxPQUFPcEIsdUVBQWFBLENBQUNhLFFBQ2pCZixxRUFBWUEsQ0FBQ1UsU0FBU1csU0FBU2hCLHdEQUFLQSxDQUFDdUIsVUFBVSxFQUFFYixRQUNqRE0sUUFBUU47SUFDZDtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2ViLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9taWNyb21hcmstY29yZS1jb21tb25tYXJrQDIuMC4zL25vZGVfbW9kdWxlcy9taWNyb21hcmstY29yZS1jb21tb25tYXJrL2Rldi9saWIvdGhlbWF0aWMtYnJlYWsuanM/YWRjZSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBpbXBvcnQge1xuICogICBDb2RlLFxuICogICBDb25zdHJ1Y3QsXG4gKiAgIFN0YXRlLFxuICogICBUb2tlbml6ZUNvbnRleHQsXG4gKiAgIFRva2VuaXplclxuICogfSBmcm9tICdtaWNyb21hcmstdXRpbC10eXBlcydcbiAqL1xuXG5pbXBvcnQge29rIGFzIGFzc2VydH0gZnJvbSAnZGV2bG9wJ1xuaW1wb3J0IHtmYWN0b3J5U3BhY2V9IGZyb20gJ21pY3JvbWFyay1mYWN0b3J5LXNwYWNlJ1xuaW1wb3J0IHttYXJrZG93bkxpbmVFbmRpbmcsIG1hcmtkb3duU3BhY2V9IGZyb20gJ21pY3JvbWFyay11dGlsLWNoYXJhY3RlcidcbmltcG9ydCB7Y29kZXMsIGNvbnN0YW50cywgdHlwZXN9IGZyb20gJ21pY3JvbWFyay11dGlsLXN5bWJvbCdcblxuLyoqIEB0eXBlIHtDb25zdHJ1Y3R9ICovXG5leHBvcnQgY29uc3QgdGhlbWF0aWNCcmVhayA9IHtcbiAgbmFtZTogJ3RoZW1hdGljQnJlYWsnLFxuICB0b2tlbml6ZTogdG9rZW5pemVUaGVtYXRpY0JyZWFrXG59XG5cbi8qKlxuICogQHRoaXMge1Rva2VuaXplQ29udGV4dH1cbiAqICAgQ29udGV4dC5cbiAqIEB0eXBlIHtUb2tlbml6ZXJ9XG4gKi9cbmZ1bmN0aW9uIHRva2VuaXplVGhlbWF0aWNCcmVhayhlZmZlY3RzLCBvaywgbm9rKSB7XG4gIGxldCBzaXplID0gMFxuICAvKiogQHR5cGUge05vbk51bGxhYmxlPENvZGU+fSAqL1xuICBsZXQgbWFya2VyXG5cbiAgcmV0dXJuIHN0YXJ0XG5cbiAgLyoqXG4gICAqIFN0YXJ0IG9mIHRoZW1hdGljIGJyZWFrLlxuICAgKlxuICAgKiBgYGBtYXJrZG93blxuICAgKiA+IHwgKioqXG4gICAqICAgICBeXG4gICAqIGBgYFxuICAgKlxuICAgKiBAdHlwZSB7U3RhdGV9XG4gICAqL1xuICBmdW5jdGlvbiBzdGFydChjb2RlKSB7XG4gICAgZWZmZWN0cy5lbnRlcih0eXBlcy50aGVtYXRpY0JyZWFrKVxuICAgIC8vIFRvIGRvOiBwYXJzZSBpbmRlbnQgbGlrZSBgbWFya2Rvd24tcnNgLlxuICAgIHJldHVybiBiZWZvcmUoY29kZSlcbiAgfVxuXG4gIC8qKlxuICAgKiBBZnRlciBvcHRpb25hbCB3aGl0ZXNwYWNlLCBhdCBtYXJrZXIuXG4gICAqXG4gICAqIGBgYG1hcmtkb3duXG4gICAqID4gfCAqKipcbiAgICogICAgIF5cbiAgICogYGBgXG4gICAqXG4gICAqIEB0eXBlIHtTdGF0ZX1cbiAgICovXG4gIGZ1bmN0aW9uIGJlZm9yZShjb2RlKSB7XG4gICAgYXNzZXJ0KFxuICAgICAgY29kZSA9PT0gY29kZXMuYXN0ZXJpc2sgfHxcbiAgICAgICAgY29kZSA9PT0gY29kZXMuZGFzaCB8fFxuICAgICAgICBjb2RlID09PSBjb2Rlcy51bmRlcnNjb3JlLFxuICAgICAgJ2V4cGVjdGVkIGAqYCwgYC1gLCBvciBgX2AnXG4gICAgKVxuICAgIG1hcmtlciA9IGNvZGVcbiAgICByZXR1cm4gYXRCcmVhayhjb2RlKVxuICB9XG5cbiAgLyoqXG4gICAqIEFmdGVyIHNvbWV0aGluZywgYmVmb3JlIHNvbWV0aGluZyBlbHNlLlxuICAgKlxuICAgKiBgYGBtYXJrZG93blxuICAgKiA+IHwgKioqXG4gICAqICAgICBeXG4gICAqIGBgYFxuICAgKlxuICAgKiBAdHlwZSB7U3RhdGV9XG4gICAqL1xuICBmdW5jdGlvbiBhdEJyZWFrKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gbWFya2VyKSB7XG4gICAgICBlZmZlY3RzLmVudGVyKHR5cGVzLnRoZW1hdGljQnJlYWtTZXF1ZW5jZSlcbiAgICAgIHJldHVybiBzZXF1ZW5jZShjb2RlKVxuICAgIH1cblxuICAgIGlmIChcbiAgICAgIHNpemUgPj0gY29uc3RhbnRzLnRoZW1hdGljQnJlYWtNYXJrZXJDb3VudE1pbiAmJlxuICAgICAgKGNvZGUgPT09IGNvZGVzLmVvZiB8fCBtYXJrZG93bkxpbmVFbmRpbmcoY29kZSkpXG4gICAgKSB7XG4gICAgICBlZmZlY3RzLmV4aXQodHlwZXMudGhlbWF0aWNCcmVhaylcbiAgICAgIHJldHVybiBvayhjb2RlKVxuICAgIH1cblxuICAgIHJldHVybiBub2soY29kZSlcbiAgfVxuXG4gIC8qKlxuICAgKiBJbiBzZXF1ZW5jZS5cbiAgICpcbiAgICogYGBgbWFya2Rvd25cbiAgICogPiB8ICoqKlxuICAgKiAgICAgXlxuICAgKiBgYGBcbiAgICpcbiAgICogQHR5cGUge1N0YXRlfVxuICAgKi9cbiAgZnVuY3Rpb24gc2VxdWVuY2UoY29kZSkge1xuICAgIGlmIChjb2RlID09PSBtYXJrZXIpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgc2l6ZSsrXG4gICAgICByZXR1cm4gc2VxdWVuY2VcbiAgICB9XG5cbiAgICBlZmZlY3RzLmV4aXQodHlwZXMudGhlbWF0aWNCcmVha1NlcXVlbmNlKVxuICAgIHJldHVybiBtYXJrZG93blNwYWNlKGNvZGUpXG4gICAgICA/IGZhY3RvcnlTcGFjZShlZmZlY3RzLCBhdEJyZWFrLCB0eXBlcy53aGl0ZXNwYWNlKShjb2RlKVxuICAgICAgOiBhdEJyZWFrKGNvZGUpXG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJvayIsImFzc2VydCIsImZhY3RvcnlTcGFjZSIsIm1hcmtkb3duTGluZUVuZGluZyIsIm1hcmtkb3duU3BhY2UiLCJjb2RlcyIsImNvbnN0YW50cyIsInR5cGVzIiwidGhlbWF0aWNCcmVhayIsIm5hbWUiLCJ0b2tlbml6ZSIsInRva2VuaXplVGhlbWF0aWNCcmVhayIsImVmZmVjdHMiLCJub2siLCJzaXplIiwibWFya2VyIiwic3RhcnQiLCJjb2RlIiwiZW50ZXIiLCJiZWZvcmUiLCJhc3RlcmlzayIsImRhc2giLCJ1bmRlcnNjb3JlIiwiYXRCcmVhayIsInRoZW1hdGljQnJlYWtTZXF1ZW5jZSIsInNlcXVlbmNlIiwidGhlbWF0aWNCcmVha01hcmtlckNvdW50TWluIiwiZW9mIiwiZXhpdCIsImNvbnN1bWUiLCJ3aGl0ZXNwYWNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/thematic-break.js\n");

/***/ })

};
;